{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WELCOME TO","text":"<p>Welcome to the SwapDEX Wiki.</p> <p>The Wiki serves as the central source of truth for SwapDEX Chain. It is a community-focused initiative led by the SwapDEX team to keep an up-to-date resource on the best information for learning, building, or maintaining on SwapDEX Chain.</p> <p>Warning</p> <p>Work in progress content can change ,and it's not definitive .</p>"},{"location":"#what-is-the-swapdex-web-30-ecosystem","title":"What is the SwapDEX Web 3.0 Ecosystem?","text":"<p>The SwapDEX ecosystem consists of two blockchains, the main chain SwapDEX Chain and an innovator blockchain called KUSARI which holds real economic value and is all about innovating the space of Web 3.0 based DeFi - learn more about KUSARI here.</p> <p>SwapDEX Chain is a living network with the core pillars in true decentralization, cross-chain operability and seamless upgradability. Both networks have an advanced suite of governance tools and, using the Substrate framework that allows autonomous deployment of upgrades (forkless updates). The SwapDEX Chain and KUSARI are adapting therefore to the growing needs of a DeFi loving community without the risk of dividing the community by blockchain forks.</p> <p>Tip</p> <p>You can read more about our Governance Suite here.</p> <p>By connecting the three pillars (Decentralization, Cross-Chain Operability and Forkless Upgrades) the SwapDEX ecosystem serves as a foundational layer for a truly decentralized DeFi network, where DeFi users control their data and are not limited by trust bounds within the network.</p>"},{"location":"#what-is-our-mission","title":"What is our mission?","text":"<p>We\u2019re on a mission to truly decentralize finance. We revolutionize the future of DeFi by providing the industry-leading ecosystem, blockchain, exchange and end-to-end financial platform within a community-governed ecosystem.</p> <p>Why do we need SwapDEX to help achieve true Decentralization?</p> <p>The distribution of funds in the crypto space is still relatively centralized with the majority of funds in the hands of relatively few. Part of this is because the technology is still in its youth and adoption still hasn\u2019t reached the masses, although the path towards real mass adoption is getting clearer by the day. The Problem of centralized funds still persists as a lot of coins and tokens are in the hands of a few big players in the industry.</p> <p>In order to further disperse these financial resources and give everyone a fair chance of participating in an independent market, exchanges mark a pivotal point. A widespread allocation is only possible if there are a lot of different - ideally independent and decentralized - exchanges that grant access to assets with each acting as a sort of contingency for another, avoiding risk of corruption.</p> <p>The requirements for those exchanges are steadily rising and rightfully so. Investors want to be able to voice their concerns when putting their hard-earned money at risk and the weight of their voice has been rather small in the past. It's clear that it's one of the major challenges for exchanges and DeFi projects to empower the individual investors and give them the right to vote on important decisions. With growing desire for participation comes the question on how to meet the needs of the growing crypto community.</p> <p>SwapDEX Chain offers its users' participation through an elaborate voting and consensus mechanism that strives to best represent the interest of each one of their investors through nominating the most trustworthy validators (nodes that supply the blockchain with the hardware necessary) and voting upon a trusted council to ensure long term stability of the chain and the trading D'Apps deployed on its native SwapDEX Chain.</p>"},{"location":"#why-swapdex","title":"Why SwapDEX?","text":"<p>Back in the early 2000s, when the internet was gaining popularity for the first time, the internet featured read-only, static, basic web pages. The online connected world at the time was only the beginning of virtual data, identities, and more. The internet during this time was also called the Web 1.0.</p> <p>As social media platforms and online businesses began to emerge, the internet transformed into the Web 2.0. This upgraded internet, which we still use today, features dynamic, interactive web pages, where users can read and write information plus publish their own for others to see. However, this version of the web comes with downsides, dealing with data control, privacy issues, and the consequences of trust. This is where the WEB3 comes into the picture.</p> <p>The WEB3 enables us to take centralized infrastructure and applications like CEX's and turning them into decentralized, trust-free protocols. The goal is to transform the DeFi space into a decentralized web, where users control their own data and identity in a trust-free environment. Our movement aims to remove intermediaries and build a trustless infrastructure for DeFi.</p>"},{"location":"#what-makes-swapdex-unique","title":"What makes SwapDEX unique?","text":"<ul> <li>Cross-Chain Capability</li> <li>Cross-chain liquidity pools bridging multichain assets</li> <li>Automized wrapping service for EVM or Substrate based tokens</li> <li>Multi-Wallet access</li> <li>Low Transaction and Gas Fees</li> <li>Chain transactions fees are going back to liquidity providers</li> <li>Fast Transaction Times</li> <li>1500+ transactions per second</li> <li>Decentralized Governance</li> <li>Community Funding</li> </ul>"},{"location":"#what-can-i-do-with-my-sdx","title":"What can I do with my SDX?","text":"<p>SDX is the native coin of the SwapDEX Chain and can be used for transaction fees, staking and governance. SDX has utility in SwapDEX's democracy. Bonding SDX is a requirement to create proposals, to second them and to vote on them when they become referendums.</p>"},{"location":"#how-does-swapdex-work","title":"How does SwapDEX work?","text":"<p>SwapDEX Chain is maintained by a set of validators that are selected through the Nominated Proof of Stake (NPoS) consensus mechanism which is responsible for producing the blocks and determining finality. Validators and Nominators are rewarded if the validators behave correctly and offer all SDX holders the opportunity to establish multiple passive income streams. Misbehavior is punished via the Slashing Mechanism. More details on incentives and economics can be reviewed here.</p> <p>Furthermore, SwapDEX Chain has a decentralized governance scheme that can change any SwapDEX design decision and parameter.</p> <p>To interact with other blockchains that want to benefit from fast transaction times, low transaction fees and cross-chain capability, SwapDEX establishes bridges that offer a two-way compatibility, meaning that transactions can be made between different blockchains.</p>"},{"location":"#why-should-you-use-swapdex-chain","title":"Why should you use SwapDEX Chain?","text":"<p>Whether you're a blockchain developer or if you're interested in taking part of SwapDEX's community, SwapDEX offers a platform for everyone. This wiki offers a place for developers and hodlers to utilize tools and for brand-new learners to dive into educational material.</p>"},{"location":"#interact-with-swapdex-chain","title":"Interact with SwapDEX Chain","text":"Creating an Account Balance Transfers Staking DApps Bridges Vote for Councilors Make a Proposal Council Candidacy Treasury Set an Identity Become a Nominator Become a Validator"},{"location":"#disclaimer","title":"Disclaimer:","text":"<p>Blockchain technologies are constantly evolving. This paper describes the best possible planned development, however, due to the nature of the technology and the complexity of integrating the world of blockchain.</p> <p>This document may be subject to change. We try to come close to the original plan, but sometimes modifications are necessary to improve the user experience and overcome technological barriers encountered during development.</p>"},{"location":"#references","title":"References","text":"<ul> <li>https://substrate.dev/docs/en/knowledgebase/smart-contracts/</li> <li>https://substrate.dev/</li> </ul> <p> Written by Petar </p>"},{"location":"credits/","title":"HONOR TO WHOM HONOR IS DUE","text":"<p>This documentation is standing on the shoulders of many brilliant minds within the blockchain universe. Many parts within the docs are closely oriented to existing documentations but slightly tailored to the specifications of Kusari and SwapDEX. </p> <p>The entire SwapDEX Team would like to thank and credit the following projects and by thus honoring their contribution to the blockchain universe:</p> <ul> <li>PolkaDot</li> <li>Kusama</li> <li>Moonbeam</li> <li>Edgeware</li> <li>Galital</li> <li>Substrate</li> <li>Truffle</li> <li>Parity Technology</li> </ul> <p>Special thanks goes to Edgeware and Truffle for their development guides.</p> <p>Much love and respect , </p> <p>The Kusari/SwapDEX Team</p> <p></p> <p> Written by The Kusari/SwapDEX Team </p>"},{"location":"deep-dives/Using-Web3js/","title":"Using Web3.js with SwapDEX","text":""},{"location":"deep-dives/bridges/","title":"Bridges","text":"<p>Warning</p> <p>Work in progress content can change and it's not definitive .</p>"},{"location":"deep-dives/evm-pallet/","title":"EVM Pallet","text":"<p>The EVM module allows unmodified EVM code to be executed in a Substrate-based blockchain.</p>"},{"location":"deep-dives/evm-pallet/#evm-engine","title":"EVM Engine","text":"<p>The EVM module uses SputnikVM as the underlying EVM engine.</p>"},{"location":"deep-dives/evm-pallet/#execution-lifecycle","title":"Execution lifecycle","text":"<p>There are a separate set of accounts managed by the EVM module. Substrate based accounts can call the EVM Module to deposit or withdraw balance from the Substrate base-currency into a different balance managed and used by the EVM module. Once a user has populated their balance, they can create and call smart contracts using this module.</p> <p>Substrate accounts and EVM external accounts are mapped via customizable conversion functions.</p>"},{"location":"deep-dives/evm-pallet/#evm-module-vs-ethereum-network","title":"EVM module vs Ethereum network","text":"<p>The EVM module should be able to produce nearly identical results compared to the Ethereum mainnet, including gas cost and balance changes.</p> <p>Observable differences include:</p> <p>The available length of block hashes may not be 256 depending on the configuration of the System module in the Substrate runtime. Difficulty and coinbase, which do not make sense in this module and is currently hard coded to zero. We currently do not aim to make unobservable behaviors, such as state root, to be the same. We also don't aim to follow the exact same transaction / receipt format. However, given one Ethereum transaction and one Substrate account's private key, one should be able to convert any Ethereum transaction into a transaction compatible with this module.</p> <p>The gas configurations are configurable. Right now, a pre-defined Istanbul hard fork configuration option is provided.</p>"},{"location":"deep-dives/staking/","title":"STAKING","text":"<p>This guide will introduce you to the concept of staking on the SwapDEX and Kusari networks. SDX and KSI are utilizing a {=Proof-of-Stake=} consensus mechanism to agree on processes like block authoring and finality.  As the name implies, staking plays an essential role on both networks.  </p> <p>In short, you have two options to stake. Either you stake in the form of nomination, or you stake by running a validation.  But staking, in general, means that you bind your SDX or KSI holdings for a specific purpose and time to receive rewards in return. </p> <p>This guide will mainly focus on helping you decide to become a nominator or a validator and give you some examples of the rewards you could expect.</p> <p>Validator</p> <p>The staking system on SwapDEX and Kusari is designed to pay out rewards equally to all validators, regardless of their stake. That means the amount of staked coins on a validator does not influence its ability to author or validate more blocks. However, there is a probabilistic component to reward calculation (discussed below), so rewards may not be exactly equal for all validators in a given era.</p> <p>Nominator</p> <p>The rewards for nominators are paid out pro-rata after the validator reward is deducted. That means your share of the total nominator rewards per validator will increase with the number of coins you staked on that specific validator. This system should motivate nominators to stake on lower-staked validators and thus should create a balanced-staked validator set.</p>"},{"location":"deep-dives/staking/#how-does-staking-work-in-smart-dex-chain-and-kusari","title":"How does Staking work in Smart DEX Chain and Kusari","text":""},{"location":"deep-dives/staking/#identify-which-role-you-are","title":"Identify which role you are","text":"<p>In staking, you can be either a nominator or a validator.</p> <p>As a nominator, you can nominate validator candidates that you trust to help you earn rewards in the chain's native coin. You can look at the nominator guide to understand your responsibilities as a nominator and at the validator guide to understand what you need to do as a validator.</p>"},{"location":"deep-dives/staking/#nomination-period","title":"Nomination Period","text":"<p>Anyone who wants to become a validator can decide to become a validator candidate at any time. The candidacy is made public to all nominators, who can vote (nominate) for their favorite validator candidates.</p> <p>At the beginning of a new era, the network selects the highest nominated validator candidates, becoming the active set for the forthcoming era.</p> <p>Caution as a Nominator</p> <p>Note that there are no prerequisites to candidate as a validator. Therefore, we strongly advise you to take a close look at the performance and reputation of the validators you want to stake on. Nomination is not a set-and-forget approach</p>"},{"location":"deep-dives/staking/#staking-rewards-distribution","title":"Staking Rewards Distribution","text":"<p>To explain how rewards are paid to validators and nominators, we need to consider validator and nominator pools. A validator pool consists of the stake of an elected validator together with the nominators backing it. The nominator pool consists of the sum of nominated coins for that validator.</p> <p>As you can see in the illustration below, every validator pool receives essentially the same amount of coins for equal work. The network distributes the coins at the end of each era. However, there is a probabilistic component to staking rewards in era points and tips, but these should average over time.</p> <p>Every validator can set a customized commission, and the rest is paid pro-rata (proportional to stake) to the nominators. </p> <p>Validator</p> <p>If a validator stakes on his validator node, his stake counts as self-nomination and is getting pro-rata rewards from the nominator pool.</p> <p>Notice in particular that the validator is rewarded twice: once in commission fees for validating (if their commission rate is above 0%) and once for nominating itself with their stake. If a validator's commission is set to 100%, no coins will be paid out to any nominations in the nominator pool.</p> <p></p>"},{"location":"deep-dives/staking/#rewards-mechanism","title":"Rewards Mechanism","text":"<p>By now, two concepts should be clear:</p> <ul> <li>Every validator pool is rewarded equally regardless of the total stake captured by that validator pool</li> <li>Smaller validator pools tend to reward nominators more per coin then pools with more stake. </li> </ul> <p>Notice that the reward mechanism gives nominators economic incentives to favor smaller validator pools. The reason behind that is to prevent a concentration of power among a small set of validators. </p> <p>Furthermore, it is in alignment with the principle of risk and reward. The smaller the validator pool, the higher the risk that the validator may have a bad reputation or inferior performance and the higher the reward per staked coin.</p> <p>Notice that there is no limitation of nominators that can stake on a validator, but there is a limitation of nominators a validator can pay rewards to. This condition is called oversubscribed. That said, once a payout on an oversubscribed validator takes place, only the top number of nominators are considered. So pay attention to signs of oversubscription.</p> <p>Warning for Validators and Nominators</p> <p>We also remark that when the network slashes a validator slot for misbehavior (e.g. validator offline, Equivocation, etc.) the slashed amount is a fixed percentage (and NOT a fixed amount), which means that validator pools with more stake get slashed more coins. Again, this is done to give nominators an economic incentive to shift their preferences and support less popular validators they consider trustworthy.</p> <p>Another point to note is that each validator candidate is free to set their desired commission fee (as a percentage of rewards) to cover operational costs. Since the network pays all validator pools the same, validator pools with lower commission fees pay more to nominators than pools with higher fees. Thus, each validator can choose between increasing their fees to earn more or decreasing their fees to attract more nominators and increase their chances of being elected. In the long term, we expect that all validators will need to be cost-efficient to remain competitive. Validators with a higher reputation will charge slightly higher commission fees (which is fair).</p>"},{"location":"deep-dives/staking/#accounts","title":"Accounts","text":"<p>To add an extra layer of protection, we advise creating two types of accounts:</p> <ul> <li>Controller Account</li> <li>Stash Account</li> </ul> <p>The Stash account is your cold wallet which holds your funds and delegates some functions to the controller account. A cold wallet can be completely offline and is usually used to store crypto. With this system of two wallets, we want to minimize the touchpoints with your stash account to minimize potential risks. </p> <p>The Controller account is your hot wallet and acts on behalf of your stash account. The controller is entitled to signal decisions about nominating and validating. For instance, it sets preferences for payout account and commission if you are a validator; the controller also sets your session key if you have enough funds to pay for the transaction fees of cause.  </p>"},{"location":"deep-dives/staking/#validator-and-nominators","title":"Validator and Nominators","text":"<p>As we learned, validator slots are limited, and they do most of the heavy lifting: they produce new block candidates in BABE (block production mechanism), vote, and reach a consensus in GRANDPA (block finality mechanism). In essence, validators validate the state transition function of the blockchain.</p> <p>Nominators, on the other hand, have far fewer responsibilities. These include monitoring their validators' performance (uptime), keeping an eye on changing commission rates (a validator can change commission at any time), and general health monitoring of their own and their validators' account. </p> <p></p> <p></p> <p>Expertise needed</p> <p>While not set-it-and-forget-it, the experience needed to become a nominator is less than the expertise required to be a reliable validator.</p>"},{"location":"deep-dives/staking/#slashing","title":"Slashing","text":"<p>Slashing is a critical concept to protect the network.</p> <p>The network has two fundamental requirements that it expects from every validator:</p> <ul> <li>Be online</li> <li>Stay honest</li> </ul> <p>Slashing will happen if the system detects that a validator misbehaves (e.g., goes offline, attacks the network, or runs modified software) in the network. The validator and its nominators will get slashed in relation to the offense by losing a percentage of their bonded/staked coins.</p> <p>The network will add any slashed coin to the Treasury. The rationale for this (rather than burning or distributing them as rewards) is that the Council may revert slashes by simply paying out from the Treasury.</p> <p>The option to revert slashes would be helpful in situations such as a faulty runtime causing slashing or forcing validators offline through no fault of their own. </p> <p>In the case of legitimate slashing, it moves tokens away from malicious validators to those building the ecosystem through the normal Treasury process.</p> <p>Slashing</p> <p>It is essential to realize that slashing occurs for active validations. Each validator is considered its entity for purposes of slashing, just as they are for staking rewards.</p>"},{"location":"deep-dives/staking/#what-are-some-root-causes-for-getting-slashed","title":"What are some root causes for getting slashed?","text":"<p>We group the root causes into three distinct clusters:</p> <ol> <li>Liveliness</li> <li>Equivocation</li> <li>Misconduct</li> </ol> <p>Liveliness</p> <p>Liveliness is concerned about the ability of the validator to be online and responsive.  If a validator misses producing a block or sending a heartbeat signal during an era, the validator will be considered offline and put on chill. In that case, no slashing of coins occurs, but since the validator did not contribute any work, no block rewards are paid to the validator pool. </p> <p>Equivocation</p> <p>Multiple signing in the consensus mechanism protocols. To elaborate a bit further: The network expects that only one validator validates a block by pointing to the block and signing it. If multiple validators claim to have signed the most recent block we have a case of Equivocation, where other validators essentially duplicates the effort of an honest validator.</p> <p>In the case of Equivocation the penality is calculated in a manner that takes into account the likelihood of being an coordinated attack or not. </p> <p>The penalties are calculated by the following formula</p> <pre><code>let x = offenders, n = total number of validators in the active set\n\npenality = MIN((3*x/n)^2 , 1)\n</code></pre> Example 01Example 02Example 03 <pre><code>Assume that there are 100 validators in the active set, and one of them equivocates in a slot. \nThis is unlikely to be an attack on the network, but much more likely to be a misconfiguration of a validator\n\nx = 1, n = 100\n\npenality = MIN((3*1/100)^2 , 1) = MIN(0,0009, 1) = 0,0009 =  0,09%\n\nThe slash will apply to this validator, and the validator will be chilled.\n</code></pre> <pre><code>Now assume that there is a group of 5 validators, and all of them have an issue in the same slot.\n\nx = 5, n = 100\n\npenality = MIN((3*5/100)^2 , 1) = MIN(0,0225, 1) = 0,0225 =  2,25%\n\nThe slash will be applied to the 5 validators pools and their nominators. All slashed validators will also be chilled.\n</code></pre> <pre><code>Now assume that there is a group of 20 validators, and all of them have an issue in the same slot.\n\nx = 20, n = 100\n\npenality = MIN((3*20/100)^2 , 1) = MIN(0,36, 1) = 0,36 =  36,0%\n\nThe slash will be applied to the 20 validator pools and their nominators. All slashed validators will also be chilled.\n</code></pre> <p>Misconduct</p> <p>Misconducts are behaviors that pose a security or monetary risk to the network or can cause mass collisions. Therefore, misconducts are the highest punished behavior in the Kusari and Smart DEX Chain networks.  Reported and confirmed slashes in that category can lead to the transfer of the funds inside the validator pool to the Treasury and could ultimately be burned.  </p> <p>Warning</p> <p>If a validator is reported for any one of the offenses, they will be removed from the validator set (chilled), and they will not be paid while they are out. They will be considered inactive immediately and will lose their nominators. They need to re-issue intent to validate and again gather support from nominators.</p>"},{"location":"deep-dives/staking/#slashing-consequences","title":"Slashing Consequences","text":"Isolated Event &gt;10% of validators offending &gt;33% of validators offending Liveliness Chill, no slash Chill, plus penalties that increase linearly with the number of corresponding validators that are offline Slash increases, requires 44% to attain a maximum slash of 7% Equivocation Chill, plus slash of 0,01% (assuming 300 active validators) Slash, increases in a linear manner Maximum slash of 100% Misconduct 100% Slash 100% Slash 100% Slash <p>Warning</p> <p>All slashes include the loss of all nominators!</p>"},{"location":"deep-dives/staking/#chilling","title":"Chilling","text":"<p>Chilling is the act of stepping back from any nominating or validating. It can be done by a validator or nominator at any time themselves, taking effect in the next era. It can also specifically mean removing a validator from the active validator set by another validator, disqualifying them from the set of electable candidates in the next NPoS cycle.</p> <p>Chilling may be voluntary and validator-initiated, e.g. if there is a planned outage in the validator's surroundings or hosting provider, and the validator wants to exit to protect themselves against slashing. When voluntary, chilling will keep the validator active in the current session but will move them to the inactive set in the next. The validator will not lose their nominators.</p> <p>When used as part of a punishment (initiated externally), being chilled carries an implied penalty of being un-nominated. It also disables the validator for the remainder of the current era and removes the offending validator from the next election.</p>"},{"location":"deep-dives/staking/#potential-causes-for-liveliness-slashes","title":"Potential causes for liveliness slashes","text":"<p>Let's look at events that can cause a slash under Liveliness. To break this down, we differentiate between two scenarios:</p> <ul> <li>You have an existing server</li> <li>You install a new server or migrate to a new server</li> </ul> <p>Existing Server</p> <p>Potential causes are:  - Server is offline  - Firewall or network connectivity prevents communication to the network  - SDD is full and prevents further syncing</p> <p>New Server / Migration</p> <p>Potential causes are: - The validator instance may not be started with the <code>-- validator</code> flag - If you switch servers you may not have applied the correct session key - Your node might not be fully synchronized</p>"},{"location":"deep-dives/staking/#how-to-mitigate-the-risk-of-being-slashed-on-liveliness","title":"How to mitigate the risk of being slashed on Liveliness?","text":"<p>Let's have a look into what operators can do to reduce the risk of getting slashed under Liveliness.</p> <ul> <li>Monitoring<ul> <li>Using monitoring tools like grafana and prometheus, together with PagerDuty for alerts</li> <li>Trigger alerts when the service is unreachable or when blocks are stalled (e.g, 100 blocks)</li> </ul> </li> <li>Checklists<ul> <li>Ensure that session-keys are verified on the destination server</li> <li>Ensure that the <code>--validator</code> flag exists</li> <li>Understand server migration wait times. It takes at least 2 eras before new keys are applied</li> </ul> </li> </ul>"},{"location":"deep-dives/staking/#potential-causes-for-equivocation-slashes","title":"Potential causes for equivocation slashes","text":"<p>Equivocation slashes are caused if multiple validators claim to have signed the same block. This can be caused by:</p> <ul> <li>If you cloned a validator to be used as a backup or during the migration of your validator to a new server.</li> <li>Using a failover system to provide \"zero-downtime\"</li> <li>Copying the keystore folder when trying to copy the database </li> </ul>"},{"location":"deep-dives/staking/#how-to-mitigate-the-risk-of-being-slashed-on-equivocation","title":"How to mitigate the risk of being slashed on Equivocation?","text":"<ul> <li>Never copy your Keystore folder to another server</li> <li>If your server went offline spontaneously, do not panic and attempt to restore a cloned server to minimize downtime</li> <li>Use a backup server, if it is not fully synced use a snapshot to do so quickly using 7zz for extraction.</li> <li>Apply a freshly generated set of keys from this server to the stash</li> <li>It is better to be chilled with no loss than attempt a zero downtime maneuver and get slashed  </li> </ul>"},{"location":"deep-dives/staking/#potential-causes-for-unintentional-misconduct","title":"Potential causes for unintentional misconduct","text":"<p>In this paragraph, we assume that Misconduct is conducted unintentionally and want to provide some reasons for a slash under unintentional Misconduct.</p> <ul> <li>Using a binary from a third-party location that might be altered </li> <li>Compromised server in which an unwanted third party alters code in an undesired manner</li> </ul>"},{"location":"deep-dives/staking/#how-to-mitigate-the-risk-of-being-slashed-on-unintentional-misconduct","title":"How to mitigate the risk of being slashed on unintentional Misconduct?","text":"<ul> <li>Always download the source files and binaries from the official SwapDEX server</li> <li>Verify the hash of the downloaded binaries</li> <li>Use the \"secure validator\" server setup on the w3f rep or adhere to its principles</li> <li>Basic security advice applies, use a firewall, manage user access, use SSH certificate access etc.</li> <li>Avoid using your server as a general-purpose machine. Greater interaction = greater risk.</li> </ul> <p>Warning</p> <p>Work in progress content can change and it's not definitive .</p>"},{"location":"deep-dives/substrate_keys/","title":"Substrate Keys","text":"<p>Public and private keys are an essential aspect of most crypto-systems and an essential component that enables blockchains to exist.</p>"},{"location":"deep-dives/substrate_keys/#account-keys","title":"Account Keys","text":"<p>Account keys are keys that are meant to control funds. They can be either:</p> <ul> <li>The vanilla <code>ed25519</code> implementation using Schnorr signatures.</li> <li>The Schnorrkel/Ristretto <code>sr25519</code> variant using Schnorr signatures.</li> <li>ECDSA signatures on <code>secp256k1</code></li> </ul> <p>There are no differences in security between <code>ed25519</code> and <code>sr25519</code> for simple signatures.</p> <p>We expect <code>ed25519</code> to be much better supported by commercial HSMs for the foreseeable future.</p> <p>At the same time, <code>r25519</code> makes implementing more complex protocols safer. In particular, <code>sr25519</code> comes with safer version of many protocols like HDKD common in the Bitcoin and Ethereum ecosystem.</p>"},{"location":"deep-dives/substrate_keys/#controller-and-stash-keys","title":"\"Controller\" and \"Stash\" Keys","text":"<p>When we talk about \"controller\" and \"stash\" keys, we usually talk about them in the context of running a validator or nominating KSI. Still, they are valuable concepts for all users to know. Both keys are types of account keys. They are distinguished by their intended use, not by an underlying cryptographic difference. When creating new controller or stash keys, all cryptography supported by account keys is an available option.</p> <p>The controller key is a semi-online key that will be in the user's direct control and used to submit manual extrinsics. This means that validators and nominators will use the controller key to start or stop validating or nominating. </p> <p>Warning</p> <p>Controller keys should hold some KSI to pay for fees, but You should not use them to hodl massive amounts or life savings since the blockchain will expose them to the internet with relative frequency. You should treat them carefully and occasionally replaced them with new ones.</p> <p>The stash key is a key that will, in most cases, be a cold wallet, existing on a piece of paper in a safe or protected by layers of hardware security. It should rarely if ever, be exposed to the internet or used to submit extrinsics. The stash key is intended to hold a large amount of funds. You can compare it to a savings account at a bank, which ideally is only ever touched in urgent conditions. Or, perhaps a more apt metaphor is to think of it as buried treasure, hidden on some random island and only known by the pirate who initially hid it.</p> <p>Since the stash key is kept offline, it must be set to bond its funds to a particular controller. For non-spending actions, the controller has the funds of the stash behind it. For example, in nominating, staking, or voting, the controller, can indicate its preference with the weight of the stash. It will never be able to move or claim the funds in the stash key. However, if someone does obtain your controller key, they could use it for slashable behavior, so you should still protect it and change it regularly.</p>"},{"location":"deep-dives/substrate_keys/#session-keys","title":"Session Keys","text":"<p>Session keys are active or \"hot\" keys that a validator must keep online to perform network operations. Session keys are typically generated by the client, e.g., your SwapDEX Node instance on your server, although they don't have to be. The session keys are not meant to control funds, and you should only use them for their intended purpose. You can change them regularly; your controller account only needs to create a certificate by signing a session public key and broadcast this certificate via an extrinsic.</p> <p>Our blockchain uses three session keys: - GRANDPA: ed25519 - BABE: sr25519 - I'm Online: sr25519</p>"},{"location":"deep-dives/substrate_keys/#summary","title":"Summary","text":"<p>Account keys are essential to blockchains because they allow you to control your funds. The blockchain publishes your public keys to the network, as the name implies. Your wallet address is an excellent example of a public key. Your private key, in contrast, should be protected and kept secret at all times because, with the private key, anybody could move your funds.</p> <p>Our blockchain uses controller keys (a second wallet) to speak for your main wallet's stash keys (public and private keys) that control your funds. However, the controller keys are limited to just acting on behalf but are never capable of making a transaction. This Setup of a \"hot\" wallet (controller) that you use to engage with the network and the \"cold\" wallet (stash) that holds the funds grants you an extra layer of security.</p> <p>Finally, Session keys are generated by the validator node itself and used by the validator to perform network actions continuously. You can change session keys at any time.</p>"},{"location":"dev-guides/","title":"Smart Contracts","text":"<p>On SwapDEX you have two out-of-the-box solutions to kickstart your Smart Contract development.</p> <ul> <li>The EVM (Ethereum Virtual Machine) pallet, which presents an Ethereum compatibility layer</li> <li>The Contracts pallet, which is a FRAME library for Wasm based smart contracts</li> </ul>"},{"location":"dev-guides/#evm-contracts-by-frontier","title":"EVM Contracts by Frontier","text":"<p>Frontier is the Ethereum compatibility layer for Substrate chains. It enables SwapDEX to run Ethereum contacts (EVM) natively, that means for instance that all existing Ethereum RPC methods work, so none of your dapps will break. Furthermore, it allows you to run your EVM smart contract natively in Substrate, tightly integrated with the rest of the Substrate ecosystem.</p> <p>Read more in our EVM Pallet Deep Dive!</p>"},{"location":"dev-guides/#contracts-pallet","title":"Contracts Pallet","text":"<p>The experience of deploying to an EVM-based chain may be more familiar to developers that have written smart contracts before. However, the Contracts pallet makes some notable improvements to the design of the EVM:</p> <ul> <li> <p>Wasm. The Contracts pallet uses WebAssembly as its compilation target. Any language that compiles to Wasm can potentially be used to write smart contracts. Nevertheless, it is better to have a dedicated domain-specific language, and for that reason Parity offers the ink! language.</p> </li> <li> <p>Rent. Contracts must pay rent or else hold a deposit suitably large enough in order to justify its existence on-chain. When a contract does not uphold this, it may create what's called a tombstone which is a reference to the contract. In some conditions, the contract will be deleted outright along with its storage if it does not maintain these requirements.</p> </li> <li> <p>Caching. Contracts are cached by default and therefore means they only need to be deployed once and afterward be instantiated as many times as you want. This helps to keep the storage load on the chain down to the minimum. On top of this, when a contract is no longer being used and the existential deposit is drained, the code will be erased from storage (known as reaping).</p> </li> </ul>"},{"location":"dev-guides/#ink","title":"Ink!","text":"<p>ink! is a domain specific language for writing smart contracts in Rust and compiles to Wasm code. As it states in its README, it is still in an experimental phase so brave developers should be aware that they might have a bumpy - but workable - development experience. There are some projects that have built projects in ink! with a decent level of complexity such as Plasm's Plasma contracts, so it is mature enough to start building interesting things.</p> <p>For interested developers, they can get started writing smart contracts using ink! by studying the examples that were already written. These can be used as guideposts to writing more complex logic that will be deployable on smart contract parachains.</p> <p>ink! has laid much of the groundwork for a new smart contract stack that is based on a Wasm virtual machine and compatible with Substrate chains.</p> <p>Parity Tech</p> <ul> <li>ink!</li> <li>Contracts pallet</li> </ul> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/bug-bounty/","title":"Bug bounty","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"dev-guides/chain-docs/","title":"Chain documentation","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"dev-guides/nft-docs/","title":"NFT documentation","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"dev-guides/sdx-academy/","title":"SDX Academy","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"dev-guides/Tutorials/","title":"Tutorials","text":"<p>The previous section has given you a mental model and shown the requisite resources to help you determine and start building your project as smart contract today. It's time to head over to the tutorial section which will teach you how to build EVM based smart contracts. </p> <p>The EVM Tutorial, will cover:</p> <ul> <li>Setting up an SwapDEX node</li> <li>Setting up Metamask to work with SwapDEX</li> <li>Using Remix as an Ethereum IDE to compile, deploy, and call a contract</li> <li>Using Truffle to deploy a contract to Kusari</li> <li>Using Web3.js to interact with SwapDEX contracts programmatically</li> </ul> <p>We would love for you to give feedback in these early stages, so please feel free to join our Discord Server and engage with the community!</p>"},{"location":"dev-guides/Tutorials/#how-to-participate-in-the-swapdex-smart-contracts-developers-squad","title":"How to participate in the SwapDEX Smart Contracts Developers Squad?","text":"<p>Technical Chats</p> <ul> <li>Discord DApps Channel</li> </ul> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/","title":"SwapDEX and EVM","text":"<p>SwapDEX has a pallet that allows developers to write EVM smart-contracts. This means that you can use SwapDEX as you would with Ethereum. SwapDEX is fully compatible with Ethereum's Web3 API and EVM. Here, we'll walk through a few subtle differences between SwapDEX and Ethereum. Namely, SwapDEX has a Nominated Proof of Stake (NPOS) consensus mechanism. This shouldn't affect you if you're building a DeFi or NFT based application. See our related documentation on proof-of-stake. In the following sections we detail SwapDEX&lt;&gt;EVM Compatibility.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/#full-ethereum-api-and-tooling-compatibility","title":"Full-Ethereum API and Tooling Compatibility","text":"<p>If you're moving some portion of your smart contracts, state, or considering porting your full set of contracts off Ethereum to SwapDEX, it should 'just work'. That is the full set of your application, contracts, and tooling will remain the same. SwapDEX will be able to support:</p> <ul> <li>Solidity and Serpent Based Smart Contracts</li> <li>Ecosystem Tools (e.g., block explorers, front-end development libraries, wallets--i.e Metamask)</li> <li>Development Tools (e.g., Truffle, Remix, MetaMask, ethers, web3js)</li> <li>Ethereum Tokens via Bridges (e.g., token movement, state visibility, message passing)</li> </ul> <p>You can view our tutorials to get a better feel for building Ethereum smart contracts on SwapDEX, and how to directly offload or migrate your Ethereum application onto SwapDEX.</p> <p>As previously mentioned, SwapDEX is Nominated Proof of Stake (NPOS). This does mean that smart contracts that rely on components of Ethereum's API that touch on Proof of Work--difficulty, uncles, hash-rate won't work as expected on SwapDEX. For those values, we have constant values set at the runtime level. Existing Ethereum contracts that rely on Proof of Work internals (e.g., mining pool contracts) will almost certainly not work as expected on SwapDEX.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/#how-swapdex-achieves-ethereum-compatibility","title":"How SwapDEX achieves Ethereum Compatibility","text":"<p>We achieve Ethereum compatibility with three integrated components. If you're a smart contract developer, this may just be of passing interest.</p> <ul> <li>Pallet Ethereum: which allows for full Ethereum Block Processing</li> <li>SputnikEVM: You can view the full documentation here: </li> <li>EVM: which allows you to deploy</li> </ul>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/","title":"Connect to the SwapDEX Network via MetaMask","text":"<p>In this section we will show you step by step how to connect to the SwapDEX network via the Meta Mask browser extension.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/#install-metamask","title":"Install MetaMask","text":"<p>To install MetaMask please visit your preferred browser plug-in store. We recommend to either use a Chrome, Brave or Firefox browser.</p> <ul> <li>MetaMask Download click here</li> </ul> <p>Please create a new wallet and make sure to secure your private key and your seed phrase!</p> <p>Warning</p> <p>The private key gives direct access to your funds, so make sure to store these in a secure place.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/#connect-to-the-swapdex-network","title":"Connect to the SwapDEX Network","text":"<p>Now let's connect MetaMask to the EVM side of the SwapDEX Network.</p> <ol> <li>Add a new network</li> <li>Enter the network data</li> <li>Select the SwapDEX Network</li> </ol>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/#1-add-a-new-network","title":"1) Add a new Network","text":""},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/#2-add-network-data","title":"2) Add Network Data","text":"<ul> <li>Network Name: <code>SwapDEX Chain</code></li> <li>New RPC URL: <code>https://rpc.swapdex.network</code></li> <li>Chain ID: <code>70</code></li> <li>Currency Symbol: <code>SDX</code></li> <li>Explorer: <code>https://evm.swapdex.network/</code></li> </ul>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-mm/#3-select-the-swapdex-network","title":"3) Select the SwapDEX Network","text":"<p>Success</p> <p>Congrats, you connected your MetaMask account to the SwapDEX Network!</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/","title":"Deploy with Truffle","text":"<p>In this section we will show you how to utilize the Truffle Suite to develop Smart Contracts for SwapDEX. Tuffle, in short, is a solidity suite that helps you to test your code. </p> <p>Let's start with installing the technical requirements.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#installing-technical-requirements","title":"Installing Technical Requirements","text":"<p>To use Truffle we need to install NodeJS v8.9.4 or later and we need a running eth-client.</p> <p>Note</p> <p>Since SwapDEX is fully Ethereum compatible you can use Ganache as the preferred eth-client</p> <p>Please go ahead and install NodeJS and Ganache.</p> <ul> <li>NodeJS</li> <li>Ganache</li> </ul> <p>After you installed NodeJS and Ganache, you can execute the following command in your Terminal to install Truffle</p> <pre><code>npm install -g truffle\n</code></pre>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#creating-a-project","title":"Creating a Project","text":"<p>In this guide we will utilize the MetaCoin Truffle Box, which is a Truffle project template.  The MetaCoin Box allows us to create an ERC-20 token on SwapDEX that can be transferred between accounts. </p> <ol> <li>Create a new folder for your Truffle project and navigate into it:</li> </ol> <pre><code>mkdir MetaCoin\ncd MetaCoin\n</code></pre> <ol> <li>Download und unbox the MetaCoin Box</li> </ol> <pre><code>truffle unbox metacoin\n</code></pre> <p>Hint</p> <p>You can use the <code>truffe unbox &lt;box-name&gt;</code> command to download and unbox any truffle box</p> <p>Hint</p> <p>If you want to start from scratch please use <code>truffle init</code></p> <p>Once you unboxed MetaCoin, you will be greeted with a project structure like this:</p> <ul> <li><code>contracts/</code>: Directory for Solidity Contracts</li> <li><code>migrations/</code>: Directory for scriptable deployment files</li> <li><code>test/</code>: Directory for test files for testing your application and contracts</li> <li><code>truffle.js</code>: Truffle configuration file </li> </ul> <p></p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#exploring-the-project","title":"Exploring the Project","text":"<ol> <li>Open the <code>contracts/MetaCoin.sol</code> file in a text editor. This is a smart contract (written in Solidity) that creates a MetaCoin token. Note that this also references another Solidity file <code>contracts/ConvertLib.sol</code> in the same directory.</li> <li>Open the <code>contracts/Migrations.sol</code> file. This is a separate Solidity file that manages and updates the status of your deployed smart contract. This file comes with every Truffle project, and is usually not edited.</li> <li>Open the <code>migrations/1_initial_migration.js</code> file. This file is the migration (deployment) script for the Migrations contract found in the <code>Migrations.sol</code> file.</li> <li>Open the <code>migrations/2_deploy_contracts.js</code> file. This file is the migration script for the MetaCoin contract. (Migration scripts are run in order, so the file beginning with 2 will be run after the file beginning with 1.)</li> <li>Open the <code>test/TestMetaCoin.sol</code> file. This is a test file written in Solidity which ensures that your contract is working as expected.</li> <li>Open the <code>test/metacoin.js</code> file. This is a test file written in JavaScript which performs a similar function to the Solidity test above.</li> <li>Open the <code>truffle-config.js</code> file. This is the Truffle configuration file, for setting network information and other project-related settings. The file is blank, but this is okay, as we'll be using a Truffle command that has some defaults built-in.</li> </ol> <p>Hint</p> <p>We will adjust the <code>truffle-config.js</code> later to deploy the Token to Ganache and later to SwapDEX</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#testing","title":"Testing","text":"<p>Testing your smart contracts is an important step in the development pipeline. To run a test of the MetaCoin contract open up a terminal and run the solidity test:</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#run-the-solidity-test","title":"Run the Solidity Test","text":"<pre><code>truffle test ./test/TestMetaCoin.sol\n</code></pre> <p>you will see the following output:</p> <pre><code>  TestMetaCoin\n    \u221a testInitialBalanceUsingDeployedContract (607ms)\n    \u221a testInitialBalanceWithNewMetaCoin (457ms)\n\n\n  2 passing (16s)\n</code></pre>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#run-the-javascript-test","title":"*Run the Javascript Test","text":"<pre><code>truffle test ./test/metacoin.js\n</code></pre> <p>You will see the following output:</p> <pre><code>  Contract: MetaCoin\n    \u221a should put 10000 MetaCoin in the first account (126ms)\n    \u221a should call a function that depends on a linked library (258ms)\n    \u221a should send coin correctly (976ms)\n\n\n  3 passing (1s)\n</code></pre> <p>Success</p> <p>The solidity and javascript test were successfull!</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#compiling-the-smart-contract","title":"Compiling the Smart Contract","text":"<p>After the successfull test we are ready to compile the smart contracts within the <code>contracts/</code> folder. </p> <pre><code>truffle compile\n</code></pre> <p>You will see the following output:</p> <pre><code>Compiling your contracts...\n===========================\n&gt; Compiling .\\contracts\\ConvertLib.sol\n&gt; Compiling .\\contracts\\MetaCoin.sol\n&gt; Compiling .\\contracts\\Migrations.sol\n&gt; Artifacts written to .\\build\\contracts\n&gt; Compiled successfully using:\n</code></pre>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#migrating-with-ganache","title":"Migrating with Ganache","text":"<p>To migrate or upload your smart contract to the Ganache Blockchain you need to tell truffle where it to deploy the contract.  We do this by adjusting the <code>truffle-config.js</code> file as follows:</p> <ul> <li>Open <code>truffle-config.js</code> in a text editor and replace the content with the following:</li> </ul> <p><pre><code>module.exports = {\nnetworks: {\ndevelopment: {\nhost: \"127.0.0.1\",\nport: 7545,\nnetwork_id: \"*\"\n}\n}\n};\n</code></pre> Save and close the file </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#launch-ganache","title":"Launch Ganache","text":""},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#mirgrate-to-ganache","title":"Mirgrate to Ganache","text":"<p>Now that we told truffle where to migrate the contracts we can migrate.</p> <pre><code>truffle migrate\n</code></pre> <p>You will see the following output:</p> <pre><code>Compiling your contracts...\n===========================\n&gt; Compiling .\\contracts\\ConvertLib.sol\n&gt; Compiling .\\contracts\\MetaCoin.sol\n&gt; Compiling .\\contracts\\Migrations.sol\n&gt; Artifacts written to C:\\Users\\petar\\Documents\\SwapDex\\EVM-Tutorial\\build\\contracts\n&gt; Compiled successfully using:\n   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang\n\nPS C:\\Users\\petar\\Documents\\SwapDex\\EVM-Tutorial&gt; truffle migrate\n\nCompiling your contracts...\n===========================\n&gt; Compiling .\\contracts\\ConvertLib.sol\n&gt; Compiling .\\contracts\\MetaCoin.sol\n&gt; Compiling .\\contracts\\Migrations.sol\n&gt; Artifacts written to C:\\Users\\petar\\Documents\\SwapDex\\EVM-Tutorial\\build\\contracts\n&gt; Compiled successfully using:\n   - solc: 0.5.16+commit.9c3226ce.Emscripten.clang\n\n\n\nStarting migrations...\n======================\n&gt; Network name:    'development'\n&gt; Network id:      5777\n&gt; Block gas limit: 6721975 (0x6691b7)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   &gt; transaction hash:    0x7f94b5d6852bae542f3c2d89e335a309243e54da0bbe96a3c1b863b40a4f547b\n   &gt; Blocks: 0            Seconds: 0\n   &gt; contract address:    0x475D507822741736A110e25698612C9Eb4ECc635\n   &gt; block number:        1\n   &gt; block timestamp:     1634129141\n   &gt; account:             0x456ad8e2CBF08FCde3C75D169ddF9C20e00F51F4\n   &gt; balance:             99.9967165\n   &gt; gas used:            164175 (0x2814f)\n   &gt; gas price:           20 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.0032835 ETH\n\n\n   &gt; Saving migration to chain.\n   &gt; Saving artifacts\n   -------------------------------------\n   &gt; Total cost:           0.0032835 ETH\n\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'ConvertLib'\n   ----------------------\n   &gt; transaction hash:    0x0644f4e5186e058e18565b13db350ff8f0158c1f5a8f551741b55d11c76fea7d\n   &gt; Blocks: 0            Seconds: 0\n   &gt; contract address:    0x0Da4E500c4419860688284687efdF743337FE8ab\n   &gt; block number:        3\n   &gt; block timestamp:     1634129143\n   &gt; account:             0x456ad8e2CBF08FCde3C75D169ddF9C20e00F51F4\n   &gt; balance:             99.99396028\n   &gt; gas used:            95470 (0x174ee)\n   &gt; gas price:           20 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.0019094 ETH\n\n\n   Linking\n   -------\n   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib (at address: 0x0Da4E500c4419860688284687efdF743337FE8ab)\n\n   Deploying 'MetaCoin'\n   --------------------\n   &gt; transaction hash:    0xed1abbaf5d5cf4260c69cbec427b9a1b924302cf08b9e7d8e20920b5410bb927\n   &gt; Blocks: 0            Seconds: 0\n   &gt; contract address:    0x2E2EB10E302b2551C2788baBAe0d5981c18b4DDf\n   &gt; block number:        4\n   &gt; block timestamp:     1634129144\n   &gt; account:             0x456ad8e2CBF08FCde3C75D169ddF9C20e00F51F4\n   &gt; balance:             99.98822922\n   &gt; gas used:            286553 (0x45f59)\n   &gt; gas price:           20 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.00573106 ETH\n\n\n   &gt; Saving migration to chain.\n   &gt; Saving artifacts\n   -------------------------------------\n   &gt; Total cost:          0.00764046 ETH\n\n\nSummary\n=======\n&gt; Total deployments:   3\n&gt; Final cost:          0.01092396 ETH\n</code></pre> <p>This shows the transaction IDs and addresses of your deployed contracts. It also includes a cost summary and real-time status updates.</p> <p>Hint</p> <p>Hint: Your transaction IDs and contract addresses may be different from the above.</p> <p>In Ganache, click the \"Transactions\" button to see that the transactions have been processed.</p> <p></p> <p>Success</p> <p>You deployed a smart contract to the Ganache Blockchain!</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#migrate-to-swapdex","title":"Migrate to SwapDEX","text":"<p>To deploy the smart contracts to SwapDEX, we need to make some adjustments. First of all we need to install the truffle HDWallet package as follows:</p> <p><code>npm install @truffle/hdwallet-provider</code></p> <p>HD Wallet is basically an instance of your wallet e.g., MetaMask that has access to the SwapDEX network.  Since a contract deployment involves transactions, you need to have your private key or your seed phrase ready.</p> <p>Open the <code>truffle-config.js</code> file and replace its content with the following code:</p> <p><pre><code>const HDWalletProvider = require(\"@truffle/hdwallet-provider\");\nconst privKey = 'YOUR PRIVATE KEY GOES HERE';\n\nmodule.exports = {  compilers: {    solc: {      version: \"^0.6.0\",\n}\n},  networks: {\nswapdex: {\nprovider: () =&gt; new HDWalletProvider({\nprivateKeys: [ privKey ],\nproviderOrUrl: \"https://rpc.swapdex.network\",\n}),\nnetwork_id: 142,\n},  } }\n</code></pre> Save the file. You notice a few facts from here, our chainId is 142 and we are using solc version above ^0.6.0.</p> <p>Hint</p> <p>Make sure that the wallet which is attached to the private key you provided earlier is funded sufficiently to pay for the gas needed to deploy the smart contracts.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#migrate-your-contracts-to-swapdex","title":"Migrate your Contracts to SwapDEX","text":"<p>To deploy the smart contracts within your project you need to execute the following command:</p> <pre><code>truffle --network development migrate\n</code></pre> <p>You should see the following output:</p> <pre><code>Compiling your contracts...\n===========================\n\u221a Fetching solc version list from solc-bin. Attempt #1\n\u221a Downloading compiler. Attempt #1.\n&gt; Compiling .\\contracts\\ConvertLib.sol\n&gt; Compiling .\\contracts\\MetaCoin.sol\n&gt; Compiling .\\contracts\\Migrations.sol\n\u221a Fetching solc version list from solc-bin. Attempt #1\n&gt; Artifacts written to C:\\Users\\petar\\Documents\\SwapDex\\EVM-Tutorial\\build\\contracts\n&gt; Compiled successfully using:\n   - solc: 0.6.12+commit.27d51765.Emscripten.clang\n\n\n\nStarting migrations...\n======================\n&gt; Network name:    'swapdex'\n&gt; Network id:      70\n&gt; Block gas limit: 30000000 (0x1c9c380)\n\n\n1_initial_migration.js\n======================\n\n   Deploying 'Migrations'\n   ----------------------\n   &gt; transaction hash:    0x69c148fd82661cafb34a7c3df6d4efa714ed9a4553104def2c26a95cde4e1d6f\n   &gt; Blocks: 1            Seconds: 4\n   &gt; contract address:    0x37b35EAab7C6a52Fb6cd23CcBadc18CF075F6dF6\n   &gt; block number:        113067\n   &gt; block timestamp:     1634138652\n   &gt; account:             0xd3e849B097f7cFe0fdD381e778012759a972d250\n   &gt; balance:             99.99204025\n   &gt; gas used:            159195 (0x26ddb)\n   &gt; gas price:           50 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.00795975 ETH\n\n\n   &gt; Saving migration to chain.\n   &gt; Saving artifacts\n   -------------------------------------\n   &gt; Total cost:          0.00795975 ETH\n\n\n2_deploy_contracts.js\n=====================\n\n   Deploying 'ConvertLib'\n   ----------------------\n   &gt; transaction hash:    0xc5b4688c876ee566e2ae53b76dbbdbb820e3f71faf0360d0a9aabe32d2b9b8a5\n   &gt; Blocks: 0            Seconds: 4\n   &gt; contract address:    0xBd41c64fB0531ad8579984F521A23c9B27AC25C5\n   &gt; block number:        113069\n   &gt; block timestamp:     1634138664\n   &gt; account:             0xd3e849B097f7cFe0fdD381e778012759a972d250\n   &gt; balance:             99.98513905\n   &gt; gas used:            95686 (0x175c6)\n   &gt; gas price:           50 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.0047843 ETH\n\n\n   Linking\n   -------\n   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib (at address: 0xBd41c64fB0531ad8579984F521A23c9B27AC25C5)\n\n   Deploying 'MetaCoin'\n   --------------------\n   &gt; transaction hash:    0x9dacc10950ae2b6386f0c75a6d86fe88e337442a2adbb7cadceb5fd85a1e763f\n   &gt; Blocks: 1            Seconds: 4\n   &gt; contract address:    0x32C3681dB7b86852555475D9E91620Dfc51D3A73\n   &gt; block number:        113070\n   &gt; block timestamp:     1634138670\n   &gt; account:             0xd3e849B097f7cFe0fdD381e778012759a972d250\n   &gt; balance:             99.970821\n   &gt; gas used:            286361 (0x45e99)\n   &gt; gas price:           50 gwei\n   &gt; value sent:          0 ETH\n   &gt; total cost:          0.01431805 ETH\n\n\n   &gt; Saving migration to chain.\n   &gt; Saving artifacts\n   -------------------------------------\n   &gt; Total cost:          0.01910235 ETH\n\n\nSummary\n=======\n&gt; Total deployments:   3\n&gt; Final cost:          0.0270621 ETH\n</code></pre> <p>Success</p> <p>Congrats, you deployed your first smart contracts on the SwapDEX Network!</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#check-deployment-on-network-explorer","title":"Check Deployment on Network Explorer","text":"<p>To verfiy the successfull deployment head over to the EVM Testnet Explorer and search for your Contract Address.</p> <p></p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#interact-with-the-contract","title":"Interact with the Contract","text":"<p>Since we didn't connect the logic of the smart contracts with a front end we need to interact with our contracts via the console. You can do this in the following ways:</p> <ol> <li>Invoke the truffle console:</li> </ol> <pre><code>truffle console \n</code></pre> <p>You will see the following prompt:</p> <pre><code>truffle(development)&gt;\n</code></pre> <ol> <li>Begin by establishing both the deployed MetaCoin contract instance and your SwapDEX wallet</li> </ol> <p>Hint</p> <p>It is normal to get an <code>undefined</code> as response from the console after you executed one command</p> <pre><code>let instance = await MetaCoin.deployed()\nlet accounts = await web3.eth.getAccounts()\n</code></pre> <ol> <li>Check the metacoin balance of the account that deployed the contract:</li> </ol> <pre><code>let balance = await instance.getBalance(accounts[0])\nbalance.toNumber()\n</code></pre> <ol> <li>See how much ether that balance is worth (and note that the contract defines a metacoin to be worth 2 ether):</li> </ol> <pre><code>let ether = await instance.getBalanceInEth(accounts[0])\nether.toNumber()\n</code></pre> <ol> <li>Transfer some metacoin from one account to another:</li> </ol> <p><pre><code>instance.sendCoin(TARGET ADDRESS, 500)\n</code></pre> You should see the following result:</p> <pre><code>{\n  tx: '0x3a81b73b5f9b22ba739b2ba1072ac2b51efa2c5655c4d64f4147937bf5b627ae',\n  receipt: {\n    blockHash: '0x848addd30c96393e5d1f3dddfd633f0d2ffba0b97b15d2a566eba76d7863f63c',\n    blockNumber: 113352,\n    contractAddress: null,\n    cumulativeGasUsed: 47314,\n    from: '0xd3e849b097f7cfe0fdd381e778012759a972d250',\n    gasUsed: 47314,\n    logs: [ [Object] ],\n    logsBloom: '0xn    status: true,\n    to: '0x32c3681db7b86852555475d9e91620dfc51d3a73',\n    transactionHash: '0x3a81b73b5f9b22ba739b2ba1072ac2b51efa2c5655c4d64f4147937bf5b627ae',\n    transactionIndex: 0,\n    rawLogs: [ [Object] ]\n  },\n  logs: [\n    {\n      address: '0x32C3681dB7b86852555475D9E91620Dfc51D3A73',\n      blockHash: '0x848addd30c96393e5d1f3dddfd633f0d2ffba0b97b15d2a566eba76d7863f63c',\n      blockNumber: 113352,\n      logIndex: 0,\n      removed: false,\n      transactionHash: '0x3a81b73b5f9b22ba739b2ba1072ac2b51efa2c5655c4d64f4147937bf5b627ae',\n      transactionIndex: 0,\n      transactionLogIndex: '0x0',\n      id: 'log_cdcbe184',\n      event: 'Transfer',\n      args: [Result]\n    }\n  ]\n}\n</code></pre> <ol> <li>Check the balance of the account that received the metacoin:</li> </ol> <pre><code>let received = await instance.getBalance(TARGET ADDRESS)\nreceived.toNumber()\n</code></pre> <ol> <li>Check the balance of the account that sent the metacoin:</li> </ol> <pre><code>let newBalance = await instance.getBalance(accounts[0])\nnewBalance.toNumber()\n</code></pre> <p>Success</p> <p>Congrats, you succesfully depolyed 3 smart contracts to SwapDEX via Truffle and Meta Mask!</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/Tutorial/using-truffle/#continue-learning","title":"Continue Learning","text":"<ul> <li>Please check Truffle's fantastic docs, guides and tutorials  : Truffle </li> </ul> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/","title":"Ethereum Libraries","text":"<p>Warning</p> <p>Proceed with caution! This page is work in progress!</p> <p>For a web app to interact with the Ethereum blockchain (i.e., read blockchain data and send transactions to the network), it must connect to an Ethereum node.</p> <p>For this purpose, every Ethereum client implements the JSON-RPC specification so that applications can rely on a uniform set of endpoints.</p> <p>If you want to use JavaScript to connect with an Ethereum node, it's possible to use vanilla JavaScript. Still, several convenience libraries exist within the ecosystem that makes this much more accessible.  With these libraries, developers can write intuitive, one-line methods to initialize JSON RPC requests (under the hood) that interact with Ethereum.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#why-use-a-library","title":"Why use a library?","text":"<p>These libraries take away much of the complexity of interacting directly with an Ethereum node. They also provide utility functions (e.g., converting ETH to Gwei). As a developer, you can spend less time dealing with the intricacies of Ethereum clients and more time focused on the unique functionality of your application.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#web3js-library","title":"Web3.js Library","text":"<p>Web3.js is a collection of libraries that allows programmers to interact with these on-chain components by facilitating a connection to Ethereum nodes.\u200c</p> <p>In Ethereum, nodes provide low-level interfaces for users to submit transactions. A node can receive transactions through a JSON RPC interface. JSON RPC is a textual encoding format allowing running processes to receive data. Nodes participating in the Ethereum network may expose this interface in different ways, depending on its configuration and the underlying software implementation. Common options include HTTP connections, IPC or WebSockets.\u200c</p> <p>For the full user documentation, and API reference for web3.js, click here.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#ethersjs-library","title":"Ethers.js Library","text":"<p>The ethers.js library provides tools to interact with Ethereum Nodes with JavaScript, similar to web3.js. SwapDEX has an Ethereum-like API available that is fully compatible with Ethereum-style JSON RPC invocations. Therefore, developers can leverage this compatibility and use the ethers.js library to interact with a SwapDEX node as if they were doing so on Ethereum.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#setup-ethersjs-with-swapdex","title":"Setup Ethers.js with SwapDEX","text":"<p>To get started with the ethers.js library, install it using the following command:</p> <pre><code>npm install ethers\n</code></pre> <p>Once done, the simplest setup to start using the library and its methods is the following:</p> <pre><code>const ethers = require('ethers');\n\n// Variables definition\nconst privKey = '0xPRIVKEY';\n\n// Define Providerconst \nprovider = new ethers.providers.StaticJsonRpcProvider('RPC_URL', {\nchainId: ChainId,\nname: 'NETWORK_NAME'\n});\n\n// Create Walletlet \nwallet = new ethers.Wallet(privKey, provider);\n</code></pre> <p>Different methods are available inside provider and wallet. Depending on which network you want to connect to, you can set the RPC_URL, ChainID, NETWORK_NAME to the following values:</p> <p>SwapDEX Development Node</p> <ul> <li>RRC URL: <code>http://localhost:9933</code></li> <li>ChainID: <code>70</code></li> <li>Network Name: <code>dev</code></li> </ul> <p>SwapDEX Testnet</p> <ul> <li>RPC URL: <code>https://rpc.swapdex.network</code></li> <li>ChainID: <code>70</code></li> <li>Network Name: <code>SwapDEX</code></li> </ul>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#web3py-library","title":"Web3.py Library","text":"<p>Web3.py is a set of libraries that allow developers to interact with Ethereum nodes using HTTP, IPC, or WebSocket protocols with Python.  SwapDEX has an Ethereum-like API available that is fully compatible with Ethereum-style JSON RPC invocations. Therefore, developers can leverage this compatibility and use the web3.py library to interact with a SwapDEX node as if they were doing so on Ethereum.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/eth-libs/#setup-web3py-with-swapdex","title":"Setup Web3.py with SwapDEX","text":"<p>To get started with the web3.py library, install it using the following command:</p> <pre><code>pip3 install web3\n</code></pre> <p>Once done, the simplest setup to start using the library and its methods is the following:</p> <pre><code>from web3 import Web3\nRPC_URL = 'https://rpc-testnet.swapdex.network/rpc'\n\nweb3 = Web3(Web3.HTTPProvider('RPC_URL'))\n</code></pre> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/","title":"EVM Balances","text":"<p>The \"EVM\" module in Substrate provides support for executing Ethereum contracts on a substrate chain. To perform any gas or balance-related actions on the EVM, the calling account must have a EVM balance.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/#balance-conversion","title":"Balance Conversion","text":"<p>To use Ethereum contracts on a Substrate chain, the chain must have a protocol that support thes following requirements:</p> <ol> <li>A (32-byte) Substrate address must have a corresponding (20-byte) Ethereum address.</li> <li>Each (20-byte) Ethereum address must have its balance maintained.</li> </ol> <p>Step 1</p> <p>The EVM pallet satisfies step 1 by cutting the source Substrate address into an Ethereum address, taking the first 20 bytes. </p> <p></p> <p>Step 2</p> <p>To maintain the balances of the cut-down EVM addresses, the SwapDEX utilizes the Substrate balances pallet. The balances pallet converts a corresponding 20-byte address into an substrate address (32-byte).</p> <p>Note that these reconverted 32-byte addresses have no inherent relationship to the original truncated Substrate address.</p> <p></p> <p>Example</p> <ul> <li>Consider the following 32-byte substrate address: <code>0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF</code></li> <li>Truncate the address to build an EVM Pallet representation: <code>0x1234567890ABCDEF1234567890ABCDEF12345678</code></li> <li>The balance of <code>0x1234567890ABCDEF1234567890ABCDEF12345678</code> comes from the balances pallet</li> <li>The balances pallet manages uses a 32-byte representation of <code>0x1234567890ABCDEF1234567890ABCDEF12345678</code></li> <li>This representation is generated by hashing <code>0x1234567890ABCDEF1234567890ABCDEF12345678</code> with a specific EVM prefix</li> <li>The prefix is: <code>(0x65766D3A)</code></li> <li>The balances module performs: <code>HASH(0x65766D3A0x1234567890ABCDEF1234567890ABCDEF12345678)</code> end gets =</li> <li>32-byte EVM representation of truncated address: <code>0xAF8536395A1EEC8EDA6FB9CF36739ECF75BECF6FEA04CEEC108BBB6AA15B7CB3</code></li> <li>The balance of <code>0xAF8536395A1EEC8EDA6FB9CF36739ECF75BECF6FEA04CEEC108BBB6AA15B7CB3</code> in the balances pallet is used for EVM-related operations.</li> </ul> <p>Note</p> <p>Note that these actions are not reversible: we cannot convert from an EVM address back to its Ethereum address, nor can we convert from an Ethereum address back to its \"source\" Substrate address.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/#managing-ethereum-balances-on-substrate","title":"Managing Ethereum Balances on Substrate","text":"<p>Two operations are possible: </p> <ul> <li>We can \"deposit\" funds from a Substrate account into its corresponding Ethereum account and</li> <li>We can \"withdraw\" funds from an Ethereum account back into the source Substrate account.</li> </ul>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/#deposits","title":"Deposits","text":"<p>Since the EVM address that represents an Ethereum address is computed deterministically by hashing, as shown above, we can perform a standard balance transfer from our source Substrate account to the EVM address to seed the Ethereum account with funds.</p> <p>This can be performed by calling <code>balances::transfer(prefixAndHash(truncate(account)).signAndSend(account)</code>, where account is the source substrate account. <code>truncate()</code> takes the substrate source address (32-bytes) and produces the 20-byte Ethereum address.  Finally, <code>prefixAndHash()</code> applies the evm: prefix and performs the hash to convert the Ethereum address back into a 32-byte Substrate address.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/#withdrawals","title":"Withdrawals","text":"<p>Since the EVM address is computed deterministically, via hashing, we do not have a private key for it, so we cannot perform a balance transfer from it via normal means. As a result, the EVM module provides a unique function <code>withdraw</code> to transfer funds back from an Ethereum account to the source Substrate account.</p> <p>This can be performed by calling <code>evm::withdraw(truncate(account), value).signAndSend(account)</code> where account is the source Substrate account, and truncate takes the first 20 bytes as the Ethereum address.</p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/evm-balances/#ethereum-balances","title":"Ethereum Balances","text":"<p>An EVM address can be given a balance at genesis, or by sending balance directly to the \"substrate-ethereum address equivalent\" as you would normally do between accounts. </p> <p>SwapDEX handles Ethereum balances as if they were running on the Ethereum blockchain. That includes that gas is subtracted from the balance (you can access the quantity of gas used from the transaction receipt returned by the EVM module through web3 or truffle), and transfers work as expected.</p> <p>The balance of the 20-byte Ethereum address and the 32-byte EVM address should be identical, when compared: <code>web3.eth.getBalance(ethAddress)</code> should equal <code>system::balances(prefixAndHash(ethAddress)).freeBalance</code>, where <code>ethAddress</code> is the 20-byte Ethereum address, and <code>prefixAndHash</code> applies the evm: prefix and takes the hash, as explained above.</p> <p>Warning</p> <p>Each EVM address is deterministically mapped to another substrate address which maintains its balance within the balances pallet, and which can be used to sent funds directly via a basic transfer. This substrate address is equivalent to the 20-byte EVM address for all intents and purposes, and is a deterministic computation from the original substrate address \u2014 it can be used in other pallets freely as a \"proxy\" for the EVM address. However, it does not have a private key, so it cannot sign.</p> <p>Funds must be withdrawn from an EVM account (20-byte address) via the pallet_evm::withdraw function, as the \"substrate-ethereum equivalent\" does not have a known private key from which to send transactions.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"dev-guides/Tutorials/evm-tutorial/evm-tools-and-res/waffle/","title":"Waffle Tool","text":"<p>Waffle is a popular development framework for testing Solidity smart contracts. Since SwapDEX is Ethereum compatible, with a few lines of extra configuration, you can use SwapDEX as you usually would with Ethereum to develop on SwapDEX.</p> <p>Configure Waffle to Connect to SwapDEX</p> <p>Assuming you already have a JavaScript project, install Waffle:</p> <pre><code>npm install ethereum-waffle\n</code></pre> <p>To configure Waffle to run tests against a SwapDEX development node or the SwapDEX Testnet, within your tests create a custom provider and add network configurations:</p> <p>Javascript</p> <pre><code>describe ('Test Contract', () =&gt; { // Use custom provider to connect to SwapDEX or Edgeware development node const \nSwapDexProvider = new ethers.providers.JsonRpcProvider(('https://rpc.swapdex.network') const devProvider = new ethers.providers.JsonRpcProvider('http://localhost:9933/'); })\n</code></pre> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/","title":"GET STARTED","text":"<p>It's time to get started on the SwapDEX network! Please check out our recommended list for getting started.</p>"},{"location":"get-started/#brand-new-to-blockchain","title":"Brand new to blockchain?","text":"<p>For brand-new learners of Blockchain technology:</p> <ul> <li>The  Blockchain Fundamentals MOOC cours  is a great introduction to start familiarizing yourself with blockchain concepts such as cryptography and networks, and how these play into things like decentralization and cryptocurrency.</li> </ul> <p>Hint</p> <p>This is recommended for users with backgrounds of all levels, and the course is free!</p>"},{"location":"get-started/#brand-new-to-swapdex","title":"Brand new to SwapDEX?","text":"<p>For brand-new learners of SwapDEX, check-out:</p> <ul> <li>Reading the SwapDEX Overview page</li> <li>Reading our articles on Medium</li> <li>Creating a SwapDEX Account</li> <li>Using SwapDEX endpoints</li> <li>Claiming SwapDEX SDX coins</li> <li>Running a Validator on SwapDEX</li> <li>Staking as a Nominator on SwapDEX</li> </ul>"},{"location":"get-started/#developing-on-swapdex","title":"Developing on SwapDEX?","text":"<p>For developers who want to leverage on SwapDEX's unique advantages, please visit:</p> <ul> <li>The developer guide</li> </ul> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/claims/","title":"CLAIMS","text":"<p>If you held the SDX ERC-20 token or SDX coins until Friday, February 4th 2022, you are entitled to claim SDX on the SwapDEX network.</p> <p>Hint</p> <p>Watch our  YouTube Walkthrough </p> <p>You can claim SDX by visiting our  Dashboard Claim Function .</p> <p>Hint</p> <p>You can check if you are eligible to claim by investigating the  Snapshot </p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/endpoints/","title":"SWAPDEX ENDPOINTS","text":"<p>When interacting with the SwapDEX network via our  substrate explorer app  or other UIs and programmatic methods, you'd ideally be running your own node ( text guide ). Granted, that's not something everyone wants to do, so convenience trumps ideals in most cases. To facilitate this convenience, SwapDEX has several public endpoints you can use for your DApps.</p>"},{"location":"get-started/endpoints/#starkley-tech-archive-node","title":"Starkley Tech Archive Node","text":"<p>Starkley Tech, the company that develops the SwapDEX Rust client, maintains an archive node at endpoint <code>https://rpc.swapdex.network/</code></p> <p>To connect to the Starkley Tech node, use the endpoint in your JavaScript DApps like so: <pre><code>const{ ApiPromise, WsProvider } = require('@polkadot/api')\n\n(async () =&gt; {\nconst provider = new WsProvider('wss://ws.swapdex.network')\nconst api = await ApiPromise.create({ provider })\n// ...\n</code></pre> or in SwapDEX Substrate Explorer by clicking on the top-left corner of the screen and opening up the LIVE NETWORKS group and selecting SwapDEX and via Swapdex</p> <p></p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/faucet/","title":"HOW TO GET KUSARI COINS?","text":"<p>If you are interested in obtaining SDX for building or research, you can apply through the  Treasury  or receive a tip for doing something cool in the community.</p> <p>Please reach out to us on:</p> <ul> <li> Discord </li> <li> Telegram </li> </ul> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/internal-transfer/","title":"INTERNAL TRANSFER OF BALANCES","text":"<p>Cheers Friends, </p> <p>This guide will teach you how to send your funds from our \"substrate\" side to our Ethereum-Virtual-Machine (EVM). Remember, the EVM side of our chain allows you to interact with many eth-based smart contracts and projects that eventually will move to SwapDEX. Moreover, our cross-chain bridges will be attached to our EVM module, so for you to utilize cross-chain trades, you must use the EVM.</p> <p>That said, let me tell you how we tackle this. First, I will walk you through the process to get started right away. Second, I will elaborate a bit more on the concept so that the interested lads can read up.</p>"},{"location":"get-started/internal-transfer/#part-1-walkthrough","title":"PART 1 - WALKTHROUGH","text":"<p>Hint</p> <p>You can access the WALLETS function here:  Visit Dashboard   You can watch me walk you through the process in this video:  Visit YouTube  </p> <p>The transfer is done in four (4) steps:</p> <ul> <li>Choose an account to send the SDX from </li> <li>Choose an account that will receive the SDX</li> <li>Specify amount    </li> <li>Confirmation</li> </ul>"},{"location":"get-started/internal-transfer/#step-01-choose-an-account-to-send-the-sdx-from","title":"STEP 01 - Choose an account to send the SDX from","text":"<p>Hint</p> <p>Make sure you have selected the \"Wallets\" function of our DApp (see picture below)</p> <p></p> <p>Hint</p> <p>In the wallet list find the wallet to send from and click the button <code>send</code> on the right side. This account needs to hold the funds you wish to transfer.</p> <p></p>"},{"location":"get-started/internal-transfer/#step-02-choose-an-account-that-will-receive-the-sdx","title":"STEP 02 - Choose an account that will receive the SDX","text":"<p>Hint</p> <p>Click on <code>Send To Account</code> field and select an account you want to transfer the funds to from the dropdown menu. </p> <p></p>"},{"location":"get-started/internal-transfer/#step-03-specify-amount","title":"STEP 03 - Specify amount","text":"<p>Set the amount of SDX you want to send in the <code>Amount</code> field.</p> <p></p> <p>Hint</p> <p>Do not use <code>MAX</code> button to send all your funds. A small amount of SDX is needed to pay the gas fees</p>"},{"location":"get-started/internal-transfer/#step-04-confirmation","title":"STEP 04 - Confirmation","text":"<p>Click <code>Make Transfer</code> button and double check the <code>Sending From Account</code> and <code>Amount</code> values are correct.</p> <p>Warning</p> <p>It is generally advised to test a transaction with a small amount, especially if you are not familiar with the wallets so far. The correct transfer of funds is your sole responsibility! No refunds are possible.</p> <p></p> <p>Hint</p> <p>Open the substrate or EVM explorer to be prepared to check that the transfer went through successfully.   Substrate Explorer   EVM Explorer </p> <p>Confirm the transfer by hitting the <code>Sign and Submit</code> button.</p> <p></p> <p>Hint</p> <p>Sign with your substrate account.</p> <p></p> <p>Hint</p> <p>If everything went fine, you are going to see a success message at the button of the page</p> <p></p> <p>Hint</p> <p>Now head over to the substrate explorer to check if the DApp successfully wrote the transfer into a block</p> <p></p> <p>Success</p> <p>Congrats, you successfully swapped SDX from the substrate to the EVM side. Feel free to reverse the swap and use the wallets function to your needs. </p>"},{"location":"get-started/internal-transfer/#part-2-what-happens-in-the-background","title":"PART 2 - WHAT HAPPENS IN THE BACKGROUND","text":"<p>Many may ask themselves whether SwapDEX is a single chain when it has both an ethereum and substrate side at the same time? Well, to make a long story short... SwapDEX is one single chain BUT it runs an ethereum simulation in parallel.</p> <p>How does this work?</p> <p>To answer this question, we need to look at the node architecture. Nodes are the pillars of our distributed network, and they run all the necessary code.</p> <p></p> <p>I want to direct your focus to the SUBSTRATE RUNTIME module of the Substrate Node.  The Runtime hosts all the code that makes SwapDEX unique, and it's composed of code pallets.  As you can see, the democracy function of our chain is also a code pallet and allows our community to govern the chain. Likewise, the staking pallet enables our community to run validators and stake as nominators. Like those pallets, the EVM is another pallet that allows our community to interact with eth-based smart contracts and cross-chain bridges.</p> <p>By performing the transfer described in step 01, we are transferring coins from the SUBSTRATE RUNTIME ENVIRONMENT into the EVM pallet and vice versa, that's it :D. As briefly touched on earlier, the EVM side opens up many new opportunities for you to utilize your SDX coins.</p> <p></p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"get-started/transfer-balances/","title":"TRANSFER BALANCES","text":"<p>Balance transfers are used to send SDX balances from one account to another account. To start transferring balances, we will begin by using our Substrate Explorer App. </p> <p>Hint</p> <p>This guide assumes that you've already created an account and have some funds that are ready to be transferred.</p>"},{"location":"get-started/transfer-balances/#swapdex-subtrate-explorer-app","title":"SwapDEX Subtrate Explorer App","text":"<p>Let's begin by opening Substrate Explorer App. There are two ways to make a balance transfer:</p> <ol> <li>By using the \"Transfer\" tab in the \"Accounts\" dropdown</li> <li>Clicking the \"send\" button while in the \"Accounts\" page</li> </ol>"},{"location":"get-started/transfer-balances/#using-the-transfer-tab","title":"Using the Transfer Tab","text":"<p>Click on the \"Transfer\" tab in the \"Accounts\" dropdown.</p> <p></p> <p>Now a pop-up window will appear on the page. The pop-up asks you to enter 3 inputs:</p> <ol> <li>\"send from account\": Your account with funds that you will send from.</li> <li>\"send to address\": The address of the account that will receive the funds.</li> <li>\"amount\": The amount of tokens you will transfer.</li> </ol> <p></p> <p>After setting your inputs correctly, click the \"Make Transfer\" button and confirm. Once the transfer is included in a block you will see a green notification in the top-right corner of your screen.</p>"},{"location":"get-started/transfer-balances/#keep-alive-checks","title":"Keep-Alive Checks","text":"<p>At an extrinsic level, there are two main ways to transfer funds from one account to another. These are <code>transfer</code> and <code>transfer_keep_alive</code>.  <code>transfer</code> will allow you to send SDX regardless of the consequence; <code>transfer_keep_alive</code> will not allow you to send an amount that would allow the sending account to be removed due to it going below the existential deposit.</p> <p>By default, Substrate Explorer App will use <code>transfer_keep_alive</code>, ensuring that the account you send from cannot drop below the existential deposit (0.001666 SDX). However, it may be that you do not want to keep this account alive (for example, because you are moving all of your funds to a different address). In this case, click on the \"keep-alive\" toggle at the bottom of the pop-up window. The label should switch from \"Transfer with account keep-alive checks\"(<code>transfer_keep_alive</code> will be used) to \"Normal transfer without keep-alive checks\" (<code>transfer</code> extrinsic will be used). As a common use case for using normal transfers is to entirely clear out the account, a second toggle will appear if you have the keep-alive check turned off that will send all the tokens in the account, minus a transaction fee, to the destination address.</p> <p>Attempting to send less than the existential deposit to an account with 0 SDX will always fail, no matter if the keep-alive check is on or not. For instance, attempting to transfer 0.001 SDX to an account you just generated (and thus has no SDX) will fail, since 0.001 SDX is less than the existential deposit of 0.001666 SDX and the account cannot be initialized with such a low balance.</p> <p>Warning</p> <p>Even if the transfer fails due to a keep-alive check, the transaction fee will be deducted from the sending account if you attempt to transfer.</p>"},{"location":"get-started/transfer-balances/#existing-reference-error","title":"Existing Reference Error","text":"<p>If you are trying to reap an account and you recieve an error similar to \"There is an existing reference count on the sender account. As such the account cannot be reaped from the state\", then you have existing references to this account that must first be removed before it can be reaped. References may still exist from:</p> <ul> <li>Bonded coins (most likely)</li> <li>Unpurged session keys (if you were previously a validator)</li> <li>Coin locks</li> <li>Existing recovery info</li> <li>Existing assets</li> </ul>"},{"location":"get-started/transfer-balances/#bonded-coins","title":"Bonded Coins","text":"<p>If you have coins that are bonded, you will need to unbond them before you can reap your account. Follow the instructions at Unbonding and Rebonding to check if you have bonded coins, stop nominating (if necessary) and unbond your coins.</p>"},{"location":"get-started/transfer-balances/#purging-session-keys","title":"Purging Session Keys","text":"<p>If you used this account to set up a validator and you did not purge your keys before unbonding your coins, you need to purge your keys. You can do this by seeing the How to Stop Validating page. This can also be checked by checking <code>session.nextKeys</code> in the chain state for an existing key.</p>"},{"location":"get-started/transfer-balances/#checking-for-locks","title":"Checking for Locks","text":"<p>You can check for locks by querying <code>system.account(AccountId)</code> under <code>Developer &gt; Chain state</code>. Select your account, then click the \"+\" button next to the dropdowns, and check the relative <code>data</code> JSON object. If you see a non-zero value for anything other than <code>free</code>, you have locks on your account that need to get resolved.</p> <p>You can also check for locks by navigating to <code>Accounts &gt; Accounts</code> in Substrate Explorer App. Then, click the dropdown arrow of the relevant account under the 'balances' column. If it shows that some tokens are in a 'locked' state, you can see why by hovering over the information icon next to it.</p>"},{"location":"get-started/transfer-balances/#existing-recovery-info","title":"Existing Recovery Info","text":"<p>Currently, SwapDEX does not use the Recovery Pallet, so this is probably not the reason for your coins having existing references.</p> <p>On SwapDEX, you can check if recovery has been set up by checking the <code>recovery.recoverable(AccountId)</code> chain state. This can be found under <code>Developer &gt; Chain state</code> in Substrate Explorer App.</p>"},{"location":"get-started/transfer-balances/#existing-non-sdx-assets","title":"Existing Non-SDX Assets","text":"<p>Currently, SwapDEX does not use the Assets Pallet, so this is probably not the reason for your tokens having existing references.</p>"},{"location":"get-started/transfer-balances/#from-the-accounts-page","title":"From the Accounts Page","text":"<p>Navigate to the \"Accounts\" page by selecting the \"Accounts\" tab from the \"Accounts\" dropdown located on the top navigational menu of Substrate Explorer App.</p> <p>You will see a list of accounts you have loaded. Click the \"Send\" button in the row for the account you will like to send funds from.</p> <p></p> <p>Now you will see the same pop-up window as if using the \"Transfer\" tab. Fill in the inputs correctly and hit \"Make Transfer\" then confirm the balance transfer. You will see a green notification in the top-right corner of the screen when the transfer is included in a block.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"home/FAQs/","title":"FREQUENTLY ASKED QUESTIONS","text":""},{"location":"home/FAQs/#general-faqs","title":"General FAQs","text":"<p>Attention</p> <p>Disclaimer SwapDEX is a work in progress. The following FAQs will continue to be updated as the platform evolves. The exact structures and technologies to be included over time and are liable to change with continued research and the possible need for adaptation due to the fast-paced development in the crypto industry</p>"},{"location":"home/FAQs/#what-is-our-mission","title":"What is our mission?","text":"<p>We\u2019re on a mission to truly decentralise finance. We revolutionize the future of DeFi by providing the industry-leading ecosystem, blockchain, exchange and end-to-end financial platform within a community-governed ecosystem.</p> <p>Why do we need SwapDEX to help achieve true Decentralisation?</p> <p>The distribution of funds in the crypto space is still relatively centralised with the majority of funds in the hands of relatively few. Part of this is because the technology is still in its youth and adoption still hasn\u2019t reached the masses, although the path towards real mass adoption is getting clearer by the day. The Problem of centralised funds still persists as a lot of coins and tokens are in the hands of a small number of big players in the industry.</p> <p>In order to further disperse these financial resources and give everyone a fair chance of participating in an independent market, exchanges mark a pivotal point. A widespread allocation is only possible if there are a lot of different - ideally independent and decentralised - exchanges that grant access to assets with each acting as a sort of contingency for another, avoiding risk of corruption.</p> <p>The requirements for those exchanges are steadily rising and rightfully so. Investors want to be able to voice their concerns when putting their hard earned money at risk and the weight of their voice has been rather small in the past. It's clear that it's one of the major challenges for exchanges and DeFi-projects to empower the individual investors and give them the right to vote on important decisions. With growing desire for participation comes the question on how to meet the needs of the growing crypto community.</p> <p>SwapDEX offers its users participation through an elaborate voting and consensus mechanism that strives to best represent the interest of each and every one of their investors through nominating the most trustworthy validators (nodes that supply the blockchain with the hardware necessary) and voting upon a trusted council to ensure long term stability of the chain and the trading D'Apps deployed on its native SwapDEX chain.</p>"},{"location":"home/FAQs/#swapdex-launch","title":"SwapDEX Launch\u200b","text":"<p>The Genesis block of the SwapDEX network was launched on December-11-2021 11:10:12 UTC, as a nominated Proof of Stake (nPoS) network.</p>"},{"location":"home/FAQs/#swapdex-roadmap","title":"SwapDEX Roadmap\u200b","text":"<p>For more information on the SwapDEX roadmap on its way to decentralise finance, please visit the LINK to New SDX Homepage Roadmap!</p>"},{"location":"home/FAQs/#how-many-chains-can-swapdex-connect","title":"How many chains can SwapDEX connect?","text":"<p>There is no specific limit to the number of chains that can be connected to the SwapDEX network. As long as working bridges exist, there is a way to connect.</p>"},{"location":"home/FAQs/#does-swapdex-support-smart-contracts","title":"Does SwapDEX support smart contracts?\u200b","text":"<p>SwapDEX supports all common smart contract languages and tool-workflows. Deploy your existing project within minutes or start building with familiar tools and languages</p>"},{"location":"home/FAQs/#what-keeps-swapdexs-governance-from-failing","title":"What keeps SwapDEX's governance from failing?\u200b","text":"<p>SwapDEX's governance has already been shown to work. Examples can be found in the runtime upgrades that have successfully taken place through on the testnets as well as in a real economic environment on Kusama and Polkadot itself. Blockchains and especially projects that focus on decentralised finance need a method to adapt and evolve while taking the interests of their community into consideration. Therefore, an on-chain governance system is of utmost importance for the long-term success of SwapDEX. Ultimately, it is the coin holders that are responsible for preventing SwapDEX's governance from failing by using their economic value and convictions to guide the progression of the protocol and push the project towards true decentralised finance.</p>"},{"location":"home/FAQs/#what-prevents-swapdexs-governance-from-becoming-centralised","title":"What prevents SwapDEX's governance from becoming centralised?","text":"<p>A savvy reader might have noticed that the answer to the previous question endowed the coin holders with the ultimate responsibility to ensure that SWAPDEX\u2019s governance does not fail. By following the train of this assertion, one might assume that SwapDEX's governance is susceptible to becoming ruled by a few large token holders (called whales in trading parlance) and therefore become a mere plutocracy (rule of the rich). There are several other mechanisms that are built-in to the governance system to resist this plutocratic tendency. One of these mechanisms is called conviction voting, and imposes greater voting power to token holders who are willing to lock their tokens on the protocol for longer lengths of time. Longer lock-ups display conviction in a vote. Conviction voting could allow a highly determined minority to overrule the vote of an apathetic majority in certain situations. Another mechanism is known as Adaptive Quorum Biasing. This makes proposals have a varying threshold for approval or rejection based on what part of the governance protocol the proposal originated in. For details on the subtleties of SWAPDEX\u2019s governance system, please check out our Governance documentation.</p>"},{"location":"home/FAQs/#web3-foundation","title":"Web3 Foundation","text":""},{"location":"home/FAQs/#what-is-the-web3-foundation","title":"What is the Web3 Foundation?","text":"<p>Web3 Foundation is a Swiss Stiftung established under Article 80 et seqq. of the Swiss Civil Code. The Web3 Foundation was founded by Dr. Gavin Wood and has as its focus the development, deployment and maintenance of \u201cWeb3\u201d. Web3 Foundation promotes the development of innovative technologies and applications in the field of cryptographically-enabled decentralised software protocols.</p> <p>Web3 Foundation\u2019s purpose is to nurture and steward cutting-edge technologies and applications at all levels of the Web3 technology stack. Web3\u2019s principal focus is research, development, deployment, funding, and maintenance of Web3 technologies, plus advocacy and education, developer-adoption, support of middleware, and base-layer/demonstration applications.</p> <p>The Web3 Foundation Council is Web3\u2019s governing body, responsible for the management of the Web3 Foundation. The current members of the Web3 Foundation Council are Dr. Gavin Wood (President and Founder), Dr. Aeron Buchanan (Vice President) and Reto Trinkler.</p> <p>Swiss foundations are subject to a mandatory supervision by a federal or cantonal authority. The Web3 Foundation\u2019s application for approval by Eidgen\u00f6ssische Stiftungsaufsicht (Federal Foundation Supervisory Authority) was approved July 2018.</p>"},{"location":"home/FAQs/#risk-factors-associated-with-sdx","title":"Risk factors associated with SDX","text":""},{"location":"home/FAQs/#nature-of-the-legal-relationship-between-holders-of-sdx-is-uncertain","title":"Nature of the legal relationship between holders of SDX is uncertain.","text":"<p>The legal nature of the relationship (if any) between the holders of SDX and the liabilities and obligations of holders of SDX is uncertain.</p>"},{"location":"home/FAQs/#regulatory-treatment-of-sdx-is-uncertain","title":"Regulatory treatment of SDX is uncertain","text":"<p>As the sale of tokens is a nascent practice, the treatment of SDX by regulatory and governmental authorities is uncertain and may vary across jurisdictions. The legal and regulatory treatment of SDX may be prone to change in the future, which may have a materially adverse impact on the legal status of SDX, the economic value (if any) of SDX and the liquidity of SDX, as well as the development, function or governance of SwapDEX and / or the Web3 Foundation itself.</p>"},{"location":"home/FAQs/#technical-faq","title":"Technical FAQ","text":""},{"location":"home/FAQs/#how-can-i-add-swapdex-to-metamask","title":"How can I add SwapDEX to MetaMask?","text":"<p>RPC URL : <code>https://rpc.swapdex.network/</code>  Chain ID : <code>70</code>  Currency Symbol : <code>SDX</code>  Explorer: <code>https://evm.swapdex.network/</code> </p>"},{"location":"home/FAQs/#what-is-the-polkadotjs-extension-do-i-need-to-get-it-to-interact-with-the-chain","title":"What is the polkadot.js extension? Do I need to get it to interact with the chain?","text":"<p>The Polkadot.js is a browser extension that enables you to create and manage a substrate account (the framework that was used to build i.e. Polkadot, Kusama, the SwapDEX and the KUSARI chain). To interact with the chain and its staking and governance mechanisms, you need to install it. You can find a video guide here.</p>"},{"location":"home/FAQs/#where-do-i-find-further-information-on-how-to-become-a-validator","title":"Where do I find further information on how to become a validator?","text":"<p>https://docs.swapdex.network/validator-guides/validator/</p>"},{"location":"home/FAQs/#how-can-i-nominatestake","title":"How can I Nominate/Stake?","text":"<p>https://docs.swapdex.network/what-to-try/nominator/</p>"},{"location":"home/FAQs/#okay-im-hooked-where-are-the-deep-dives","title":"Okay I'm hooked, where are the Deep Dives?","text":"<p>https://docs.swapdex.network/deep-dives/evm-pallet/</p>"},{"location":"home/FAQs/#i-am-a-developer-where-do-i-look","title":"I am a developer, where do I look?","text":"<p>Work in Progress: https://docs.swapdex.network/dev-guides/</p>"},{"location":"home/FAQs/#what-is-the-minimum-amount-of-sdx-i-can-have-in-my-account","title":"What is the minimum amount of SDX I can have in my account?\u200b","text":"<p>0.1 SDX</p>"},{"location":"home/FAQs/#what-is-the-block-time-of-swapdex","title":"What is the block time of SwapDEX?\u200b","text":"<p>SwapDEX is currently operating at a block time of approximately six seconds. This may be changed in the future. It may be lowered to two or three seconds after optimizations, or potentially increase due to unforeseen circumstances.</p>"},{"location":"home/FAQs/#does-swapdex-support-smart-contracts_1","title":"Does SwapDEX support smart contracts?\u200b","text":"<p>SwapDEX supports all common smart contract languages and tool-workflows. Deploy your existing project within minutes or start building with familiar tools and languages</p>"},{"location":"home/FAQs/#what-is-the-inflation-rate-of-sdx","title":"What is the inflation rate of SDX?\u200b","text":"<p>The inflation rate is based on the amount of SDX tokens locked in staking. Assuming the ideal staking rate of 50% is reached, the inflation is set to approximately 10% per year. A higher percentage staked will result in a sharp drop of the interest as well as the inflation rate to incentivize the unbonding of funds and to avoid running into shortage of liquidity.</p>"},{"location":"home/FAQs/#what-are-the-transfer-fees-on-swapdex","title":"What are the transfer fees on SwapDEX?\u200b","text":"<p>It is important to note that the cost of transferring SDX is dynamic. Currently, the minimum cost of transferring SDX is ~1.5 milli SDX, although this can be changed via governance. However, actual transaction fees will vary based on a variety of factors. Specifically, fee calculation follows the following formula:</p> <p>base_fee + (tx_length * length_fee) + WeightToFee(weight)</p> <p>For further information please visit the Substrate documentation on fee calculation.</p> <p>Note</p> <p>On the EVM side the fee is set to 50GWEI, which can be either decreased or increased.</p>"},{"location":"home/FAQs/#where-can-i-find-info-about-upcoming-changes-and-votes-concerning-the-chain","title":"Where can I find info about upcoming changes and votes concerning the chain?","text":"<p>You can check out proposals and referenda via the governance tab on the explorer here.</p> <p>If you want to partake in the discussion about future changes and the planning of proposals, check the forum for details. Upcoming events concerning the chain can be found on the upcoming event calendar as well.</p>"},{"location":"home/FAQs/#economic-and-staking-faqs","title":"Economic and Staking FAQs","text":""},{"location":"home/FAQs/#where-can-i-buy-sdx","title":"Where can I buy SDX?","text":"<p>You can buy SDX at PancakeSwap</p>"},{"location":"home/FAQs/#where-can-i-find-the-tokenomics","title":"Where can I find the tokenomics?","text":"<p>The tokenomics can be found on our website: https://swapdex.network</p>"},{"location":"home/FAQs/#where-do-i-find-further-information-on-how-to-become-a-validator_1","title":"Where do I find further information on how to become a validator?","text":"<p>https://docs.swapdex.network/validator-guides/validator/</p>"},{"location":"home/FAQs/#how-can-i-nominatestake_1","title":"How can I Nominate/Stake?","text":"<p>https://docs.swapdex.network/what-to-try/nominator/</p>"},{"location":"home/FAQs/#how-do-payouts-work","title":"How do payouts work?","text":"<p>You can find further explanation regarding block rewards and payouts here and here</p> <p>Note</p> <p>Every party involved with a validator is able to request a payout for their own rewards and additionally has the option to make use of the \"payout all\" function, initiating the payout for every party that's eligible for rewards for based upon their respective active eras. Meaning you as a Nominator are not dependent on the Validator to pay out your rewards for you but instead can request your (or everyone's payouts) when you need to. Therefore, you are not at risk of the Validator missing its 21-day deadline (84 eras) for payouts and are in full control of your funds.</p>"},{"location":"home/FAQs/#how-are-the-rewards-calculated","title":"How are the rewards calculated?","text":"<p>Inflation and Interest rates for SwapDEX at the moment SwapDEX Interest and Inflation curve https://user-images.githubusercontent.com/91843891/148518117-0921ce62-ef49-4966-8468-1b2b38081733.png</p>"},{"location":"home/FAQs/#what-is-the-inflation-rate-of-sdx_1","title":"What is the inflation rate of SDX?\u200b","text":"<p>The inflation rate is based on the amount of SDX tokens locked in staking. Assuming the ideal staking rate of 50% is reached, the inflation is set to approximately 10% per year. A higher percentage staked will result in a sharp drop of the interest as well as the inflation rate to incentivize the unbonding of funds and to avoid running into shortage of liquidity.</p>"},{"location":"home/FAQs/#why-does-swapdex-only-have-300-validators","title":"Why does SwapDEX only have 300 validators?\u200b","text":"<p>SwapDEX opted to start with an active set of 300 validators to create a reasonable and solid foundation for the chain. It's important to note that different projects have different definitions of their validators/nodes, whereas for SwapDEX, every validator is running their own validating node that performs full verification of the Chain, votes on finality and produces blocks in their decided slots. Comparable projects operate on about 150 active validators.</p> <p>Additionally, the validation is not the sole source of staking. Nominators participate in the staking system as well and receive rewards on the funds they are willing to commit/bond. For every validator, there is a maximum of 256 Nominations possible, with a total of 76,800 possible participants in the staking system for now. The amount of active validators can be changed later by decision of the community through fair and decentralised governance decisions.</p> <ul> <li>Further Information can be found here: Validation and Nomination</li> </ul>"},{"location":"home/FAQs/#what-is-the-minimum-bond-necessary-to-create-a-validator","title":"What is the minimum bond necessary to create a validator?\u200b","text":"<p>The minimum stake that is necessary to initially be able to create a validator is as low as 0.1 SDX, which can be changed by the chain's governance. Making it to the list of active validators depends on the amount of SDX that are bonded to the actual active set of validators, the amount of bonded SDX on validators on the waiting list as well as the maximum number of validators, which can be increased or decreased by our voting mechanism as well.</p> <p>One way to estimate the minimum amount of SDX your validator needs to make it to the active set is to navigate to the Targets Tab, sort by maximum stake and look for the least amount that is needed to be eligible for the next era.. You\u2019ll need at least this much + 1 to enter the set.</p>"},{"location":"home/FAQs/#how-many-active-nominators-can-a-validator-have","title":"How many active Nominators can a Validator have?","text":"<p>256 is the amount of Nominations a Validator can recieve. 257 Nominations would mean the Validator is oversubscribed and only the top 256 Nominators (based upon bonded SDX) will be eligible for payouts/rewards.</p>"},{"location":"home/FAQs/#what-is-the-maximum-number-of-validators-a-nominator-can-bond-to","title":"What is the maximum number of Validators a Nominator can bond to?","text":"<p>16 is the maximum number of different validators one Nominator can bond funds to.</p> <p>Note</p> <p>Due to security reasons, we recommend using a separate Stash and Controller Account for every Nomination</p>"},{"location":"home/FAQs/#can-i-stoppause-my-validator-without-getting-punished","title":"Can I stop/pause my validator without getting punished?","text":"<p>Yes, you can set your validator into the \"chill\" status by going to your \"account actions\" page and click on the \"STOP\" button. This will move your validator into a sleeping stance without losing funds. Reasons for pausing might be intended migration to another server or an upcoming extended server maintenance. You might want to inform your Nominators on the SwapDEX Forum or on Discord to give them a heads-up about missing payouts.</p> <p>You can find further information in the deep dive.</p>"},{"location":"home/FAQs/#i-want-to-switch-my-vps-providerchange-my-server-hardware-what-do-i-need-to-consider","title":"I want to switch my VPS provider/Change my server hardware. What do I need to consider?","text":"<p>You can follow our guide to change the VPS provider.</p>"},{"location":"home/FAQs/#i-ran-out-of-storage-on-my-validator-how-do-i-migrate-without-the-risk-of-getting-slashedlosing-funds","title":"I ran out of storage on my Validator. How do I migrate without the risk of getting slashed/losing funds?","text":"<p>-&gt; look above</p>"},{"location":"home/FAQs/#i-am-running-a-validator-but-it-says-i-am-on-the-waiting-list-what-does-that-mean","title":"I am running a validator, but it says I am on the waiting list. What does that mean?","text":"<p>Being on the waiting list means that your validator has successfully connected to the chain and is - from a technical standpoint - working as intended. The most likely reason for being in the waiting list is that the amount of SDX nominated (staked) is not high enough to be in the top 300. The amount of nominated (staked) SDX on your validator will determine if you can make it into the top 300. You can go to the targets page of the explorer to check your rank and see how much is needed for you to move into the active set of validators here (sort for total stake and check which has the least amount to be eligible for the next era to determine the threshold)</p> <p>Other reasons may be connectivity issues from you or your providers side. You can check out Discord or the Forum and seek help there.</p>"},{"location":"home/FAQs/#networking-faqs","title":"Networking FAQs","text":""},{"location":"home/FAQs/#what-is-libp2p","title":"What is libp2p?\u200b","text":"<p>Libp2p is a modular and extensible networking stack that is used by IPFS, Substrate, and many other projects. It is a collection of peer-to-peer protocols for finding peers and connecting to them. Its modules have logic for content routing, peer routing, peer discovery, different transports, and NAT traversals. It is intended to be used by applications for building large scale peer-to-peer networks by only selecting the parts of the protocol suite that are needed. The Rust implementation of the specification was built and primarily maintained by a team of contributors at Parity Technologies. The Go and JavaScript versions are maintained by Protocol Labs as well as community contributors. A Nim version of the library also exists. Libp2p as a whole is an open source project that is actively developed and expanded on various code repositories hosted on their GitHub.</p>"},{"location":"home/FAQs/#does-swapdex-use-libp2p","title":"Does SwapDEX use libp2p?\u200b","text":"<p>Yes, since SwapDEX is built with Substrate. Substrate uses a networking protocol that is based on libp2p (specifically the Rust libp2p library). However, Substrate uses a mix of standard libp2p protocols and protocols that are homegrown and not official libp2p standards. Of the standard protocols, those which are shared with other implementations of libp2p such as IPFS, are connection-checking (ping), asking for information on a peer (identity), and Kademlia random walks (kad). Of the protocols that are custom to Substrate, there are the legacy Substrate stream, a request-response for getting information on blocks (sync), a light client protocol, a notification protocol for transactions, and block announcement. For detailed information on how Substrate uses libp2p and the standard and custom protocols, please see the networking documentation.</p>"},{"location":"home/FAQs/#how-does-libp2p-differ-from-ipfs","title":"How does libp2p differ from IPFS?\u200b","text":"<p>The Interplanetary File System (IPFS) is a peer-to-peer hypermedia protocol used primarily for storage of files. It allows one to upload a file onto the network and share it with its content addressable URI. IPFS, like Substrate, is an application of libp2p and exists higher on the technology stack. Although both IPFS and Substrate use libp2p, it cannot be said that Substrate \"uses\" IPFS since besides sharing the underlying library for networking there is no native integration between the two applications.</p>"},{"location":"home/FAQs/#team-faq","title":"Team FAQ","text":""},{"location":"home/FAQs/#who-is-behind-swapdex","title":"Who is behind SwapDEX?","text":"<p>The SwapDEX team is an international team of crypto experts and enthusiasts with backgrounds in various professions. We are mainly based in Central Europe (UK, Belgium and Germany) but also work closely together with members in the USA, Australia and Turkey.</p> <p>I want to inquire more, how can I contact the officials?</p> <p>Send an Email to: <code>marketing@swapdex.network</code></p>"},{"location":"home/FAQs/#community-faq","title":"Community FAQ","text":""},{"location":"home/FAQs/#where-does-the-community-action-take-place","title":"Where does the community action take place?","text":"<p>Find us on Discord, Twitter , Telegram on reddit and in our Forum</p> <p>You can find further information on Medium.</p>"},{"location":"home/FAQs/#where-can-i-learn-more-about-the-validators-supporting-the-chain","title":"Where can I learn more about the Validators supporting the chain?","text":"<p>You can check out information provided by the Community's Validators in our Forum For Technical Information check out our documentation.</p>"},{"location":"home/FAQs/#can-i-helpsupport-swapdex","title":"Can I help/support SwapDEX?","text":"<p>Yes, you can take part in supporting the project and spread the word. Take a look at the SwapDEX Community Bounty Program</p> <p></p> <p> Written by Neidhardt &amp; Petar </p>"},{"location":"home/quick-start/","title":"QUICK START","text":"<p>SwapDEX is build using the substrate framework. In addition SwapDEX utlilizes an Ethereum-Virtual-Machine (EVM) pallet to enable a seamless interface to all EVM-based blockchains. Hence you can connect to SwapDEX on both sides, the Substrate and EVM side. Here is how:</p>"},{"location":"home/quick-start/#connect-to-swapdex-substrate","title":"Connect to SwapDEX Substrate","text":"<p>Just follow this link:  SwapDEX Substrate DApp.  In case you are new to substrate you can watch his video:  SDX KSI Wallets </p> <p>Hint</p> <p>The SwapDEX Substrate DApp offers many functionalities like a fully functional block explorer, the ability to stake and validate and to participate in the on-chain governance.</p>"},{"location":"home/quick-start/#connect-to-swapdex-evm","title":"Connect to SwapDEX EVM","text":"<p>To connect to SwapDEX's EVM we recommend to use  MetaMask.   Go to <code>Settings -&gt; Network -&gt; Add new Network</code> and enter the following network details:</p> <ul> <li>Network :  SwapDEX</li> <li>RPC URL : https://rpc.swapdex.network/</li> <li>Chain ID : 70</li> <li>Currency Symbol : SDX</li> <li>Block Explorer: https://evm.swapdex.network/</li> </ul>"},{"location":"home/quick-start/#swapdex-dashboard","title":"SwapDEX Dashboard","text":"<p>Once connected with SwapDEX's Substrate and EVM side, you are all set to utilize the SwapDEX Dashboard  The SwapDEX Dashboard is the one-stop-shop to utilize SwapDEX's unique features. Keep in mind that the dashboard will grow and expand to continue to provide utiliy.</p> <ul> <li>SwapDEX Dashboard</li> </ul> <p>Functionalities you can already access are:</p> <ul> <li>Claim: To claim your SDX coins -  YouTube Walkthrough</li> <li>Transfer: To bridge your SDX from the Substrate to the EVM side and vice versa -  YouTube Walkthrough</li> </ul>"},{"location":"home/quick-start/#join-the-swapdex-kusari-community","title":"Join the SwapDEX / Kusari Community","text":"<p>Connect with an outstanding and helpful community whenever you feel the need to ask questions, discuss topics or simply hang out with like-minded DeFi enthusiasts. </p> <ul> <li> \u2013 Discord</li> <li> \u2013 Telegram</li> <li> \u2013 YouTube</li> <li> \u2013 Twitter</li> <li> \u2013 Medium</li> </ul> <p>Hint</p> <p> Check out our forum as well: Forum  This is especailly useful for on-chain governance and proposals.</p>"},{"location":"home/tokenomics/","title":"Tokenomics","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"troubleshooting/01-substrate-error-codes/","title":"ERRORS AND HOW TO RESOLVE THEM","text":"<p>Errors in Substrate-based chains are usually accompanied by descriptive messages. The substrate explorer translates and displays those descriptive messages to help users understand what might have caused the error or inform the user about performed on-chain actions.</p> <p>If this page does not answer your question, try to reach out to the community and us on Discord for more information on troubleshooting your issue.</p>"},{"location":"troubleshooting/01-substrate-error-codes/#how-to-get-detailed-error-descriptions","title":"How to get detailed error descriptions","text":"<p>Here's how to find out the detailed error description with the help of the substrate explorer.</p> <p>A typical failed transactions looks something like this:</p> <p></p> <p>The image displays only the error name as defined in the code, not its error message. Despite this error being rather self-explanatory, let's find its details.</p> <p>In the Explorer Tab, find the block in which this failure occurred. Then, expand the <code>system.ExtrinsicFailed</code> frame:</p> <p></p> <p>Notice how the <code>details</code> field contains a human-readable description of the error. Most errors will have this, if looked up this way. If you cannot look up the error this way, or there is no message in the details field, consult the table below.</p>"},{"location":"troubleshooting/01-substrate-error-codes/#common-errors","title":"Common Errors","text":"<p>The table below lists the most commonly encountered errors and ways to resolve them.</p> Error Description Solution BadOrigin You are not allowed to do this operation, e.g. trying to create a council motion with a non-council account. Either switch to an account that has the necessary permissions, or check if the operation you're trying to execute is permitted at all (e.g. calling\u00a0system.setCode\u00a0to do a runtime upgrade directly, without voting). BadProof The transaction's signature seems invalid. It's possible that the node you're connected to is following an obsolete fork - trying again after it catches up usually resolves the issue. To check for bigger problems, inspect the last finalized and current best block of the node you're connected to and compare the values to chain stats exposed by other nodes - are they in sync? If not, try connecting to a different node. Future Transaction nonce too high, i.e. it's \"from the future\". Reduce the nonce to +1 of current nonce. Check current nonce by inspecting the address you're using to send the transaction. Stale Transaction nonce too low. Increase the nonce to +1 of current nonce. Check current nonce by inspecting the address you're using to send the transaction. ExhaustsResources There aren't enough resources left in the current block to submit this transaction. Try again in the next block. Payment Unable to pay for TX fee. You might not have enough free balance to cover the fee this transaction would incur. Temporarily banned The transaction is temporarily banned. The tx is already in pool. Either try on a different node, or wait to see if the initial transaction goes through."},{"location":"troubleshooting/01-substrate-error-codes/#error-table","title":"Error Table","text":"<p>The below table is a reference to the errors that exists in Kusari and SwapDEX. It is generated from the runtime's metadata.</p>    :root {     --bg-table-stripe: #f6f6f5;     --b-table: #e3e3e2;     --caption: #EC4880; }  table {     background-color: transparent;     border-collapse:collapse;     font-family: Arial, Helvetica, sans-serif }  th {     text-align:left }  .dcf-txt-center {       text-align: center!important     }      .dcf-txt-left {       text-align: left!important     }      .dcf-txt-right {       text-align: right!important     }  .dcf-table caption {       color: var(--caption);       font-size: 1.13em;       font-weight: 700;       padding-bottom: .56rem     }      .dcf-table thead {       font-size: .84em;     }      .dcf-table tbody {       border-bottom: 1px solid var(--b-table);       border-top: 1px solid var(--b-table);       font-size: .84em     }      .dcf-table tfoot {       font-size: .84em     }      .dcf-table td, .dcf-table th {       padding-right: 1.78em     }      .dcf-table-bordered, .dcf-table-bordered td, .dcf-table-bordered th {       border: 1px solid var(--b-table)     }      .dcf-table-bordered td, .dcf-table-bordered th, .dcf-table-striped td, .dcf-table-striped th {       padding-left: 1em;       padding-right: 1em     }      .dcf-table-bordered tr:not(:last-child), .dcf-table-striped tr:not(:last-child) {       border-bottom: 1px solid var(--b-table)     }      .dcf-table-striped tbody tr:nth-of-type(2n) {       background-color: var(--bg-table-stripe)     }      .dcf-table thead td, .dcf-table thead th {       padding-bottom: .75em;       vertical-align: bottom;       background-color: #EC4880     }      th[scope=row] {     background-color: #D9D8DA; }      .dcf-table tbody td, .dcf-table tbody th, .dcf-table tfoot td, .dcf-table tfoot th {       padding-top: .75em;       vertical-align: top     }      .dcf-table tbody td, .dcf-table tbody th {       padding-bottom: .75em     }      .dcf-table-bordered thead th {       padding-top: 1.33em     }      .dcf-wrapper-table-scroll {       overflow-x: auto;       -webkit-overflow-scrolling: touch;       left: 50%;       margin-left: -50vw;       margin-right: -50vw;       padding-bottom: 1em;       position: relative;       right: 50%;       width: 100vw     }      @media only screen and (max-width:42.09em) {       .dcf-table-responsive thead {         clip: rect(0 0 0 0);         -webkit-clip-path: inset(50%);         clip-path: inset(50%);         height: 1px;         overflow: hidden;         position: absolute;         width: 1px;         white-space: nowrap       }       .dcf-table-responsive tr {         display: block       }       .dcf-table-responsive td {         -webkit-column-gap: 3.16vw;         -moz-column-gap: 3.16vw;         column-gap: 3.16vw;         display: grid;         grid-template-columns: 1fr 2fr;         text-align: left!important       }       .dcf-table-responsive.dcf-table-bordered, .dcf-table-responsive.dcf-table-bordered thead th {         border-width: 0       }       .dcf-table-responsive.dcf-table-bordered tbody td {         border-top-width: 0       }       .dcf-table-responsive:not(.dcf-table-bordered) tbody tr {         padding-bottom: .75em       }       .dcf-table-responsive:not(.dcf-table-bordered) tbody td {         padding-bottom: 0       }       .dcf-table-responsive:not(.dcf-table-bordered):not(.dcf-table-striped) tbody td {         padding-right: 0       }       .dcf-table-responsive.dcf-table-bordered tbody tr:last-child td:last-child {         border-bottom-width: 0       }       .dcf-table-responsive tbody td:before {         content: attr(data-label);         float: left;         font-weight: 700;         padding-right: 1.78em       }     }  .dcf-overflow-x-auto {       overflow-x: auto!important;       -webkit-overflow-scrolling: touch     }   Pallet Error Documentation System (0) InvalidSpecName (0) The name of specification does not match between the current runtime and the new runtime. SpecVersionNeedsToIncrease (1) The specification version is not allowed to decrease between the current runtime and the new runtime. FailedToExtractRuntimeVersion (2) Failed to extract the runtime version from the new runtime. Either calling\u00a0Core_version\u00a0or decoding\u00a0RuntimeVersion\u00a0failed. NonDefaultComposite (3) Suicide called when the account has non-default composite data. NonZeroRefCount (4) There is a non-zero reference count preventing the account from being purged. Scheduler (1) FailedToSchedule (0) Failed to schedule a call NotFound (1) Cannot find the scheduled call. TargetBlockNumberInPast (2) Given target block number is in the past. RescheduleNoChange (3) Reschedule failed because it does not change scheduled time. Balances (5) VestingBalance (0) Vesting balance too high to send value LiquidityRestrictions (1) Account liquidity restrictions prevent withdrawal Overflow (2) Got an overflow after adding InsufficientBalance (3) Balance too low to send value ExistentialDeposit (4) Value too low to create account due to existential deposit KeepAlive (5) Transfer/payment would kill account ExistingVestingSchedule (6) A vesting schedule already exists for this account DeadAccount (7) Beneficiary account must pre-exist Authorship (6) InvalidUncleParent (0) The uncle parent not in the chain. UnclesAlreadySet (1) Uncles already set in the block. TooManyUncles (2) Too many uncles. GenesisUncle (3) The uncle is genesis. TooHighUncle (4) The uncle is too high in chain. UncleAlreadyIncluded (5) The uncle is already included. OldUncle (6) The uncle isn't recent enough to be included. Staking (7) NotController (0) Not a controller account. NotStash (1) Not a stash account. AlreadyBonded (2) Stash is already bonded. AlreadyPaired (3) Controller is already paired. EmptyTargets (4) Targets cannot be empty. DuplicateIndex (5) Duplicate index. InvalidSlashIndex (6) Slash record index out of bounds. InsufficientValue (7) Can not bond with value less than minimum balance. NoMoreChunks (8) Can not schedule more unlock chunks. NoUnlockChunk (9) Can not rebond without unlocking chunks. FundedTarget (10) Attempting to target a stash that still has funds. InvalidEraToReward (11) Invalid era to reward. InvalidNumberOfNominations (12) Invalid number of nominations. NotSortedAndUnique (13) Items are not sorted and unique. AlreadyClaimed (14) Rewards for this era have already been claimed for this validator. OffchainElectionEarlySubmission (15) The submitted result is received out of the open window. OffchainElectionWeakSubmission (16) The submitted result is not as good as the one stored on chain. SnapshotUnavailable (17) The snapshot data of the current window is missing. OffchainElectionBogusWinnerCount (18) Incorrect number of winners were presented. OffchainElectionBogusWinner (19) One of the submitted winners is not an active candidate on chain (index is out of range in snapshot). OffchainElectionBogusCompact (20) Error while building the assignment type from the compact. This can happen if an index is invalid, or if the weights\u00a0overflow. OffchainElectionBogusNominator (21) One of the submitted nominators is not an active nominator on chain. OffchainElectionBogusNomination (22) One of the submitted nominators has an edge to which they have not voted on chain. OffchainElectionSlashedNomination (23) One of the submitted nominators has an edge which is submitted before the last non-zero slash of the target. OffchainElectionBogusSelfVote (24) A self vote must only be originated from a validator to ONLY themselves. OffchainElectionBogusEdge (25) The submitted result has unknown edges that are not among the presented winners. OffchainElectionBogusScore (26) The claimed score does not match with the one computed from the data. OffchainElectionBogusElectionSize (27) The election size is invalid. CallNotAllowed (28) The call is not allowed at the given time due to restrictions of election period. IncorrectHistoryDepth (29) Incorrect previous history depth input provided. IncorrectSlashingSpans (30) Incorrect number of slashing spans provided. Session (9) InvalidProof (0) Invalid ownership proof. NoAssociatedValidatorId (1) No associated validator ID for account. DuplicatedKey (2) Registered duplicate key. NoKeys (3) No keys are associated with this account. Grandpa (11) PauseFailed (0) Attempt to signal GRANDPA pause when the authority set isn't live (either paused or already pending pause). ResumeFailed (1) Attempt to signal GRANDPA resume when the authority set isn't paused (either live or already pending resume). ChangePending (2) Attempt to signal GRANDPA change with one already pending. TooSoon (3) Cannot signal forced change so soon after last. InvalidKeyOwnershipProof (4) A key ownership proof provided as part of an equivocation report is invalid. InvalidEquivocationProof (5) An equivocation proof provided as part of an equivocation report is invalid. DuplicateOffenceReport (6) A given equivocation report is valid but already previously reported. ImOnline (12) InvalidKey (0) Non existent public key. DuplicatedHeartbeat (1) Duplicated heartbeat. Democracy (14) ValueLow (0) Value too low ProposalMissing (1) Proposal does not exist BadIndex (2) Unknown index AlreadyCanceled (3) Cannot cancel the same proposal twice DuplicateProposal (4) Proposal already made ProposalBlacklisted (5) Proposal still blacklisted NotSimpleMajority (6) Next external proposal not simple majority InvalidHash (7) Invalid hash NoProposal (8) No external proposal AlreadyVetoed (9) Identity may not veto a proposal twice NotDelegated (10) Not delegated DuplicatePreimage (11) Preimage already noted NotImminent (12) Not imminent TooEarly (13) Too early Imminent (14) Imminent PreimageMissing (15) Preimage not found ReferendumInvalid (16) Vote given for invalid referendum PreimageInvalid (17) Invalid preimage NoneWaiting (18) No proposals waiting NotLocked (19) The target account does not have a lock. NotExpired (20) The lock on the account to be unlocked has not yet expired. NotVoter (21) The given account did not vote on the referendum. NoPermission (22) The actor has no permission to conduct the action. AlreadyDelegating (23) The account is already delegating. Overflow (24) An unexpected integer overflow occurred. Underflow (25) An unexpected integer underflow occurred. InsufficientFunds (26) Too high a balance was provided that the account cannot afford. NotDelegating (27) The account is not currently delegating. VotesExist (28) The account currently has votes attached to it and the operation cannot succeed until these are removed, either through\u00a0unvote\u00a0or\u00a0reap_vote. InstantNotAllowed (29) The instant referendum origin is currently disallowed. Nonsense (30) Delegation to oneself makes no sense. WrongUpperBound (31) Invalid upper bound. MaxVotesReached (32) Maximum number of votes reached. InvalidWitness (33) The provided witness data is wrong. TooManyProposals (34) Maximum number of proposals reached. Council (15) NotMember (0) Account is not a member DuplicateProposal (1) Duplicate proposals not allowed ProposalMissing (2) Proposal must exist WrongIndex (3) Mismatched index DuplicateVote (4) Duplicate vote ignored AlreadyInitialized (5) Members are already initialized! TooEarly (6) The close call was made too early, before the end of the voting. TooManyProposals (7) There can only be a maximum of\u00a0MaxProposals\u00a0active proposals. WrongProposalWeight (8) The given weight bound for the proposal was too low. WrongProposalLength (9) The given length bound for the proposal was too low. TechnicalCommittee (16) NotMember (0) Account is not a member DuplicateProposal (1) Duplicate proposals not allowed ProposalMissing (2) Proposal must exist WrongIndex (3) Mismatched index DuplicateVote (4) Duplicate vote ignored AlreadyInitialized (5) Members are already initialized! TooEarly (6) The close call was made too early, before the end of the voting. TooManyProposals (7) There can only be a maximum of\u00a0MaxProposals\u00a0active proposals. WrongProposalWeight (8) The given weight bound for the proposal was too low. WrongProposalLength (9) The given length bound for the proposal was too low. ElectionsPhragmen (17) UnableToVote (0) Cannot vote when no candidates or members exist. NoVotes (1) Must vote for at least one candidate. TooManyVotes (2) Cannot vote more than candidates. MaximumVotesExceeded (3) Cannot vote more than maximum allowed. LowBalance (4) Cannot vote with stake less than minimum balance. UnableToPayBond (5) Voter can not pay voting bond. MustBeVoter (6) Must be a voter. ReportSelf (7) Cannot report self. DuplicatedCandidate (8) Duplicated candidate submission. MemberSubmit (9) Member cannot re-submit candidacy. RunnerSubmit (10) Runner cannot re-submit candidacy. InsufficientCandidateFunds (11) Candidate does not have enough funds. NotMember (12) Not a member. InvalidCandidateCount (13) The provided count of number of candidates is incorrect. InvalidVoteCount (14) The provided count of number of votes is incorrect. InvalidRenouncing (15) The renouncing origin presented a wrong\u00a0Renouncing\u00a0parameter. InvalidReplacement (16) Prediction regarding replacement after member removal is wrong. Treasury (19) InsufficientProposersBalance (0) Proposer's balance is too low. InvalidIndex (1) No proposal or bounty at that index. ReasonTooBig (2) The reason given is just too big. AlreadyKnown (3) The tip was already found/started. UnknownTip (4) The tip hash is unknown. NotFinder (5) The account attempting to retract the tip is not the finder of the tip. StillOpen (6) The tip cannot be claimed/closed because there are not enough tippers yet. Premature (7) The tip cannot be claimed/closed because it's still in the countdown period. UnexpectedStatus (8) The bounty status is unexpected. RequireCurator (9) Require bounty curator. InvalidValue (10) Invalid bounty value. InvalidFee (11) Invalid bounty fee. PendingPayout (12) A bounty payout is pending. To cancel the bounty, you must unassign and slash the curator. Claims (24) InvalidEthereumSignature (0) Invalid Ethereum signature. SignerHasNoClaim (1) Ethereum address has no claim. SenderHasNoClaim (2) Account ID sending tx has no claim. PotUnderflow (3) There's not enough in the pot to pay out some unvested amount. Generally implies a logic error. InvalidStatement (4) A needed statement was not included. VestedBalanceExists (5) The account already has a vested balance. Vesting (25) NotVesting (0) The account given is not vesting. ExistingVestingSchedule (1) An existing vesting schedule already exists for this account that cannot be clobbered. AmountLow (2) Amount being transferred is too low to create a vesting schedule. Identity (28) TooManySubAccounts (0) Too many subs-accounts. NotFound (1) Account isn't found. NotNamed (2) Account isn't named. EmptyIndex (3) Empty index. FeeChanged (4) Fee is changed. NoIdentity (5) No identity found. StickyJudgement (6) Sticky judgement. JudgementGiven (7) Judgement given. InvalidJudgement (8) Invalid judgement. InvalidIndex (9) The index is invalid. InvalidTarget (10) The target is invalid. TooManyFields (11) Too many additional fields. TooManyRegistrars (12) Maximum amount of registrars reached. Cannot add any more. AlreadyClaimed (13) Account ID is already named. NotSub (14) Sender is not a sub-account. NotOwned (15) Sub-account isn't owned by sender. Proxy (29) TooMany (0) There are too many proxies registered or too many announcements pending. NotFound (1) Proxy registration not found. NotProxy (2) Sender is not a proxy of the account to be proxied. Unproxyable (3) A call which is incompatible with the proxy type's filter was attempted. Duplicate (4) Account is already a proxy. NoPermission (5) Call may not be made by proxy because it may escalate its privileges. Unannounced (6) Announcement, if made at all, was made too recently. Multisig (30) MinimumThreshold (0) Threshold must be 2 or greater. AlreadyApproved (1) Call is already approved by this signatory. NoApprovalsNeeded (2) Call doesn't need any (more) approvals. TooFewSignatories (3) There are too few signatories in the list. TooManySignatories (4) There are too many signatories in the list. SignatoriesOutOfOrder (5) The signatories were provided out of order; they should be ordered. SenderInSignatories (6) The sender was contained in the other signatories; it shouldn't be. NotFound (7) Multisig operation not found when attempting to cancel. NotOwner (8) Only the account that originally created the multisig is able to cancel it. NoTimepoint (9) No timepoint was given, yet the multisig operation is already underway. WrongTimepoint (10) A different timepoint was given to the multisig operation that is underway. UnexpectedTimepoint (11) A timepoint was given, yet no multisig operation is underway. WeightTooLow (12) The maximum weight information provided was too low. AlreadyStored (13) The data to be stored is already stored. <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"troubleshooting/02-Glossary/","title":"Glossary","text":""},{"location":"troubleshooting/02-Glossary/#active-nomination","title":"Active Nomination","text":"<p>A validator (or validators) that a nominator has selected to nominate and is actively validating this era. The nominator is placing their stake behind this validator for this era and will potentially receive staking rewards in return for doing so.</p>"},{"location":"troubleshooting/02-Glossary/#authority","title":"Authority","text":"<p>An authority is a generic term for the role in a blockchain that can participate in the consensus mechanisms. In GRANDPA, the authorities vote on chains they consider final. In BABE, the authorities are block producers. Authority sets can be chosen to be mechanisms such as Polkadot's NPoS algorithm.</p>"},{"location":"troubleshooting/02-Glossary/#babe","title":"BABE","text":"<p>Blind Assignment of Block Extension (BABE) is Kusari/SwapDEX's block production mechanism.</p>"},{"location":"troubleshooting/02-Glossary/#block","title":"Block","text":"<p>A collection of data, such as transactions, that together indicate a state transition of the blockchain.</p>"},{"location":"troubleshooting/02-Glossary/#block-explorer","title":"Block Explorer","text":"<p>An application that allows a user to explore the different blocks on a blockchain.</p>"},{"location":"troubleshooting/02-Glossary/#blocks-nominations","title":"Blocks Nominations","text":"<p>This indicates that a validator does not currently allow any more nominations. This is controlled by the validator.</p>"},{"location":"troubleshooting/02-Glossary/#bonding","title":"Bonding","text":"<p>A process by which coins/tokens can be \"frozen\" in exchange for some other benefit. For example, staking is a form of bonding for which you receive rewards in exchange for securing the network.</p>"},{"location":"troubleshooting/02-Glossary/#bounty","title":"Bounty","text":"<p>A mechanism which works in some sense as the reverse of a Treasury Proposal, allowing the Kusari/SwapDEX Council to indicate that there is a need to do some task for the Kusari/SwapDEX network and allowing users to receive KSI/SDX in return for working on that task.</p>"},{"location":"troubleshooting/02-Glossary/#bridge","title":"Bridge","text":"<p>A bridge is a piece of software that aims to increase interoperability between different blockchains. A bridge lets users convert their crypto assets into wrapped tokens of a destination chain.</p>"},{"location":"troubleshooting/02-Glossary/#capacity","title":"Capacity","text":"<p>The maximum number of nominators signalling intent to nominate a validator (and thus could potentially actively nominate that validator in the next session). This maximum number will equal the number of nominators necessary to oversubscribe a validator. Any validator which is \"at capacity\" or higher may potentially be oversubscribed in the next session; a validator that is not at capacity cannot be oversubscribed unless more nominators select it before the next election.</p>"},{"location":"troubleshooting/02-Glossary/#commission","title":"Commission","text":"<p>Validators and nominators get paid from block production on the network, where validators can set a variable commission rate, which is initially subtracted from the total rewards that validator is entitled to (for that period), where the commission determines the rate of distribution for the remaining rewards set out for the nominators that are backing that validator.</p>"},{"location":"troubleshooting/02-Glossary/#community-queue","title":"Community Queue","text":"<p>The queue for proposals originating from individual accounts (i.e. not the Council) which are waiting to become referenda. Compare the External queue.</p>"},{"location":"troubleshooting/02-Glossary/#consensus","title":"Consensus","text":"<p>The process of a group of entities to agree on a particular data value (such as the ordering and makeup of blocks on a blockchain). There are a variety of algorithms used for determining consensus. The consensus algorithm used by Kusari/SwapDEX is BABE and GRANDPA.</p>"},{"location":"troubleshooting/02-Glossary/#curator","title":"Curator","text":"<p>A person, group, or other entity charged with judging and verifying the successful completion of a Bounty.</p>"},{"location":"troubleshooting/02-Glossary/#dapps","title":"Dapps","text":"<p>A generic term for a decentralized application, that is, one that runs as part of a distributed network as opposed to being run on a specific system or set of systems.</p>"},{"location":"troubleshooting/02-Glossary/#epoch","title":"Epoch","text":"<p>An epoch is a time duration in the BABE protocol that is broken into smaller time slots. Each slot has at least one slot leader who has the right to propose a block.</p>"},{"location":"troubleshooting/02-Glossary/#era","title":"Era","text":"<p>A (whole) number of sessions, which is the period that the validator set (and each validator's active nominator set) is recalculated and where rewards are paid out.</p>"},{"location":"troubleshooting/02-Glossary/#equivocation","title":"Equivocation","text":"<p>Providing conflicting information to the network. BABE equivocation entails creating multiple blocks in the same slot. GRANDPA equivocation would consist of signing multiple conflicting chains.</p>"},{"location":"troubleshooting/02-Glossary/#external-queue","title":"External Queue","text":"<p>The queue for proposals originating with the Kusari/SwapDEX Council which are waiting to become referenda. Compare the Community queue.</p>"},{"location":"troubleshooting/02-Glossary/#extrinsic","title":"Extrinsic","text":"<p>State changes that come from the outside world, i.e. they are not part of the system itself. Extrinsics can take two forms, \"inherents\" and \"transactions\".</p>"},{"location":"troubleshooting/02-Glossary/#finality","title":"Finality","text":"<p>The property of a block that cannot be reverted. Generally, created blocks are not final until some point in the future - perhaps never, in the case of \"probabilistic finality\". The Kusari and SwapDEX Chain uses a deterministic finality gadget known as GRANDPA.</p>"},{"location":"troubleshooting/02-Glossary/#finality-gadget","title":"Finality Gadget","text":"<p>A mechanism that determines finality.</p>"},{"location":"troubleshooting/02-Glossary/#frame","title":"Frame","text":"<p>The collection of Substrate-provided pallets (Substrate Runtime Modules).</p>"},{"location":"troubleshooting/02-Glossary/#genesis","title":"Genesis","text":"<p>The origin of a blockchain, also known as block 0. It can also be used to reference the initial state of the blockchain at origination.</p>"},{"location":"troubleshooting/02-Glossary/#governance","title":"Governance","text":"<p>The process of determining what changes to the network are permissible, such as modifications to code or movement of funds. The governance system in Kusari/SwapDEX is on-chain and revolves around stakeholder voting.</p>"},{"location":"troubleshooting/02-Glossary/#governance-council","title":"Governance Council","text":"<p>An on-chain entity that consists of several on-chain accounts (starting at 6, eventually moving to the final value of 24). The Council can act as a representative for \"passive\" (non-voting) stakeholders. Council members have two main tasks: proposing referenda for the overall stakeholder group to vote on and cancelling malicious referenda.</p>"},{"location":"troubleshooting/02-Glossary/#grandpa-finality-gadget","title":"GRANDPA Finality Gadget","text":"<p>GHOST-based Recursive ANcestor Deriving Prefix Agreement. It is the finality gadget for Kusari and SwapDEX, which allows asynchronous, accountable, and safe finality to the blockchain. For an overview of GRANDPA, see this Medium post.</p>"},{"location":"troubleshooting/02-Glossary/#hard-fork","title":"Hard Fork","text":"<p>A permanent diversion of a blockchain occurs quickly due to a high priority change in a consensus rule. Clients who follow a hard fork always need to upgrade their clients to continue following the upgraded chain. Hard forks are considered permanent divergences of a chain for which non-upgraded clients are following consensus rules incompatible to the ones followed by upgraded clients.</p>"},{"location":"troubleshooting/02-Glossary/#inactive-nomination","title":"Inactive Nomination","text":"<p>A validator (or validators) that a nominator has selected to nominate, but is not actively validating this era. This type of nomination may become active in a future era.</p>"},{"location":"troubleshooting/02-Glossary/#inherent","title":"Inherent","text":"<p>Extrinsics that are \"inherently true.\" Inherents are not gossiped on the network and are put into blocks by the block author. They are not provably true the way that the desire to send funds is, therefore they do not carry a signature. A blockchain's runtime must have rules for validating inherents. For example, timestamps are inherents. They are validated by being within some margin that each validator deems reasonable.</p>"},{"location":"troubleshooting/02-Glossary/#injected-account","title":"Injected Account","text":"<p>An account that is not directly managed by the Substrate Explorer UI but can be accessed through it, such as accounts controlled by the Polkadot{.js} extension.</p>"},{"location":"troubleshooting/02-Glossary/#interoperability","title":"Interoperability","text":"<p>The ability for some sort of system to exchange and make use of information often compared to \"cross-chain\" technologies.</p>"},{"location":"troubleshooting/02-Glossary/#keep-alive-check","title":"Keep-Alive Check","text":"<p>The keep-alive check is used to indicate whether or not a transfer can allow the sending account to be reduced to less than the existential deposit, causing it to be reaped.</p>"},{"location":"troubleshooting/02-Glossary/#ksi","title":"KSI","text":"<p>The abbreviation for Kusari network coins.</p>"},{"location":"troubleshooting/02-Glossary/#kusari","title":"Kusari","text":"<p>The \"canary network\" for SwapDEX. It consists of an early-release, unaudited version of the SwapDEX software. It is not a testnet - after the transition to NPoS, the network is entirely in the hands of the community (i.e., Kusari coin holders).</p>"},{"location":"troubleshooting/02-Glossary/#libp2p","title":"LIBP2P","text":"<p>An open-source library for encrypted peer-to-peer communications and other networking functions. More information at: https://libp2p.io/</p>"},{"location":"troubleshooting/02-Glossary/#liveness","title":"Liveness","text":"<p>The property of a distributed system is that it will eventually come to some sort of consensus. A system stuck in an infinite loop would not be considered live, even if computations are taking place; a system that eventually provides a result, even if incorrect or it takes a long time, is considered to have liveness.</p>"},{"location":"troubleshooting/02-Glossary/#mainnet","title":"Mainnet","text":"<p>Short for \"main network\": the fully functional and acting chain that runs its own network.</p>"},{"location":"troubleshooting/02-Glossary/#metadata","title":"Metadata","text":"<p>Data that includes information about other data, such as information about a specific transaction.</p>"},{"location":"troubleshooting/02-Glossary/#next-session","title":"Next Session","text":"<p>This indicates that the validator will be a member of the active set in the next session.</p>"},{"location":"troubleshooting/02-Glossary/#node-explorer","title":"Node Explorer","text":"<p>A tool that gives you information about a node, such as the latest blocks sealed, finalized, and the current chain state as known by that node.</p>"},{"location":"troubleshooting/02-Glossary/#nominated-proof-of-stake-npos","title":"Nominated Proof of Stake (NPoS)","text":"<p>A Proof-of-Stake system where nominators back validators with their own stake as a show of faith in the good behavior of the validator. Nominated Proof-of-Stake differs from the more generic concept Delegated Proof-of-Stake in that nominators are subject to loss of stake if they nominate a bad validator; delegators are not subject to loss of stake based on the behavior of the validator. Note that some other blockchain technologies may use the term Delegated Proof-of-Stake, even if delegators can be slashed. Kusari/SwapDEX uses the Phragm\u00e9n method to allocate stake to nominees.</p>"},{"location":"troubleshooting/02-Glossary/#nominator","title":"Nominator","text":"<p>Accounts that select a set of validators to nominate by bonding their coins. Nominators receive some of the validators' rewards, but are also liable for slashing if their nominated validators misbehave.</p>"},{"location":"troubleshooting/02-Glossary/#non-fungible-token-nft","title":"Non-fungible Token (NFT)","text":"<p>A non-fungible token is a token that does not hold the property of fungibility, which, in turn, means that it cannot be interchangeable and indistinguishable from other tokens. NFTs allow the tokenization of unique items and provide exclusive ownership for those tokens.</p>"},{"location":"troubleshooting/02-Glossary/#on-chain-governance","title":"On-chain Governance","text":"<p>A governance system of a blockchain that is controlled by mechanisms on the blockchain. On-chain governance allows decisions to be made transparently. Note that there are a variety of different algorithms for making these decisions, such as simple majority voting, adaptive quorum biasing, or identity-based quadratic voting.</p>"},{"location":"troubleshooting/02-Glossary/#online-message","title":"Online Message","text":"<p>This is a message that is broadcast by a validator to verify to the network that the validator is online, even if they haven't published a block this epoch. This is sometimes referred to as \"ImOnline\" or \"Heartbeat Signal\".</p>"},{"location":"troubleshooting/02-Glossary/#origin","title":"Origin","text":"<p>The initiator of an extrinsic. A simple origin would be the account that is sending coins to another account. Substrate also supports more complex origin types, such as the root origin, from which privileged functions can be called.</p>"},{"location":"troubleshooting/02-Glossary/#oversubscribed","title":"Oversubscribed","text":"<p>If more than the maximum number of nominators nominate the same validator, it is \"oversubscribed\", and only the top staked nominators (ranked by the amount of stake, up to the maximum number of nominators) are paid rewards. Other nominators will receive no rewards for that era. The current maximum number of nominators is 256 on Kusari and SwapDEX, but it can be modified via governance.</p>"},{"location":"troubleshooting/02-Glossary/#pallet","title":"Pallet","text":"<p>A Substrate runtime module.</p>"},{"location":"troubleshooting/02-Glossary/#parity-technologies","title":"Parity Technologies","text":"<p>A company, founded by Dr. Gavin Wood and Dr. Jutta Steiner, that is developing Substrate and Polkadot. It has also released several other projects including Parity Ethereum and Parity Secret Store.</p>"},{"location":"troubleshooting/02-Glossary/#proof-of-stake-pos","title":"Proof of Stake (PoS)","text":"<p>A method of selecting participation in a consensus system, in which participants are chosen based on how many coins/tokens they have at stake (at risk of loss due to misbehavior). Normally, Proof-of-Stake systems limit the number of participants.</p>"},{"location":"troubleshooting/02-Glossary/#proof-of-work-pow","title":"Proof of Work (PoW)","text":"<p>A method of selecting participants in a consensus system, typically the longest chain rule, in which participants try to solve a puzzle like finding a partial pre-image of a hash. Normally, a Proof-of-Work system can have any number of participants.</p>"},{"location":"troubleshooting/02-Glossary/#proposal","title":"Proposal","text":"<p>A potential function call to be voted on in a referendum. Proposals modify the behavior of the Kusari/SwapDEX network, from minor parameter tuning up to replacing the runtime code.</p>"},{"location":"troubleshooting/02-Glossary/#protocol","title":"Protocol","text":"<p>A system of rules that allows two or more entities of a communications system to transmit information. The protocol defines the rules, syntax, semantics, and synchronization of communication and possible recovery methods.f</p>"},{"location":"troubleshooting/02-Glossary/#random-seed","title":"Random Seed","text":"<p>A random seed is a pseudo-random number available on-chain. It is used in various places of the Kusari/SwapDEX protocol, most prominently in BABE the block production mechanism.</p>"},{"location":"troubleshooting/02-Glossary/#referendum","title":"Referendum","text":"<p>A vote on whether or not a proposal should be accepted by the network. Referenda may be initiated by the Governance Council, by a member of the public, or as the result of a previous proposal. Stakeholders vote on referenda, weighted by both the size of their stake (i.e. number of KSI/SDX held) and the amount of time they are willing to lock their coins.</p>"},{"location":"troubleshooting/02-Glossary/#re-genesis","title":"Re-Genesis","text":"<p>Re-Genesis is the process of exporting the current chain state, and creating a new chain that builds on it. Re-Genesis will involve stop-the-world migration, which results in a period of time when no actual blocks are added to the blockchain. In a way, re-genesis can be viewed as a hard fork process. A formal design of Re-Genesis on Substrate is still under development - Re-Genesis Rationale and Design.</p>"},{"location":"troubleshooting/02-Glossary/#runtime","title":"Runtime","text":"<p>The state transition function of a blockchain. It defines a valid algorithm for determining the state of the next block given the previous state.</p>"},{"location":"troubleshooting/02-Glossary/#runtime-module","title":"Runtime Module","text":"<p>A module that implements specific transition functions and features one might want to have in their runtime. Each module should have domain-specific logic. For example, a Balances module has logic to deal with accounts and balances. In Substrate, modules are called \"pallets\".</p>"},{"location":"troubleshooting/02-Glossary/#safety","title":"Safety","text":"<p>The property of a distributed system indicating that a particular state transition will not be reverted. GRANDPA provides deterministic safety. That is, for a state changed marked as \"safe\" or \"final\", one would require a hard fork to revert that change.</p>"},{"location":"troubleshooting/02-Glossary/#scalability","title":"Scalability","text":"<p>While an ambiguous concept, [blockchain] scalability can be understood as the ability for the network to scale in capabilities (e.g. processing more transactions) when needed.</p>"},{"location":"troubleshooting/02-Glossary/#sdx","title":"SDX","text":"<p>The native coin for SwapDEX. SDX serves three purposes: network governance (allowing them to vote on-chain upgrades and other exceptional events), general operation (rewarding good actors and punishing bad actors), and bonding.</p>"},{"location":"troubleshooting/02-Glossary/#sealing","title":"Sealing","text":"<p>The process of adding a block to the Chain. Note that finalization is a separate process - blocks are finalized sometime after they are sealed.</p>"},{"location":"troubleshooting/02-Glossary/#session","title":"Session","text":"<p>A session is a Substrate implementation term for a period that has a constant set of validators. Validators can only join or exit the validator set at a session change.</p>"},{"location":"troubleshooting/02-Glossary/#session-certificate","title":"Session Certificate","text":"<p>A message containing a signature on the concatenation of all the Session keys. Signed by the Controller.</p>"},{"location":"troubleshooting/02-Glossary/#session-key","title":"Session Key","text":"<p>Hot keys that are used for performing network operations by validators, for example, signing GRANDPA commit messages.</p>"},{"location":"troubleshooting/02-Glossary/#slashing","title":"Slashing","text":"<p>The removal of a percentage of an account's KSI/SDX as a punishment for a validator acting maliciously or incompetently (e.g., equivocating or remaining offline for an extended period).</p>"},{"location":"troubleshooting/02-Glossary/#soft-fork","title":"Soft Fork","text":"<p>A backward compatible change to client code causes upgraded clients to start mining a new chain. Requires a \"vote-by-hashrate\" of a majority of miners to enact successfully. Soft forks are considered temporary divergences in a chain since non-upgraded clients do not follow the new consensus rules but upgraded clients are still compatible with old consensus rules.</p>"},{"location":"troubleshooting/02-Glossary/#staking","title":"Staking","text":"<p>The act of bonding coins (for Kusari, KSI and for SwapDEX, SDX) by putting them up as \"collateral\" for a chance to produce a valid block (and thus obtain a block reward). Validators and nominators stake their KSI/SDX in order to secure the network.</p>"},{"location":"troubleshooting/02-Glossary/#state-transition-function","title":"State transition function","text":"<p>A function that describes how the state of a blockchain can be transformed. For example, it may describe how tokens can be transferred from one account to another.</p>"},{"location":"troubleshooting/02-Glossary/#substrate","title":"Substrate","text":"<p>A modular framework for building blockchains. Kusari and SwapDEX are built using Substrate. Chains built with Substrate will be easy to connect as parachains.</p>"},{"location":"troubleshooting/02-Glossary/#tabling","title":"Tabling","text":"<p>In Kusari/SwapDEX governance, bringing a proposal to a vote via referendum. Note that this is the British meaning of \"tabling\", which is different from the US version, which means \"to postpone\" a measure.</p>"},{"location":"troubleshooting/02-Glossary/#teleport","title":"Teleport","text":"<p>Send an asset from an account on one chain to an account on a different chain. This occurs by burning an amount on the sending chain and minting an equivalent amount on the destination chain.</p>"},{"location":"troubleshooting/02-Glossary/#testnet","title":"Testnet","text":"<p>Short for \"test network\": an experimental network where testing and development takes place. Networks are often executed on a testnet before they are deployed to a mainnet</p>"},{"location":"troubleshooting/02-Glossary/#tokenization","title":"Tokenization","text":"<p>The process of replacing sensitive data with non-sensitive data.</p>"},{"location":"troubleshooting/02-Glossary/#transfer","title":"Transfer","text":"<p>Send an asset from one account to another. This generally refers to transfers that occur only on the same chain.</p>"},{"location":"troubleshooting/02-Glossary/#transaction","title":"Transaction","text":"<p>An extrinsic that is signed. Transactions are gossiped on the network and incur a transaction fee. Transactions are \"provably true\", unlike inherents. For example, one can prove that Alice wants to send funds to Bob by the fact that she signed a transfer-funds message with her private key.</p>"},{"location":"troubleshooting/02-Glossary/#validator","title":"Validator","text":"<p>A node that secures the Chain by staking KSI/SDX.</p>"},{"location":"troubleshooting/02-Glossary/#voting","title":"Voting","text":"<p>The process of stakeholders determining whether or not a referendum should pass. Votes are weighted both by the number of KSI/SDX that the stakeholder account controls and the amount of time they are willing to lock their KSI/SDX.</p>"},{"location":"troubleshooting/02-Glossary/#waiting-nomination","title":"Waiting Nomination","text":"<p>The nominator has nominated this validator, but the validator was not elected into the active validator set this era and thus cannot produce blocks for the canonical chain. If the validator does get into the active set in a future era, this may turn into an active or inactive nomination.</p>"},{"location":"troubleshooting/02-Glossary/#wallet","title":"Wallet","text":"<p>A program that allows one to store private keys and sign transactions for Kusari/SwapDEX or other blockchain networks.</p>"},{"location":"troubleshooting/02-Glossary/#wasm","title":"Wasm","text":"<p>The abbreviation for WebAssembly.</p>"},{"location":"troubleshooting/02-Glossary/#web3-foundation","title":"Web3 Foundation","text":"<p>A Switzerland-based foundation that nurtures and stewards technologies and applications in the fields of decentralized web software protocols, particularly those that utilize modern cryptographic methods to safeguard decentralization, to the benefit and for the stability of the Web3 ecosystem.</p>"},{"location":"troubleshooting/02-Glossary/#webassembly","title":"WebAssembly","text":"<p>An instruction format for a virtual, stack-based machine. Polkadot Runtime Modules are compiled to WebAssembly. Also known as Wasm.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"validator-guides/account-generation/","title":"ACCOUNT GENERATION","text":"<p>To start interacting with SwapDEX, you need a wallet or account that enables you to send transactions, participate in the chain governance, run a validator or nominate to earn interest. </p> <p>The following guide will show you how easy setting up a SwapDEX account is and what exact steps you need to take. </p> <p>If you encounter any issues or problems, please feel free to reach out to us on Discord.</p> <p>Before we start, let's get some terms right, and let's spend a couple of seconds talking about the concept of keys.</p> <p>A standard wallet or account is composed out of two keys:</p> <ul> <li>The PUBLIC KEY (Wallet address)</li> <li>The PRIVATE KEY (The key that allows you to access and manage your funds) </li> </ul> <p>Your SwapDEX account follows the same rules. Therefore, we will continue with a section on key security to make you aware that You must keep your PRIVATE KEY, SEED PHRASE, or JSON KEYSTORE file secret at all times. </p>"},{"location":"validator-guides/account-generation/#storing-your-key-safely","title":"Storing your key safely","text":"<p>The only ways to access your account are via your secret seed or your account's JSON file in combination with a password. It would be best if you kept them both secure and private. If you share them with anyone, they will have full access to your account, including all of your funds. This information is a target for hackers and others with bad intentions. </p> <p>In this guide, we recommend the Polkadot{.js} browser plug-in as the best method to create your SwapDEX account.</p> <p>Tip</p> <p> Polkadot{.js}  Browser Extension RECOMMENDED FOR MOST USERS </p> <p>The seed is your key to the account. Knowing the seed allows you to re-generate and control your account or anyone else who knows the seed.</p> <p>It is imperative to store the seed somewhere safe, secret, and secure. If you lose access to your account (i.e., forget the password for your account's JSON file), you can re-create it by entering the seed. This also means that somebody else can control your account if they have access to your seed.</p> <p>For maximum security, the seed should be written down on paper or another non-digital device and stored in a safe place. You may also want to protect your seed from physical damage (e.g., keeping it in a sealed plastic bag to prevent water damage, storing it in a fireproof safe, etching it in metal, etc.) We recommend that you keep multiple copies of the seed in geographically separate locations (e.g., one in your home safe and one in a safety deposit box at your bank).</p> <p>You should not store your seed on any kind of computer that has or may have access to the internet in the future.</p>"},{"location":"validator-guides/account-generation/#storing-your-accounts-json-file","title":"Storing your account's JSON file","text":"<p>The JSON file is encrypted with a password, which means you can import it into any wallet which supports JSON imports, but to then use it, you need the password. You don't have to be as careful with your JSON file's storage as you would with your seed (i.e. it can be on a USB drive near you), but remember that in this case, your account is only as secure as the password you used to encrypt it. Do not use easy to guess or hard to remember passwords. It is good practice to use a mnemonic password of four to five words. These are nearly impossible for computers to guess due to the number of combinations possible but much more manageable for humans to remember.</p>"},{"location":"validator-guides/account-generation/#polkadotjs-browser-extension","title":"Polkadot{.js} Browser Extension","text":"<p>Since Polkadot and SwapDEX share the same foundation, namely Substrate, the Polkadot{.js} browser extension is the recommended way to create your SwapDEX account.</p> <ul> <li>Polkadot{.js} Browser Extension for Chrome &amp; Brave </li> <li>Polkadot{.js} Browser Extension for Firefox </li> </ul> <p>The Polkadot{.js} browser extension provides a reasonable balance of security and usability. It's comparable to MetaMask for Ethereum. It provides a separate local mechanism to generate your address and interact with SwapDEX.</p> <p>So let's start installing the Polkadot{.js} plugin to enable you to interact with SwapDEX.</p>"},{"location":"validator-guides/account-generation/#create-an-account","title":"Create an Account","text":"<p>Open the Polkadot{.js} browser extension by clicking the logo on the top bar of your browser. You will see a browser popup, not unlike the one below.</p> <p></p> <p>Click the big plus button or select \"Create new account\" from the small plus icon in the top right. The Polkadot{.js} plugin will then use system randomness to make a new seed for you and display it to you in the form of twelve words.</p> <p></p> <p>You should back up these words as explained above. It is imperative to store the seed somewhere safe, secret, and secure. If you cannot access your account via Polkadot{.js} for some reason, you can re-enter your seed through the \"Add account menu\" by selecting \"Import account from pre-existing seed\".</p> <p></p>"},{"location":"validator-guides/account-generation/#name-your-account","title":"Name your Account","text":"<p>The account name is arbitrary and for your use only. It is not stored on the blockchain and will not be visible to other users who look at your address via a block explorer. If you're juggling multiple accounts, it helps to make this as descriptive and detailed as needed.</p>"},{"location":"validator-guides/account-generation/#enter-password","title":"Enter Password","text":"<p>You will use the password to encrypt this account's information. You will need to re-enter it when using the account for all outgoing transactions or sign a cryptographic message.</p> <p>Warning</p> <p>Note that this password does NOT protect your seed phrase. If someone knows the twelve words in your mnemonic seed, they still control your account even if they do not know the password.</p> <p>Success</p> <p>Congrats! You managed to create a SwapDEX-Substrate Account with the Polkadot{.js} browser extention.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"validator-guides/change-vps-provider/","title":"HOW TO CHANGE YOUR VPS PROVIDER","text":"<p>The need to change a VPS provider can occur out of many reasons.  Regardless why you decided to change your provider, this guide will show you how to perform all necessary steps in the correct order to not risk the staked SDX.</p> <p>We will perform the transition in 6 steps:</p> <ol> <li>Prepare the new VPS</li> <li>Generate new Session Keys on the new VPS</li> <li>Pair Validator Stash with new the VPS</li> <li>Waiting Period</li> <li>Shut down old VPS</li> </ol> <p>Warning</p> <ol> <li>Do not copy the Keystore folder of the old VPS to the new VPS!</li> <li>Do not use the same session key!</li> <li>Do not wipe your current VPS before you completed all steps in this guide.</li> </ol>"},{"location":"validator-guides/change-vps-provider/#step-1-prepare-new-vps","title":"Step 1 - Prepare new VPS","text":"<p>To enable a smooth transition bring your new VPS server to a fully synced state.  You can follow the Become a Validator guide to prepare your new VPS.  </p> <p>Once your new VPS is fully synced you can continue with the next steps.</p> <p>You can check the snyc status on the  Telemetry UI .</p> <p></p>"},{"location":"validator-guides/change-vps-provider/#step-2-generate-new-session-keys","title":"Step 2 - Generate New Session Keys","text":"<p>Login to your new and fully synced VPS.</p> <p>Execute the following command to fetch a new session key:</p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"author_rotateKeys\", \"params\":[]}' http://localhost:9933\n</code></pre> <p>Copy the session key. It will look like this:</p> <pre><code>0x13660593581b2e728ee32122636f8996c6fd9c22f33beaa05e2797899c5458b0c888149bf3c0b5ca7fb7296e69fefd85e4e3d5b76848db890207575e49031f37d846e78babf8051c123b498ffe6f12e712f97f6b2f3b54345ffe51145a16bb22187d415c2101b9883668ce93c46f7ba556b394c59781854737b6c941747c0964\n</code></pre>"},{"location":"validator-guides/change-vps-provider/#step-3-pairing-set-keys","title":"Step 3 - Pairing (Set Keys)","text":"<p>Head to the Substrate Portal (Chain UI) account actions tab <code>Network -&gt; Staking -&gt; Account Actions</code> or simply follow the aforementioned link. </p> <p>Here we want to pair our new VPS with the current validator stash. The session key from step two will become the link between our validator stash and our new VPS. Therefore, we must change the session keys for our validator stash. We do this by clicking on the menu (three dots) button displayed on the right end of our stash and then clicking the change session keys item.</p> <p></p> <p>Paste the session key generated in Step 2 into the respective field of the pop-up menu and click the Set Session Key button.</p> <p></p> <p>Hint</p> <p>Take a note of the era you are currently in </p>"},{"location":"validator-guides/change-vps-provider/#step-4-waiting-period","title":"Step 4 - Waiting Period","text":"<p>The <code>set_key</code> command does not have an immediate effect and requires two full eras to elapse before it does. If you do switch off your old VPS too early you may risk being chilled for the upcoming era. </p> <p>Example: If we clicked on the Set Session Key button halfway through era number 10 we must wait until era 10 elapses and two more eras passed by. Which means, we would be good to go in era 13.</p> <p>Read about the consequences of getting chilled here.</p> <p>Usually being chilled means your validator will be inactive and won't perform any payable actions during the upcoming era. But in case more than 10% of the network is getting chilled at the same time you might face penalties.</p>"},{"location":"validator-guides/change-vps-provider/#step-5-shutting-down-your-old-vps","title":"Step 5 - Shutting down your old VPS","text":"<p>When two full eras passed we can be sure that our new VPS has taken over, and we can safely shut down our old VPS.</p> <p>Success</p> <p>Alright mate! You are all set :D</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"validator-guides/node-monitoring/","title":"HOW TO VISUALIZE NODE METRICS","text":"<p>This guide will teach you how to use Prometheus and Grafana to implement a basic validator monitoring.  We can do this because every SwapDEX node exposes metrics such as the chain height, number of connected peers or the amount of memory used on a Prometheus metric endpoint. </p> <p>We will use  Prometheus to collect the data and  Grafana to visualize them on a nice looking dashboard.</p>"},{"location":"validator-guides/node-monitoring/#example-monitoring-architecture","title":"Example Monitoring Architecture","text":"<pre><code>+--------------+                  +-------------+                                                              +---------+\n| SwapDEX Node |                  | Prometheus  |                                                              | Grafana |\n+--------------+                  +-------------+                                                              +---------+\n      |               -----------------\\ |                                                                          |\n      |               | Every 1 minute |-|                                                                          |\n      |               |----------------| |                                                                          |\n      |                                  |                                                                          |\n      |        GET current metric values |                                                                          |\n      |&lt;---------------------------------|                                                                          |\n      |                                  |                                                                          |\n      | `substrate_peers_count 5`        |                                                                          |\n      |---------------------------------&gt;|                                                                          |\n      |                                  | --------------------------------------------------------------------\\    |\n      |                                  |-| Save metric value with corresponding time stamp in local database |    |\n      |                                  | |-------------------------------------------------------------------|    |\n      |                                  |                                         -------------------------------\\ |\n      |                                  |                                         | Every time user opens graphs |-|\n      |                                  |                                         |------------------------------| |\n      |                                  |                                                                          |\n      |                                  |       GET values of metric `substrate_peers_count` from time-X to time-Y |\n      |                                  |&lt;-------------------------------------------------------------------------|\n      |                                  |                                                                          |\n      |                                  | `substrate_peers_count (1582023828, 5), (1582023847, 4) [...]`           |\n      |                                  |-------------------------------------------------------------------------&gt;|\n      |                                  |                                                                          |\n</code></pre>"},{"location":"validator-guides/node-monitoring/#step-1-install-prometheus-and-grafana","title":"Step 1 - Install Prometheus and Grafana","text":"<p>To protect our node we will create a user for Prometheus but not allow Prometheus to log-in itself.  We will then create the directories required to store the Prometheus config and executable file and then change the ownership of these directories to the Prometheus user so that only Prometheus can access them.</p> <p>Create Prometheus User: <pre><code>sudo useradd --no-create-home --shell /usr/sbin/nologin prometheus\n</code></pre></p> <p>Create the directories required to store the configuration and executable files: <pre><code>sudo mkdir /etc/prometheus\nsudo mkdir /var/lib/prometheus\n</code></pre></p> <p>Change the ownership of these directories to <code>prometheus</code>: <pre><code>sudo chown -R prometheus:prometheus /etc/prometheus\nsudo chown -R prometheus:prometheus /var/lib/prometheus\n</code></pre></p>"},{"location":"validator-guides/node-monitoring/#install-and-configure-prometheus","title":"Install and Configure Prometheus","text":"<p>After setting up the environment, update your OS, and install the latest Prometheus. You can check the latest release by visiting their  downloads page.</p> <pre><code>sudo apt-get update &amp;&amp; apt-get upgrade\nwget https://github.com/prometheus/prometheus/releases/download/v2.33.5/prometheus-2.33.5.linux-amd64.tar.gz\ntar xfz prometheus-*.tar.gz\n</code></pre> <p>Let's inspect the unzipped file we downloaded by changing directories: <pre><code>cd prometheus-2.33.5.linux-amd64\n</code></pre></p> <p>The following two binaries are in the directory:</p> <ul> <li>prometheus -&gt; Prometheus main binary file</li> <li>promtool</li> </ul> <p>The following two directories (which contain the web interface, configuration files examples and the license) are in the directory:</p> <ul> <li>consoles</li> <li>console_libraries</li> </ul> <p>We want to copy the downloaded bin files and move it to our local folder for bin files <code>/usr/local/bin/</code></p> <pre><code>sudo cp ./prometheus /usr/local/bin/\nsudo cp ./promtool /usr/local/bin/\n</code></pre> <p>We also want to change the ownership of those file to our Prometheus user:</p> <pre><code>sudo chown prometheus:prometheus /usr/local/bin/prometheus\nsudo chown prometheus:prometheus /usr/local/bin/promtool\n</code></pre> <p>We also want to copy and move the <code>consoles</code> and <code>console_libraries</code> folders into our local folder <code>/etc/prometheus</code></p> <pre><code>sudo cp -r ./consoles /etc/prometheus\nsudo cp -r ./console_libraries /etc/prometheus\n</code></pre> <p>We again want to change the ownership to our Prometheus user:</p> <pre><code>sudo chown -R prometheus:prometheus /etc/prometheus/consoles\nsudo chown -R prometheus:prometheus /etc/prometheus/console_libraries\n</code></pre> <p>Success</p> <p>Now we successfully moved all folders and binaries of the downloaded folder into the correct local folders and changed their ownership to our Prometheus user.</p> <p>Now we can safely delete the downloaded folder: <pre><code>cd .. &amp;&amp; rm -rf prometheus*\n</code></pre></p>"},{"location":"validator-guides/node-monitoring/#configure-prometheus","title":"Configure Prometheus","text":"<p>Before Prometheus can be started, it needs some configuration. We will manage the configuration in a <code>.yml</code> file which we will create now:</p> <pre><code>sudo nano /etc/prometheus/prometheus.yml\n</code></pre> <p>The config file is divided into three parts:</p> <ol> <li><code>global</code></li> <li><code>rule_files</code></li> <li> <p><code>scrape_configs</code></p> </li> <li> <p><code>scrape_interval</code> defines how often Prometheus scrapes targets, while evaluation_interval controls how often the software will evaluate rules.</p> </li> <li><code>rule files</code> block contains information of the location of any rules we want the Prometheus server to load.</li> <li><code>scrape_configs</code> contains the information which resources Prometheus monitors.</li> </ol> <p>Configure the file as following:</p> <pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9090\"]\n  - job_name: \"SwapDEX_Node\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9615\"]\n</code></pre> <p>Note</p> <p>Prometheus can manage multiple jobs. We currently have two jobs (Prometheus and SwapDEX_Node) and both are listening on localhost ports.  You can also change the target address to an IP address of another node if you want to centralize all the data. </p> <p>With the above configuration file, the first exporter is the one that Prometheus exports to monitor itself. As we want to have more precise information about the state of the Prometheus server we reduced the scrape_interval to 5 seconds for this job. The parameters static_configs and targets determine where the exporters are running. The second exporter is capturing the data from our node, and the port by default is 9615.</p> <p>Let' check the validity of the configuration file by running </p> <pre><code>sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n</code></pre> <p>And let's change the ownership of the config file to our Prometheus user:</p> <pre><code>sudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n</code></pre>"},{"location":"validator-guides/node-monitoring/#start-prometheus","title":"Start Prometheus","text":"<p>Before we start Prometheus let's make sure that our firewall isn't blocking port 9090 <pre><code>ufw allow 9090\n</code></pre></p> <p>To test that Prometheus is set up properly we will execute a command to inspect the logs: Remember, we need to run this command as the Prometheus user due to the ownership of the files:</p> <pre><code>sudo -u prometheus /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries\n</code></pre> <p>We should see a message like this:</p> <pre><code>level=info ts=2021-04-16T19:02:20.167Z caller=main.go:380 msg=\"No time or size retention was set so using the default time retention\" duration=15d\nlevel=info ts=2021-04-16T19:02:20.167Z caller=main.go:418 msg=\"Starting Prometheus\" version=\"(version=2.26.0, branch=HEAD, revision=3cafc58827d1ebd1a67749f88be4218f0bab3d8d)\"\nlevel=info ts=2021-04-16T19:02:20.167Z caller=main.go:423 build_context=\"(go=go1.16.2, user=root@a67cafebe6d0, date=20210331-11:56:23)\"\nlevel=info ts=2021-04-16T19:02:20.167Z caller=main.go:424 host_details=\"(Linux 5.4.0-42-generic #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020 x86_64 ubuntu2004 (none))\"\nlevel=info ts=2021-04-16T19:02:20.167Z caller=main.go:425 fd_limits=\"(soft=1024, hard=1048576)\"\nlevel=info ts=2021-04-16T19:02:20.167Z caller=main.go:426 vm_limits=\"(soft=unlimited, hard=unlimited)\"\nlevel=info ts=2021-04-16T19:02:20.169Z caller=web.go:540 component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\nlevel=info ts=2021-04-16T19:02:20.170Z caller=main.go:795 msg=\"Starting TSDB ...\"\nlevel=info ts=2021-04-16T19:02:20.171Z caller=tls_config.go:191 component=web msg=\"TLS is disabled.\" http2=false\nlevel=info ts=2021-04-16T19:02:20.174Z caller=head.go:696 component=tsdb msg=\"Replaying on-disk memory mappable chunks if any\"\nlevel=info ts=2021-04-16T19:02:20.175Z caller=head.go:710 component=tsdb msg=\"On-disk memory mappable chunks replay completed\" duration=1.391446ms\nlevel=info ts=2021-04-16T19:02:20.175Z caller=head.go:716 component=tsdb msg=\"Replaying WAL, this may take a while\"\nlevel=info ts=2021-04-16T19:02:20.178Z caller=head.go:768 component=tsdb msg=\"WAL segment loaded\" segment=0 maxSegment=4\nlevel=info ts=2021-04-16T19:02:20.193Z caller=head.go:768 component=tsdb msg=\"WAL segment loaded\" segment=1 maxSegment=4\nlevel=info ts=2021-04-16T19:02:20.221Z caller=head.go:768 component=tsdb msg=\"WAL segment loaded\" segment=2 maxSegment=4\nlevel=info ts=2021-04-16T19:02:20.224Z caller=head.go:768 component=tsdb msg=\"WAL segment loaded\" segment=3 maxSegment=4\nlevel=info ts=2021-04-16T19:02:20.229Z caller=head.go:768 component=tsdb msg=\"WAL segment loaded\" segment=4 maxSegment=4\nlevel=info ts=2021-04-16T19:02:20.229Z caller=head.go:773 component=tsdb msg=\"WAL replay completed\" checkpoint_replay_duration=43.716\u00b5s wal_replay_duration=53.973285ms total_replay_duration=55.445308ms\nlevel=info ts=2021-04-16T19:02:20.233Z caller=main.go:815 fs_type=EXT4_SUPER_MAGIC\nlevel=info ts=2021-04-16T19:02:20.233Z caller=main.go:818 msg=\"TSDB started\"\nlevel=info ts=2021-04-16T19:02:20.233Z caller=main.go:944 msg=\"Loading configuration file\" filename=/etc/prometheus/prometheus.yml\nlevel=info ts=2021-04-16T19:02:20.234Z caller=main.go:975 msg=\"Completed loading of configuration file\" filename=/etc/prometheus/prometheus.yml totalDuration=824.115\u00b5s remote_storage=3.131\u00b5s web_handler=401ns query_engine=1.056\u00b5s scrape=236.454\u00b5s scrape_sd=45.432\u00b5s notify=723ns notify_sd=2.61\u00b5s rules=956ns\nlevel=info ts=2021-04-16T19:02:20.234Z caller=main.go:767 msg=\"Server is ready to receive web requests.\"\n</code></pre> <p>Now let's try to reach the graphical UI of our Prometheus server by opening the browser and opening the following URL:</p> <pre><code>http://SERVER_IP_ADDRESS:9090/graph\n</code></pre> <p></p> <p>We can also quickly verify if our SwapDEX node gets scraped by visiting the <code>Status-&gt; Targets</code> page.</p> <p></p> <p>If you can see it you can close the process on your VPS by hitting Ctrl+C</p> <p>Now that everything is running we want to automatically start the server during the boot process, so we have to create a new <code>systemd</code> configuration file with the following config:</p> <pre><code>sudo nano /etc/systemd/system/prometheus.service\n</code></pre> <pre><code>[Unit]\n  Description=Prometheus Monitoring\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=prometheus\n  Group=prometheus\n  Type=simple\n  ExecStart=/usr/local/bin/prometheus \\\n  --config.file /etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path /var/lib/prometheus/ \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --web.console.libraries=/etc/prometheus/console_libraries\n  ExecReload=/bin/kill -HUP $MAINPID\n\n[Install]\n  WantedBy=multi-user.target\n</code></pre> <p>After we saved the file, we want to reload <code>systemd</code> and enable the service so that it will be loaded automatically during the operating system's startup.</p> <pre><code>sudo systemctl daemon-reload &amp;&amp; systemctl enable prometheus &amp;&amp; systemctl start prometheus\n</code></pre> <p>Success</p> <p>Prometheus should be running now, and we should be able to access its front-end again by re-visiting <code>IP_ADDRESS:9090/</code>.</p>"},{"location":"validator-guides/node-monitoring/#step-2-install-node-exporter","title":"Step 2 - Install Node Exporter","text":"<p>Now we will install Prometheus's Node Exporter module which exposes hardware metrics like CPU load, RAM and storage usage.</p> <p>Create Node Exporter User <pre><code>sudo useradd --no-create-home --shell /usr/sbin/nologin node_exporter\n</code></pre> Create the directories required to store the configuration and executable files:</p> <pre><code>sudo mkdir /etc/node_exporter\nsudo mkdir /var/lib/node_exporter\n</code></pre> <p>Change the ownership of those files to our <code>Node_Exporter</code> user</p> <pre><code>sudo chown -R node_exporter:node_exporter /etc/node_exporter\nsudo chown -R prometheus:node_exporter /var/lib/node_exporter\n</code></pre> <p>Install the latest version of Node Exporter from  downloads page:</p> <pre><code>wget https://github.com/prometheus/node_exporter/releases/download/v1.3.1/node_exporter-1.3.1.linux-amd64.tar.gz\ntar xvfz node_exporter-*.*-amd64.tar.gz\n</code></pre> <p>Change directory into the downloaded file:  <pre><code>cd node_exporter-*.*-amd64\n</code></pre></p> <p>Let's copy the binary <code>node_exporter</code> to our local binary folder <code>/usr/local/bin/</code></p> <pre><code>sudo cp ./node_exporter /usr/local/bin/\n</code></pre> <p>Let's also change the ownership of the binary file: <pre><code>sudo chown node_exporter:node_exporter /usr/local/bin/node_exporter\n</code></pre></p> <p>Now we can delete the downloaded node_exporter folder: <pre><code>cd .. &amp;&amp; rm -rf node_exporter*\n</code></pre></p> <p>Since the <code>Node Exporter</code> will run on port 9100 we need to allow that port on our firewall</p> <pre><code>ufw allow 9100\n</code></pre> <p>Let's test-run the node_exporter:</p> <pre><code>cd /usr/local/bin\n./node_exporter\n</code></pre> <p>We can now observe the exposed metrics in our browser at:</p> <pre><code>http://SERVER_IP_ADDRESS:9100/metrics\n</code></pre> <p>After we confirmed that the <code>node_exporter</code> is running we can exit the process on our VPS by hitting Ctrl+C</p> <p>Now that everything is running we want to automatically start the <code>node_exporter</code> during the boot process, so we have to create a new <code>systemd</code> configuration file with the following config:</p> <pre><code>sudo nano /etc/systemd/system/node_exporter.service\n</code></pre> <pre><code>[Unit]\n  Description=Node Exporter Monitoring\n  Wants=network-online.target\n  After=network-online.target\n\n[Service]\n  User=node_exporter\n  Group=node_exporter\n  Type=simple\n  ExecStart=/usr/local/bin/node_exporter\n  ExecReload=/bin/kill -HUP $MAINPID\n\n[Install]\n  WantedBy=multi-user.target\n</code></pre> <p>After we saved the file, we want to reload <code>systemd</code> and enable the service so that it will be loaded automatically during the operating system's startup.</p> <pre><code>sudo systemctl daemon-reload &amp;&amp; systemctl enable node_exporter &amp;&amp; systemctl start node_exporter\n</code></pre> <p>Finally, we must tell our Prometheus server to scrape the metrics exposed by the <code>node_exporter</code>. We do this by configuring the <code>prometheus.yml</code> file we created earlier.</p> <pre><code>sudo nano /etc/prometheus/prometheus.yml\n</code></pre> <pre><code>global:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n\nscrape_configs:\n  - job_name: \"prometheus\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9090\"]\n  - job_name: \"SwapDEX_Node\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9615\"]\n  - job_name: \"Node_Exporter\"\n    scrape_interval: 5s\n    static_configs:\n      - targets: [\"localhost:9100\"]\n</code></pre> <p>Now we need to reboot the VPS:</p> <pre><code>reboot\n</code></pre> <p>After the reboot we can revisit our Prometheus server at:</p> <p><pre><code>http://SERVER_IP_ADDRESS/targets\n</code></pre> You should see the following in your browser:</p> <p></p>"},{"location":"validator-guides/node-monitoring/#step-3-install-alert-manager","title":"Step 3 - Install Alert Manager","text":"<p>In this section, let's configure the Alert Manager that notifies you if problems occour on your server. Alerts can be sent in Slack, Email, Matrix, or others. In this guide, we will configure an outage email alerting using Gmail.</p> <p>First, download the latest binary of Alert Manager and unzip it by running the command below:</p> <pre><code>wget https://github.com/prometheus/alertmanager/releases/download/v0.23.0/alertmanager-0.23.0.linux-amd64.tar.gz\ntar xvfz alertmanager-*.*-amd64.tar.gz\nmv alertmanager-*.*-amd64/alertmanager /usr/local/bin/\n</code></pre>"},{"location":"validator-guides/node-monitoring/#gmail-setup","title":"Gmail Setup","text":"<p>To allow Alert Manager to email you, you will need to generate something called an app password in your Gmail account. For details, click  here to follow the whole setup.</p> <p>Hint</p> <p>Copy or save your app password! We need it soon.</p>"},{"location":"validator-guides/node-monitoring/#alert-manager-configuration","title":"Alert Manager Configuration","text":"<p>We will now create a new folder for the Alert Manager's config file:</p> <pre><code>mkdir /etc/alertmanager\n</code></pre> <p>Now need to create a new configuration file called <code>alertmanager.yml</code> under <code>/etc/alertmanager</code></p> <p><pre><code>sudo nano /etc/alertmanager/alertmanager.yml\n</code></pre> and specify the file as follows:</p> <pre><code>global:\n resolve_timeout: 1m\n\nroute:\n receiver: 'gmail-notifications'\n\nreceivers:\n- name: 'gmail-notifications'\n  email_configs:\n  - to: YOUR_EMAIL\n    from: YOUR_EMAIL\n    smarthost: smtp.gmail.com:587\n    auth_username: YOUR_EMAIL\n    auth_identity: YOUR_EMAIL\n    auth_password: YOUR_APP_PASSWORD\n    send_resolved: true\n</code></pre> <p>Note</p> <p>With the above configuration, alerts will be sent using the email you set above. Remember to change YOUR_EMAIL to your email and paste the app password you just saved earlier to the <code>YOUR_APP_PASSWORD</code>.</p> <p>Now we change the ownership to our Prometheus user:</p> <p><pre><code>sudo chown -R prometheus:prometheus /etc/alertmanager\n</code></pre> Now let's open another port on our firewall for the Alert Manager:</p> <pre><code>ufw allow 9093\n</code></pre> <p>Next, we will create another <code>systemd</code> file to make sure that the alert manager will start every time the server reboots:</p> <pre><code>sudo nano /etc/systemd/system/alertmanager.service\n</code></pre> <pre><code>[Unit]\nDescription=AlertManager Server Service\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=root\nGroup=root\nType=simple\nExecStart=/usr/local/bin/alertmanager --config.file /etc/alertmanager/alertmanager.yml --web.external-url=http://SERVER_IP:9093 --cluster.advertise-address='0.0.0.0:9093'\n\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note</p> <p>SERVER_IP - Change it to your host IP address.</p> <p>Finally, we can start the Alert Manager with the following command: <pre><code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl enable alertmanager &amp;&amp; sudo systemctl start alertmanager &amp;&amp; sudo systemctl status alertmanager\n</code></pre></p> <p>Note</p> <p>You should see: Active: active (running)</p> <pre><code>Created symlink /etc/systemd/system/multi-user.target.wants/alertmanager.service \u2192 /etc/systemd/system/alertmanager.service.\n\u25cf alertmanager.service - AlertManager Server Service\n     Loaded: loaded (/etc/systemd/system/alertmanager.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sun 2022-03-13 22:17:12 UTC; 12ms ago\n   Main PID: 2484 (alertmanager)\n      Tasks: 4 (limit: 9457)\n     Memory: 948.0K\n        CPU: 10ms\n</code></pre> <p>Tip</p> <p>For now that's it, but we will need to install a Grafana Plug-In later in this process but let's first install Grafana. Hang on buddy we are done soon </p>"},{"location":"validator-guides/node-monitoring/#step-4-install-grafana","title":"Step 4 - Install Grafana","text":"<p>To visualize those metrics we will use Grafana. We run the following commands to install it:</p> <pre><code>sudo apt-get install -y adduser libfontconfig1\nwget https://dl.grafana.com/oss/release/grafana_8.4.3_amd64.deb\nsudo dpkg -i grafana_8.4.3_amd64.deb\n</code></pre> <p>Now we will configure Grafana to autostart as well</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable grafana-server\nsudo systemctl start grafana-server\n</code></pre> <pre><code>ufw allow 3000\n</code></pre> <p>Before we start to wire everything together, let's take care of the aforementioned alert manager plugin. It will help you to monitor the alert information. To install it, execute the command below:</p> <pre><code>sudo grafana-cli plugins install camptocamp-prometheus-alertmanager-datasource\n</code></pre> <p>and restart Grafana:</p> <pre><code>sudo systemctl restart grafana-server\n</code></pre> <p>Now we can access Grafana by going to <code>http://</code>SERVER_IP_ADDRESS:3000/login`. The default user and password is admin/admin.</p> <p>Note</p> <p>If you want to change the port on which Grafana runs (3000 is a popular port), edit the file <code>/usr/share/grafana/conf/defaults.ini</code> with a command like <code>sudo vim /usr/share/grafana/conf/defaults.ini</code> and change the <code>http_port</code> value to something else. Then restart grafana with <code>sudo systemctl restart grafana-server</code>.</p> <p></p> <p>Success</p> <p>We successfully installed and configured Prometheus, Node Exporter, Alert Manager and Grafana at this point </p>"},{"location":"validator-guides/node-monitoring/#lets-us-wire-it-all-together","title":"Let's us wire it all together","text":"<p>Now that everything is running we need to connect our Prometheus and alert manager data source to our Grafana server. We do this in the UI of Grafana by going to <code>Data Sources</code></p> <p></p> <p></p> <p></p> <p>The only thing we need to input is the URL that is <code>https://localhost:9090</code> and then click Save &amp; Test. If you see Data source is working, your connection is configured correctly.</p> <p></p> <p></p> <p>Success</p> <p>We connected our Prometheus database with Grafana!</p> <p>Now let's wire the Alert Manager similarly:</p> <p></p> <p></p>"},{"location":"validator-guides/node-monitoring/#lets-use-our-swapdex-template-dashboard","title":"Let's use our SwapDEX Template Dashboard","text":"<p>For this guide we will use a customized SwapDEX Dashboard to monitor our node, but you can always start to customize or create your own Dashboards. </p> <p></p> <p></p> <p>Tip</p> <p>You can get the import code here:  Grafana Labs.  May also consider to give it a review </p> <p></p> <p>Success</p> <p>There you go mate  </p> <p></p> <p> Written by Petar </p>"},{"location":"validator-guides/secure-validator/","title":"SECURE YOUR VALIDATOR","text":"<p>Validators in a Proof of Stake network are responsible for keeping the network in consensus and verifying state transitions. As the number of validators is limited, validators in the set are responsible for being online and faithfully executing their tasks.</p> <p>This primarily means that validators: - Must be highly available. - Must stay honest - Must have infrastructure that protects the validator's signing keys so that an attacker cannot take control and commit slashable behavior.</p>"},{"location":"validator-guides/secure-validator/#high-availability","title":"High Availability","text":"<p>A typical technique that promises high availability is to the setup multiple replicas of a node on different servers. The idea is if the active validator's server goes down, many exact copies are ready and can pick up the work with zero downtime. Although such a setup may seem attractive at first glance, they are dangerous if not set up perfectly. This is because all inactive nodes, waiting on the sideline, must potentially use the exact same session key to continue the exact same work of the failed active validator. However, you should always isolate the session keys used by you to just a single node. Replicating session keys across multiple nodes could lead to equivocation slashes. Those slashes can make you lose significant amounts of your staked funds.</p> <p>The good news is that 100% uptime of your validator is not needed, as it has some buffer within eras to go offline for a bit of while and upgrade. For this reason, we advise that you only attempt a high availability setup if you're confident you know exactly what you're doing.</p> <p>Many expert validators on other substrate based networks have made mistakes in the past due to bad handling of their session keys.</p> <p>Remember, even if your validator goes offline for some time, the offline slash is much more forgiving than the equivocation slash.</p> <p>Read more on slashes in the staking deep-dive.</p>"},{"location":"validator-guides/secure-validator/#key-management","title":"Key Management","text":"<p>The keys that are of primary concern for validator infrastructure are the Session keys. These keys sign messages related to consensus. Although Session keys are not account keys and therefore cannot transfer funds, an attacker could use them to commit slashable behavior.</p> <p>Session keys are generated inside the node via RPC call.</p> <p>Session keys should be generated and kept within your client. When you generate new Session keys, you must submit an extrinsic (a Session certificate) from your Controller key telling the chain your new Session keys.</p> <p>Note</p> <p>Session keys can also be generated outside the client and inserted into the client's keystore via RPC. For most users, we recommend using the key generation functionality within the client.</p>"},{"location":"validator-guides/secure-validator/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li> Telemetry UI  This tracks your node details including the version you are running, block height, CPU &amp; memory usage, block propagation time, etc.</li> <li>Prometheus-based monitoring stack, including Grafana for dashboards and log aggregation. It includes alerting, querying, visualization, and monitoring features and works for both cloud and on-premise systems. The data from substrate-telemetry can be made available to Prometheus through exporters like this.</li> </ul>"},{"location":"validator-guides/secure-validator/#linux-best-practices","title":"Linux Best Practices","text":"<ul> <li>Never use the root user.</li> <li>Always update the security patches for your OS.</li> <li>Enable and set up a firewall.</li> <li>Never allow password-based SSH, only use key-based access.</li> <li>Disable non-essential SSH subsystems (banner, motd, scp, X11 forwarding) and harden your SSH configuration ( reasonable guide to begin with ).</li> <li>Back up your storage regularly.</li> </ul>"},{"location":"validator-guides/secure-validator/#conclusions","title":"Conclusions","text":"<ul> <li> <p>Validators should only run the Kusari/SwapDEX binary, and they should not listen on any port other than the configured p2p port.</p> </li> <li> <p>Validators should run on bare-metal machines, as opposed to VMs. This will prevent some of the availability issues with cloud providers, along with potential attacks from other VMs on the same hardware. The provisioning of the validator machine should be automated and defined in code. This code should be kept in private version control, reviewed, audited, and tested.</p> </li> <li> <p>Session keys should be generated and provided in a secure way.</p> </li> <li> <p>Kusari/SwapDEX should be started at boot and restarted if stopped for any reason.</p> </li> <li> <p>Kusari/SwapDEX should run as a non-root user.</p> </li> </ul>"},{"location":"validator-guides/secure-validator/#recommended-reads","title":"Recommended Reads","text":"<ul> <li> Certus One's Knowledge Base </li> </ul> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"validator-guides/stop-validating/","title":"HOW TO STOP VALIDATING","text":"<p>Warning</p> <p>Work in progress .</p>"},{"location":"validator-guides/update-binaries/","title":"HOW TO UPDATE VALIDATOR BINARIES","text":"<p>The following guide will teach you how to conduct a binary update for your validator. Binary updates are rare SwapDEX but essential from time to time to ensure that your validator can participate in the consensus mechanism and is able to function properly.</p> <p>Learn more about the reasons behind this update in the following section.</p>"},{"location":"validator-guides/update-binaries/#why-is-this-update-needed-announcement","title":"Why is this update needed? (Announcement)","text":"<p>Quote</p> <p>The anticipated launch of Kazama Swap on our Network has made a significant step forward.</p> <p>Today we like to inform you that the dev teams have made fantastic progress in the background, testing, and innovating on the Kusari Network.</p> <p>One outcome of the rigorous testing on Kusari was a significant improvement in our blockchain's underlying technology, namely the p2p network communication layer. The dev teams managed to enhance the standard substrate module to unleash the full potential of Kazama Swap on our EVM.</p> <p>So what does this mean for you? Well, this improvement renders us even more unique than other projects that simply adapt the substrate framework, and for our validator community, there is now some action to do.</p> <p>Since the P2P network layer is not part of the runtime, it cannot be updated automatically, meaning you need to download and install a new binary. This is not a fork because the old binaries will still work. However, the moment we update the runtime forklessly, your validators will have trouble interfacing with the new p2p network technology and won't be able to author blocks. To address any potential concerns, they won't suffer any slash penalties if they are not updated, but they will need to be updated to continue to author blocks.</p> <p>We shall release step-by-step instructions on how to update your validators accordingly, but for now, we would like to take the time to appreciate the outstanding efforts of our partners and development team.</p>"},{"location":"validator-guides/update-binaries/#the-process","title":"The Process","text":"<p>Warning</p> <p>Make sure to update your OS to Ubuntu 21.10 since the new binaries are compiled for that Ubuntu version. You can follow our online guide to conduct the OS update. Other OS versions might work as well but are under your own risk.</p>"},{"location":"validator-guides/update-binaries/#step-1-pause-chill-your-validator","title":"Step 1 - Pause / Chill your Validator","text":"<p>Visit the substrate portal and navigate to the staking tab and select accounts.</p> <p>Click the Stop Button and sign the transaction accordingly. </p> <p>After the transaction was signed you should see the following validation screen. </p> <p>Success</p> <p>You successfully paused / chilled your validator and can proceed to step 2</p>"},{"location":"validator-guides/update-binaries/#step-2-purge-current-session-keys","title":"Step 2 - Purge current Session Keys","text":"<p>Navigate to the Developer Tab and select Extrinsic then select your controller account and the session pallet in the dropdown menu.</p> <p>The session pallet offers two extrinsics:</p> <ol> <li>PurgeKeys()</li> <li>SetKeys()</li> </ol> <p>Select PurgeKeys() and click hit Submit Transaction.</p> <p></p> <p>Success</p> <p>You successfully purged your current session keys and can proceed to step 3</p>"},{"location":"validator-guides/update-binaries/#step-3-execute-update-command-on-your-server","title":"Step 3 - Execute Update Command on your Server","text":"<p>Login to your server as root.</p> <p>Warning</p> <p>The following command will clean and delete the current binary and download and install a new but specific binary. If you are not sure about the version of your binary pls reach out to our validator community on Discord.</p> <pre><code> service swapdex stop &amp;&amp; wget https://download2.starkleytech.com/swapdex/swapdex_ubuntu_21_10-swapdex-polkadot-v0.9.18-bdfbeb9e-980 &amp;&amp; chmod 777 swapdex_ubuntu_21_10-swapdex-polkadot-v0.9.18-bdfbeb9e-980 &amp;&amp; mv swapdex_ubuntu_21_10-swapdex-polkadot-v0.9.18-bdfbeb9e-980 /usr/bin/swapdex -f &amp;&amp; runuser -l  swapdex -c 'swapdex purge-chain --chain swapdex -y'\n</code></pre> <p>Success</p> <p>You successfully deleted and cleared your old binary and installed the new binary</p>"},{"location":"validator-guides/update-binaries/#step-4-start-validator-service-on-your-server","title":"Step 4 - Start Validator Service on your Server","text":"<p>Execute the following command to start your validator and the sync process.</p> <pre><code>service swapdex start &amp;&amp; journalctl -f -u swapdex\n</code></pre> <p>Success</p> <p>You successfully started the new binary</p> <p>Since we cleared / purged the old binaries' data your validator need to download the full database / blocks again. This sync process should not take long thanks to the improvements in the P2P Network Layer.</p> <p>However, make sure to fully sync your validator before you restart your validator on the substrate portal. If your validator is not in sync, and you get elected to the active set you will miss opportunities to author blocks and might get chilled as a consequence.</p> <p>You can observe the progress either in the logs or on our telemetry UI :  Telemetry UI </p> <p>Success</p> <p>You successfully completed step 4</p>"},{"location":"validator-guides/update-binaries/#step-5-generate-new-session-keys","title":"Step 5 - Generate new Session Keys","text":"<p>Login to your VPS server.</p> <p>Session keys are needed to associate your node with your controller account. To generate the session keys you can run the following command in your terminal:</p> <p>Hint</p> <p>Hit Ctrl+C To exit the logs showing up on your server</p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"author_rotateKeys\", \"params\":[]}' http://localhost:9933\n</code></pre> <p>The output will have a hex-encoded \"result\" field. The result is the concatenation of the four public keys. Save this result for a later step. Copy the session key. It will look like this:</p> <pre><code>0x13660593581b2e728ee32122636f8996c6fd9c22f33beaa05e2797899c5458b0c888149bf3c0b5ca7fb7296e69fefd85e4e3d5b76848db890207575e49031f37d846e78babf8051c123b498ffe6f12e712f97f6b2f3b54345ffe51145a16bb22187d415c2101b9883668ce93c46f7ba556b394c59781854737b6c941747c0964\n</code></pre> <p>Success</p> <p>You successfully generated your new session keys</p>"},{"location":"validator-guides/update-binaries/#step-6-restart-validator-on-substrate-portal","title":"Step 6 - Restart Validator on Substrate Portal","text":"<p>Visit the substrate portal and navigate to the staking tab and select accounts.</p> <p>Click the Session Key button and enter your key from the previous step.</p> <p></p> <p>Finally, set Session Keys and sign the transaction and your validator should join the active set without any issues.</p> <p></p> <p>Finally, click validate and set your validator preferences. Keep in mind that some users may nominate you because of your commission settings, so it's recommended to keep the former commission settings or inform your nominators that you plan to change the percentage.</p> <p></p> <p></p> <p>Success</p> <p>You successfully finished the update process. Congrats mate!</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"validator-guides/validator-payout-overview/","title":"VALIDATOR PAYOUT OVERVIEW","text":""},{"location":"validator-guides/validator-payout-overview/#era-points","title":"Era Points","text":"<p>For every era (a period of time), validators are paid proportionally to the amount of era points they have collected.  Era points are reward points earned for payable actions like:</p> <ul> <li>producing a block in the Chain.</li> <li>producing a reference to a previously unreferenced uncle block.</li> <li>producing a referenced uncle block.</li> </ul> <p>Note</p> <p>An uncle block is a Chain block that is valid in every regard but fails to become canonical/standard. This can happen when two or more validators produce two different blocks nearly simultaneously. Both blocks are valid productions and could act as an accurate reference for the next block producer. However, the chain decides on a strain of blocks that carry the most weight. The block that was valid but was discarded from the canon is called an uncle block. Since uncles are proper productions, the creation of uncles is getting rewarded.</p> <p>Payments occur at the end of every era.</p>"},{"location":"validator-guides/validator-payout-overview/#payout-scheme","title":"Payout Scheme","text":"<p>No matter how much total stake is behind a validator, all validators split the block-authoring payout equally. However, the payout of a specific validator may differ based on era points, as described above. Although there is a probabilistic component to receiving era points, and they may be impacted slightly depending on factors such as network connectivity, well-behaving validators should generally average out to having similar era point totals over a large number of eras.</p> <p>Validators may also receive \"tips\" from senders as an incentive to include transactions in their produced blocks. Validators will receive 100% of these tips directly.</p> <p>Validators will receive staking rewards in the form of the native coins of that chain (KSI for Kusari and SDX for SwapDEX).</p> <p>For simplicity, the examples below will assume all validators have the same amount of era points, and received no tips.</p> <pre><code>Validator Set Size (v): 4\n\nACTIVE SET\nValidator 1 Stake (v1): 18 coins\nValidator 2 Stake (v2):  9 coins\nValidator 3 Stake (v3):  8 coins\nValidator 4 Stake (v4):  7 coins\n\nPAYOUT END OF THE ERA\nPayout (p): 8 SDX\n\nPAYOUT CALCULATION\nPayout for each validator (v1 to v4):\nPayout = p / v = 8 / 4 = 2 SDX per validator in the active set\n</code></pre> <p>Note that this is different than most other Proof-of-Stake systems such as Cosmos. As long as a validator is in the validator set, it will receive the same block reward as every other validator. Validator v1, who had 18 coins staked, received the same reward (2 coins) in this era as v4, with only seven tokens staked.</p>"},{"location":"validator-guides/validator-payout-overview/#running-multiple-validators","title":"Running Multiple Validators","text":"<p>A single entity can run multiple validators. Running multiple validators may provide a better risk/reward ratio. Assuming you have enough KSI/SDX, or enough stake nominates your validator to ensure that your validators remain in the validator set, running multiple validators will result in a higher return than running a single validator.</p> <p>For the following example, assume you have 18 SDX to stake. For simplicity's sake, we will ignore nominators. As in the example above, running a single validator would net you 2 SDX in this era.</p> <p>Note that while SDX is used as an example, this same formula would apply to KSI when running a validator on Kusari</p> <pre><code>Validator Set Size (v): 4\n\nACTIVE SET\nValidator 1 Stake (v1): 18 coins &lt;- YOUR VALIDATOR\nValidator 2 Stake (v2):  9 coins\nValidator 3 Stake (v3):  8 coins\nValidator 4 Stake (v4):  7 coins\n\nPAYOUT END OF THE ERA\nPayout (p): 8 SDX\n\nPAYOUT CALCULATION\nYour Payout = p / v = 8 / 4 = 2 SDX \n</code></pre> <p>Running two validators, and splitting the stake equally, would result in the original validator <code>v4</code> being kicked out of the validator set, as only the top v validators (as measured by stake) are selected to be in the validator set. More important, it would also double the reward that you get from each era.</p> <p><pre><code>Validator Set Size (v): 4\n\nACTIVE SET\nValidator 1 Stake (v1): 9 coins &lt;- YOUR FIRST VALIDATOR\nValidator 2 Stake (v2): 9 coins &lt;- YOUR SECOND VALIDATOR\nValidator 3 Stake (v3): 9 coins\nValidator 4 Stake (v4): 8 coins\n\nPAYOUT END OF ERA\nPayout (p): 8 SDX\n\nYour payout = (p / v) * 2 = (8 / 4) * 2 = 4 SDX\n</code></pre> With enough stake, you could run more than two validators. However, each validator must have enough stake behind it to be in the validator set.</p> <p>The system is designed to favor equally-staked validators. This works out to be a dynamic, rather than static, equilibrium. Potential validators will run different numbers of validators and apply different amounts of stake to them as time goes on and in response to the actions of other validators on the network.</p>"},{"location":"validator-guides/validator-payout-overview/#slashing","title":"Slashing","text":"<p>Although the system pays rewards equally, slashes are relative to a validator's stake. Therefore, if you do have enough KSI/SDX to run multiple validators, it is in your best interest to do so. Of course, a slash of 30% will be more KSI/SDX for a validator with 18 KSI/SDX staked than one with 9 KSI/SDX staked.</p> <p>Running multiple validators does not absolve you of the consequences of misbehavior. The network punishes attacks that appear coordinated more severely than individual attacks. You should not, for example, run multiple validators hosted on the same infrastructure. A proper multi-validator configuration would ensure that they do not fail simultaneously.</p> <p>Nominators have the incentive to nominate the lowest-staked validator, as this will result in the lowest risk and highest reward. This is because while their vulnerability to slashing remains the same (since it is percentage-based), their rewards are higher since they will be a higher proportion of the total stake allocated to that validator.</p> <p>To clarify this, let us imagine two validators, PETAR and GRANDAD. Assume both are in the active set, have commission set to 0%, and are well-behaved. The only difference is that GRANDAD has 90 SDX nominating it and PETAR only has 10. If you nominate GRANDAD, it now has 90 + 10 = 100 SDX, and you will get 10% of the staking rewards for the next era. </p> <p>If you nominate PETAR, it now has 10 + 10 = 20 SDX nominating it, and you will get 50% of the staking rewards for the next era. In actuality, it would be pretty rare to see such a significant difference between the stake of validators, but the same principle holds even for more minor differences. If there is a 10% slash of either validator, you will lose 1 SDX in each case.</p>"},{"location":"validator-guides/validator-payout-overview/#nominators-and-validator-payments","title":"Nominators and Validator Payments","text":"<p>Nominated stake allows you to \"vote\" for validators and share in the rewards (and slashing) without running a validator node yourself. Validators can choose to keep a percentage of the rewards due to their validator to \"reimburse\" themselves for the cost of running a validator node. Other than that, all rewards are shared based on the stake behind each validator. This includes the stake of the validator itself, plus any stake bonded by nominators.</p> <p>Note</p> <p>Validators set their preference as a percentage of the block reward, not an absolute number of KSI/SDX. The block rewards are based on the total amount at stake, with the reward peaking when the amount staked is at 50% of the total supply. The commission is set as the amount taken by the validator; that is, 0% commission means that the validator does not receive any proportion of the rewards besides that owed to it from self-stake, and 100% commission means that the validator operator gets all rewards and gives none to its nominators.</p> <p>The following examples show the results of several different validator payment schemes and the split between nominator and validator stake. We will assume a single nominator for each validator. However, there can be numerous nominators for each validator. Rewards are still distributed proportionally - for example, if the total rewards to be given to nominators is 2 SDX, and there are four nominators with equal stake bonded, each will receive 0.5 SDX. Note also that a single nominator may stake different validators.</p> <p>Each validator in the example has selected a different validator payment (a percentage of the reward set aside directly for the validator). The validator's payment percentage (in SDX, although the same calculations work for KSI) is listed in brackets ([]) next to each validator. Since the validator payment is public knowledge, having a low or non-existent validator payment may attract more stake from nominators, since they know they will receive a larger reward.</p> <pre><code>Validator Set Size (v): 4\n\nACTIVE SET (One Nominator per Validator)\nValidator 1 Stake (v1) [20% commission]: 18 SDX (9 SDX self-stake, 9 SDX nominator-stake)\nValidator 2 Stake (v2) [40% commission]:  9 SDX (3 SDX self-stake, 6 SDX nominator-stake)\nValidator 3 Stake (v3) [10% commission]:  8 SDX (4 SDX self-stake, 4 SDX nominator-stake)\nValidator 4 Stake (v4) [0% commission]:   6 SDX (1 SDX self-stake, 5 SDX nominator-stake)\n\nTOTAL PAYOUT END OF ERA\nPayout (p): 8 DOT\n\nPAYOUT PER VALIDATOR\nPayout for each validator (v1 - v4):\np / v = 8 / 4 = 2 SDX\n\n---------------------------------------------------------------------------------------------------\n\nREWARD CALCULATION - VALIDATOR 01\nv1:\n(0.2 * 2) = 0.4 SDX             -&gt; validator payment\n(2 - 0.4) = 1.6 SDX             -&gt; shared between all stake\n(9 / 18) * 1.6 = 0.8 SDX        -&gt; validator self-stake share\n(9 / 18) * 1.6 = 0.8 SDX        -&gt; nominator stake share\n\nv1 validator total reward: 0.4 + 0.8 = 1.2 SDX\nv1 nominator reward: 0.8 SDX\n\n---------------------------------------------------------------------------------------------------\n\nREWARD CALCULATION - VALIDATOR 02\nv2:\n(0.4 * 2) = 0.8 SDX              -&gt; validator payment\n(2 - 0.8) = 1.2 SDX              -&gt; shared between all stake\n(3 / 9) * 1.2 = 0.4 SDX          -&gt; validator self-stake share\n(6 / 9) * 1.2 = 0.8 SDX          -&gt; nominator stake share\n\nv2 validator total reward: 0.8 + 0.4 = 1.2 SDX\nv2 nominator reward: 0.8 SDX\n\n---------------------------------------------------------------------------------------------------\n\nREWARD CALCULATION - VALIDATOR 03\nv3:\n(0.1 * 2) = 0.2 SDX              -&gt; validator payment\n(2 - 0.2) = 1.8 SDX              -&gt; shared between all stake\n(4 / 8) * 1.8 = 0.9 SDX          -&gt; validator self-stake share\n(4 / 8) * 1.8 = 0.9 SDX          -&gt; nominator stake share\n\nv3 validator total reward: 0.2 + 0.9 SDX = 1.1 SDX\nv3 nominator reward: 0.9 SDX\n\n---------------------------------------------------------------------------------------------------\n\nREWARD CALCULATION - VALIDATOR 03\nv4:\n(0 * 2) = 0 SDX                  -&gt; validator payment\n(2 - 0) = 2.0 SDX                -&gt; shared between all stake\n(1 / 6) * 2 = 0.33 SDX           -&gt; validator self-stake share\n(5 / 6) * 2 = 1.67 SDX           -&gt; nominator stake share\n\nv4 validator total reward: 0 + 0.33 SDX = 0.33 SDX\nv4 nominator reward: 1.67 SDX\n</code></pre> <p></p> <p> Written by Masterdubs &amp; Petar </p> <p> Edited by NoLongerVoid </p>"},{"location":"validator-guides/validator/","title":"HOW TO SETUP A VALIDATOR","text":"<p>The following guide will teach you how to set up a SwapDEX validator. The process of becoming a validator requires two steps. The first step is to set up a network node. The second step is to assign your node to your account and apply for validator candidacy.</p> <p>Network validators are the foundation of a decentralized proof-of-stake network because they are responsible for concluding on a consensus by creating new and validating already produced blocks. That said, network validators are the prime target for adversaries that aim to sabotage the network. The SwapDEX has many layers to protect the network from attacks. The first layer is the security of each validator itself. Another layer is the slashing mechanism that detects validator nodes that display abnormal or dangerous behavior and punishes them with slashes. A slash will, in all cases, lead to the loss of funds. </p> <p>Warning</p> <p>Hence the warning: Running a validator on a live network is a lot of responsibility! You will be accountable for your stake and the stake of your current nominators. If you make a mistake and get slashed, your money and your reputation will be at risk. However, running a validator can also be very rewarding, knowing that you contribute to the security of a decentralized network while growing your stash.</p>"},{"location":"validator-guides/validator/#step-1-setup-a-network-node","title":"Step 1 - Setup a Network Node","text":""},{"location":"validator-guides/validator/#requirements","title":"Requirements","text":"<p>You can operate a network node on a local computer, a professional server-rig in your basement, or on a remotely hosted virtual private server (VPS) in the clouds. It's up to you to choose the infrastructure you feel most comfortable with. What doesn't change are the requirements of a network node that operates as a validator. Validators should always be online and powerful enough to create and validate the authoring process of new blocks. If your validator is failing at one of these requirements, it will get punished by slashes.</p> <p>Tip</p> <p>The most common way for a beginner to run a validator is on a VPS running Linux. You may choose whatever VPS providers that you prefer. </p> <p>We benchmarked the transactions weights on the SwapDEX network on standard hardware. We recommend that validators run at least the standard hardware to ensure they can process all blocks in time. The following are not minimum requirements, but if you decide to run with less than this, beware that you might have a performance issue.</p>"},{"location":"validator-guides/validator/#lower-end-hardware","title":"Lower-end Hardware :","text":"<ul> <li>6GB ram, 60 GB Storage, 2 CPU , stable server uplink connection with fixed IP</li> </ul>"},{"location":"validator-guides/validator/#ideal-hardware","title":"Ideal Hardware :","text":"<ul> <li>16GB ram, 300 GB Storage, 6 CPU, stable server uplink connection with fixed IP</li> </ul> <p>Info</p> <p>Anything between the lower-end and ideal hardware should be sufficient to run a validator on the SwapDEX network. </p>"},{"location":"validator-guides/validator/#using-ubuntu-2110","title":"Using Ubuntu 21.10:","text":""},{"location":"validator-guides/validator/#update-your-ubuntu","title":"Update your Ubuntu","text":"<pre><code>sudo apt-get update\n</code></pre>"},{"location":"validator-guides/validator/#network-time-protocol-ntp-client","title":"Network Time Protocol (NTP) Client","text":"<p>We currently require that the clocks of all validators on the network stay reasonably in sync. The NTP client is a piece of software that allows you to synchronize your server's clock with the clocks of the remaining servers connected to the blockchain. </p> <p>Info</p> <p>If you are using Ubuntu 18.04 / 19.04 / 20.04, NTP Client should be installed by default. You can check if your server is already running NTP by executing the following command: <pre><code>timedatectl\n</code></pre> If NTP is installed and running, you should see System clock synchronized: yes (or a similar message).</p> <p>Otherwise install the NTP client by running the following command: <pre><code>sudo apt-get install ntp\n</code></pre> NTP will be started automatically after install. You can query your NTP client for status information to verify that everything is working: <pre><code>sudo ntpq -p\n</code></pre></p> <p>Warning</p> <p>Skipping this can result in the validator node missing block authorship opportunities. If the clock is out of sync (even by a small amount), the blocks produced by your validator may not get accepted by the network. </p>"},{"location":"validator-guides/validator/#installing-the-swapdex-network-binary","title":"Installing the SwapDEX network Binary","text":""},{"location":"validator-guides/validator/#install-and-enable-chrony","title":"Install and enable Chrony","text":"<p>We learned in the previous step that the new versions of Ubuntu ship with the NTP client by default. However, Chrony is another time sync tool that delivers better and more stable performance. Therefore, we recommend installing and enabling Chrony on top of the NTP client to ensure synchronized clocks and uninterrupted validator operations. <pre><code>sudo apt install chrony\nsudo systemctl enable chrony\n</code></pre></p>"},{"location":"validator-guides/validator/#fundamental-security-measures","title":"Fundamental Security Measures","text":"<p>Security is of utmost importance if you consider operating a successful validator on a live network. We will show you how to create a fundamental layer of protection by installing a firewall and a fail2ban service.</p> <p>Configure a Firewall</p> <p>The default firewall configuration tool for Ubuntu is  UFW . UFW stands for uncomplicated firewall and helps ease IP-tables firewall configuration, and provides a user-friendly way to create an IPv4 or IPv6 host-based firewall.</p> <p>Configure firewall ports to allow SSH and Validator service to communicate. <pre><code>sudo ufw allow 22\nsudo ufw allow 30333\nsudo ufw allow ntp\nsudo ufw enable\n</code></pre></p> <p>Setup Fail2Ban</p> <p> Fail2Ban  is a tool that scans log files and bans IPs that show malicious signs for instance too many password failures, seeking for exploits, etc. Generally Fail2Ban is then used to update firewall rules to reject the IP addresses for a specified amount of time. It provides basic-level protection against distributed brute-force attacks. <pre><code>sudo apt install -y fail2ban &amp;&amp; sudo systemctl enable fail2ban &amp;&amp; sudo service fail2ban start\n</code></pre></p> <p>Success</p> <p>Congratulations! You implemented a fundamental layer of protection.</p>"},{"location":"validator-guides/validator/#install-swapdex-validator-binaries","title":"Install SwapDEX Validator binaries","text":"<p>The following command will fetch / download the SwapDEX validator binaries and copy them to a specific folder. Check your ubuntu version and choose the correct file for it.  check your ubuntu version and choose the correct file for it </p> <pre><code>wget https://download.starkleytech.com/swapdex/FILE_NAME_FROM_ABOVE -O swapdex &amp;&amp; sudo chmod +x ./swapdex &amp;&amp; sudo mv ./swapdex /usr/bin/swapdex\n</code></pre> <p>Warning</p> <p>Make sure that the link matches exactly and never use another source to download the binaries!</p>"},{"location":"validator-guides/validator/#create-user-account-for-validator-operations","title":"Create User Account for Validator Operations","text":"<p>For security reasons we recommend to run a validator as non-root user. For that we create a dedicated user account which will be used to run the validator. <pre><code>sudo adduser swapdex\n</code></pre></p> <p>Info</p> <p>when adding the new account you will be asked to provide a password and some additional information. Only the password is mandatory, the other parameters can be left blank.</p>"},{"location":"validator-guides/validator/#create-the-swapdex-validator-service-file","title":"Create the SwapDEX Validator Service File","text":"<p>In the next step, we will use  Nano , a simple terminal-based text editor, to create a file that contains service instructions. The following command creates a file named <code>swapdex.service</code> at the following location: <code>lib/systemd/system/</code></p> <pre><code>sudo nano /lib/systemd/system/swapdex.service\n</code></pre> <p>Warning</p> <p>The following code-block contains the content that must be inserted into the Nano text editor! Make sure to change \"A Node Name\" and replace it your preferred name</p> <p>Content of the swapdex.service file: <pre><code>[Unit]\nDescription=SwapDEX Validator\nAfter=network-online.target\n\n[Service]\nExecStart=/usr/bin/swapdex --port \"30333\" --name \"A Node Name\" --validator --chain swapdex \nUser=swapdex\nRestart=always\nExecStartPre=/bin/sleep 5\nRestartSec=30s\nLimitNOFILE=8192\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Hit \"ctrl+x\", then press \"y\" to confirm the saving of the file and then hit \"Enter\" to exit.</p> <p>Hint</p> <p>If you want to add a more ports to enable RPC calls, a websocket or monitoring, you can set it up by including the following flags in line 6. <code>--prometheus-port</code> <code>--rpc-port</code> and <code>--ws-port</code></p> <p>then start the service <pre><code>sudo systemctl enable swapdex &amp;&amp; sudo service swapdex start \n</code></pre></p> <p>Success</p> <p>Your validator will now run as a systemd process so that it will automatically restart on server reboots or crashes (and helps to avoid to getting slashed!) For more information on systemd you can watch this quick  YouTube Tutorial .</p>"},{"location":"validator-guides/validator/#check-if-validator-is-started","title":"Check if validator is started","text":"<p>To ensure that the SwapDEX Validator process works please execute the following command: <pre><code>ps aux | grep swapdex\n</code></pre> You should see a similar output: <pre><code>swapdex  8108 9.9 21.0 1117976 419772 ?   Ssl May17 601:17 /usr/bin/swapdex --port 30333 --name \"A Node Name\" --validator --chain swapdex\n</code></pre> Furthermore, you can monitor your validator's logs by executing the following command: <pre><code>journalctl -u swapdex.service --follow\n</code></pre> To exit the 'follow' mode you need to hit Ctrl+C</p>"},{"location":"validator-guides/validator/#reboot-to-be-sure-everything-is-restarted-correctly","title":"Reboot to be sure everything is restarted correctly:","text":"<pre><code>sudo reboot -h now\n</code></pre> <p>Check if your node is appearing in the telemetry UI :  Telemetry UI </p> <p>Info</p> <p>If you want to find your node here you must have changed the name parameter in the previous step (<code>--name \"A Node Name\"</code>)</p> <p>Success</p> <p>Congrats! If you checked and found your node on the telemetry page, you successfully set up your server to become a SwapDEX Validator!</p>"},{"location":"validator-guides/validator/#part-2-assign-the-node-to-an-account","title":"Part 2 - Assign the node to an account","text":"<p>The second part of this guide will complete the validator setup by connecting your server with your Substrate account. Make sure you have some SDX in your substrate wallet. In case you need SDX please see the  claim  section or watch our  YoutTube Walkthrough . </p>"},{"location":"validator-guides/validator/#what-are-stash-and-controller-accounts","title":"What are stash and controller accounts?","text":"<p>The divison into two wallets or accounts is an additional security feature we implemented to protect your funds in case of fradulent attacks.</p> <p>Hint</p> <p>In short: The Stash-Account is where you keep all the funds you want to stake. We recommend to protect it's private key with a hardware wallet like Ledger or Trezor. The Controller-Account is used to control actions related to your staking However, you can start and operate a validator without hardware wallets. This may be a viable option on a but is certainly not recommended once liqudity is provided.</p> <p>The Stash Account will be used to bond/unbond your funds and to choose the address of the Controller Account. The Controller Account will be used to take actions on behalf of the bonded funds.  However, the Controller Account can't move the bonded funds out of the Stash Account.</p> <p>Warning</p> <p>Never disclose your Keystore file or your 12/24 words seed phrase.</p> <p>Before we start with the creation of both accounts please consider to download the Polkadot{.js} browser extension is our recommended way to create substrate based accounts. Pokadot.js is very comparable with Meta Mask for Ethereum especially in terms of usability, security and functionality.</p> <p>Tip</p> <p> Download Pokadot.js browser extension</p>"},{"location":"validator-guides/validator/#create-the-controller-account","title":"Create the Controller Account","text":"<p>Step 1: Open the Pokadot.js browser extension by clicking the logo on the top bar of your browser. You will see a browser popup, not unlike the one below.</p> <p></p> <p>Step 2: Click the big plus button or select \"Create new account\" from the small plus icon in the top right. The Polkadot{.js} plugin will then use system randomness to make a new seed for you and display it to you in the form of twelve words.</p> <p></p> <p>Step 3: You should back up these words as explained above. It is imperative to store the seed somewhere safe, secret, and secure. If you cannot access your account via Polkadot{.js} for some reason, you can re-enter your seed through the \"Add account menu\" by selecting \"Import account from pre-existing seed\".</p> <p></p> <p>Step 4: Name your Account</p> <p>The account name is arbitrary and for your use only. It is not stored on the blockchain and will not be visible to other users who look at your address via a block explorer. If you're juggling multiple accounts, it helps to make this as descriptive and detailed as needed.</p> <p>Step 5: Enter Password</p> <p>You will use the password to encrypt this account's information. You will need to re-enter it when using the account for all outgoing transactions or sign a cryptographic message.</p> <p>Warning</p> <p>Note that this password does NOT protect your seed phrase. If someone knows the twelve words in your mnemonic seed, they still control your account even if they do not know the password.</p> <p>Hint</p> <p> Repeat this process to create your stash account</p>"},{"location":"validator-guides/validator/#create-session-keys","title":"Create Session Keys:","text":"<p>Login to your VPS server.</p> <p>Session keys are needed to associate your node with your controller account. To generate the session keys you can run the following command in your terminal: </p> <pre><code>curl -H \"Content-Type: application/json\" -d '{\"id\":1, \"jsonrpc\":\"2.0\", \"method\": \"author_rotateKeys\", \"params\":[]}' http://localhost:9933\n</code></pre> <p>The output will have a hex-encoded \"result\" field. The result is the concatenation of the four public keys. Save this result for a later step. Copy the session key. It will look like this:</p> <pre><code>0x13660593581b2e728ee32122636f8996c6fd9c22f33beaa05e2797899c5458b0c888149bf3c0b5ca7fb7296e69fefd85e4e3d5b76848db890207575e49031f37d846e78babf8051c123b498ffe6f12e712f97f6b2f3b54345ffe51145a16bb22187d415c2101b9883668ce93c46f7ba556b394c59781854737b6c941747c0964\n</code></pre>"},{"location":"validator-guides/validator/#apply-on-swapdex-explorer","title":"Apply on SwapDEX Explorer","text":"<ul> <li>Visit the substrate explorer</li> <li> <p>Go to the <code>Network Tab</code> -&gt; <code>Staking</code> -&gt; <code>Account Actions</code> (Link) </p> </li> <li> <p>Hit the <code>+ Validator</code> Button </p> </li> <li> <p>Fill in the form </p> </li> <li> <p>Stash account - Select your Stash account. In this example, we will bond 1000 SDX, where the minimum bonding amount is 1. Make sure that your Stash account contains at least this much. You can, of course, stake more than this.</p> </li> <li>Controller account - Select the Controller account created earlier. This account will also need a small amount of SDX in order to start and stop validating.</li> <li>Value bonded - How much SDX from the Stash account you want to bond/stake. Note that you do not need to bond all of the SDX in that account. Also note that you can always bond more SDX later. However, withdrawing any bonded amount requires the duration of the unbonding period.</li> <li>Payment destination - The account where the rewards from validating are sent. Payouts can go to any custom address. If you'd like to redirect payments to an account that is neither the controller nor the stash account, set one up. Note that it is extremely unsafe to set an exchange address as the recipient of the staking rewards.</li> </ul> <ul> <li>Paste the session key </li> </ul> <p>Here you will need to input the Sesssion Keys, which is the Hex output from the command we executed earlier. The keys will show as pending until applied at the start of a new session.</p> <p>The \"reward commission percentage\" is the commission percentage that you can declare against your validator's rewards. This is the rate that your validator will be commissioned with.</p> <p>!!! Note:      setting a commission rate of 100% suggests that you do not want your validator to receive nominations.</p> <p>You can also determine if you would like to receive nominations with the \"allows new nominations\" option.</p> <ul> <li> <p>Hit bond &amp; validate</p> </li> <li> <p>Visit the Waiting Tab to see your validator waiting until the era finishes</p> </li> </ul> <p>Success</p> <p>Alright mate! You are all set :D</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"web3-projects/","title":"Web3 projects","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"web3-projects/dex-listing/","title":"DEX Listing","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"web3-projects/migration-guide/","title":"Migration Guide","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"web3-projects/nft-creators/","title":"NFT Creators","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"web3-projects/partnerships/","title":"Partnerships","text":"<p>Comming soon</p> <p>This page is currently under development and will be comming soon. </p>"},{"location":"what-to-try/account-generation/","title":"ACCOUNT GENERATION","text":"<p>To start interacting with SwapDEX, you need a wallet or account that enables you to send transactions, participate in the chain governance, run a validator or nominate to earn interest. </p> <p>The following guide will show you how easy setting up a SwapDEX account is and what exact steps you need to take. </p> <p>If you encounter any issues or problems, please feel free to reach out to us on Discord.</p> <p>Before we start, let's get some terms right, and let's spend a couple of seconds talking about the concept of keys.</p> <p>A standard wallet or account is composed out of two keys:</p> <ul> <li>The PUBLIC KEY (Wallet address)</li> <li>The PRIVATE KEY (The key that allows you to access and manage your funds) </li> </ul> <p>Your SwapDEX account follows the same rules. Therefore, we will continue with a section on key security to make you aware that You must keep your PRIVATE KEY, SEED PHRASE, or JSON KEYSTORE file secret at all times. </p>"},{"location":"what-to-try/account-generation/#storing-your-key-safely","title":"Storing your key safely","text":"<p>The only ways to access your account are via your secret seed or your account's JSON file in combination with a password. It would be best if you kept them both secure and private. If you share them with anyone, they will have full access to your account, including all of your funds. This information is a target for hackers and others with bad intentions. </p> <p>In this guide, we recommend the Polkadot{.js} browser plug-in as the best method to create your SwapDEX account.</p> <p>Tip</p> <p>Polkadot{.js} Browser Extension RECOMMENDED FOR MOST USERS</p> <p>The seed is your key to the account. Knowing the seed allows you to re-generate and control your account or anyone else who knows the seed.</p> <p>It is imperative to store the seed somewhere safe, secret, and secure. If you lose access to your account (i.e., forget the password for your account's JSON file), you can re-create it by entering the seed. This also means that somebody else can control your account if they have access to your seed.</p> <p>For maximum security, the seed should be written down on paper or another non-digital device and stored in a safe place. You may also want to protect your seed from physical damage (e.g., keeping it in a sealed plastic bag to prevent water damage, storing it in a fireproof safe, etching it in metal, etc.) We recommend that you keep multiple copies of the seed in geographically separate locations (e.g., one in your home safe and one in a safety deposit box at your bank).</p> <p>You should not store your seed on any kind of computer that has or may have access to the internet in the future.</p>"},{"location":"what-to-try/account-generation/#storing-your-accounts-json-file","title":"Storing your account's JSON file","text":"<p>The JSON file is encrypted with a password, which means you can import it into any wallet which supports JSON imports, but to then use it, you need the password. You don't have to be as careful with your JSON file's storage as you would with your seed (i.e. it can be on a USB drive near you), but remember that in this case, your account is only as secure as the password you used to encrypt it. Do not use easy to guess or hard to remember passwords. It is good practice to use a mnemonic password of four to five words. These are nearly impossible for computers to guess due to the number of combinations possible but much more manageable for humans to remember.</p>"},{"location":"what-to-try/account-generation/#polkadotjs-browser-extension","title":"Polkadot{.js} Browser Extension","text":"<p>Since Polkadot and SwapDEX share the same foundation, namely Substrate, the Polkadot{.js} browser extension is the recommended way to create your SwapDEX account.</p> <ul> <li>Polkadot{.js} Browser Extension for Chrome &amp; Brave</li> <li>Polkadot{.js} Browser Extension for Firefox</li> </ul> <p>The Polkadot{.js} browser extension provides a reasonable balance of security and usability. It's comparable to MetaMask for Ethereum. It provides a separate local mechanism to generate your address and interact with SwapDEX.</p> <p>So let's start installing the Polkadot{.js} plugin to enable you to interact with SwapDEX.</p>"},{"location":"what-to-try/account-generation/#create-an-account","title":"Create an Account","text":"<p>Open the Polkadot{.js} browser extension by clicking the logo on the top bar of your browser. You will see a browser popup, not unlike the one below.</p> <p></p> <p>Click the big plus button or select \"Create new account\" from the small plus icon in the top right. The Polkadot{.js} plugin will then use system randomness to make a new seed for you and display it to you in the form of twelve words.</p> <p></p> <p>You should back up these words as explained above. It is imperative to store the seed somewhere safe, secret, and secure. If you cannot access your account via Polkadot{.js} for some reason, you can re-enter your seed through the \"Add account menu\" by selecting \"Import account from pre-existing seed\".</p> <p></p>"},{"location":"what-to-try/account-generation/#name-your-account","title":"Name your Account","text":"<p>The account name is arbitrary and for your use only. It is not stored on the blockchain and will not be visible to other users who look at your address via a block explorer. If you're juggling multiple accounts, it helps to make this as descriptive and detailed as needed.</p>"},{"location":"what-to-try/account-generation/#enter-password","title":"Enter Password","text":"<p>You will use the password to encrypt this account's information. You will need to re-enter it when using the account for all outgoing transactions or sign a cryptographic message.</p> <p>Warning</p> <p>Note that this password does NOT protect your seed phrase. If someone knows the twelve words in your mnemonic seed, they still control your account even if they do not know the password.</p> <p>Success</p> <p>Congrats! You managed to create a SwapDEX-Substrate Account with the Polkadot{.js} browser extention.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"what-to-try/democracy/","title":"EXPLORING DEMOCRACY","text":"<p>SwapDEX uses a sophisticated governance mechanism to evolve gracefully over time at the ultimate behest of its assembled stakeholders.  The stated goal is to ensure that the majority of the stake can always command the network. </p> <p>To do this, we borrowed and adjusted various mechanisms from Polkadot, Kusama and Substrate, including an amorphous state-transition function stored on-chain and defined in a platform-neutral intermediate language (i.e. WebAssembly) and several on-chain voting mechanisms such as referenda with adaptive super-majority thresholds and batch approval voting. Stake-weighted referenda must agree upon all changes to the protocol.</p>"},{"location":"what-to-try/democracy/#mechanism","title":"Mechanism","text":"<p>To make any changes to the network, the idea is to compose active coin holders and the council together to administrate a network upgrade decision. No matter whether the proposal is proposed by the public (coin holders) or the council, it finally will have to go through a referendum to let all holders, weighted by stake, make the decision.</p>"},{"location":"what-to-try/democracy/#referenda","title":"Referenda","text":"<p>Referenda are straightforward, inclusive, stake-based voting schemes. Each referendum has a specific proposal associated with it that takes the form of a privileged function call in the runtime (that includes the most powerful call: <code>set_code</code>, which can switch out the entire code of the runtime, achieving what would otherwise require a \"hard fork\").</p> <p>Referenda are discrete events, have a fixed period where voting happens and then are tallied, and the function call is made if the vote is approved. Referenda are always binary; your only options in voting are \"aye\", \"nay\", or abstaining entirely.</p> <p>Referenda can be started in one of several ways:</p> <ul> <li>Publicly submitted proposals;</li> <li>Proposals submitted by the Council, either through a majority or unanimously;</li> <li>Proposals submitted as part of the enactment of a prior referendum;</li> <li>Emergency proposals submitted by the Technical Committee and approved by the Council.</li> </ul> <p>All referenda have an enactment delay associated with them. This is the period between the referendum ending and, assuming the proposal was approved, the changes being enacted. For the first two ways that a referendum is launched, this is a fixed time. For SwapDEX, it is eight days. For the third type, it can be set as desired.</p> <p>Emergency proposals deal with significant problems with the network that need to be \"fast-tracked\". These will have a shorter enactment time.</p>"},{"location":"what-to-try/democracy/#proposing-a-referendum","title":"Proposing a Referendum","text":""},{"location":"what-to-try/democracy/#public-referenda","title":"Public referenda","text":"<p>Anyone can propose a referendum by depositing the minimum amount of coins for a certain period (number of blocks).  If someone agrees with the proposal, they may deposit the same amount of coins to support it - this action is called seconding.  The proposal with the highest bonded support will be selected to be a referendum in the next voting cycle.</p> <p>Note</p> <p>Note that this may be different from the absolute number of seconds; for instance, three accounts bonding 20 SDX each would \"outweigh\" ten accounts bonding a single SDX each. The bonded coins will be released once the proposal is tabled (that is, brought to a vote).</p> <p>There can be a maximum of 100 public proposals in the proposal queue.</p>"},{"location":"what-to-try/democracy/#council-referenda","title":"Council Referenda","text":"<p>Unanimous Council - When all members of the council agree on a proposal, the council can move it to a referendum. This referendum will have a negative turnout bias (that is, the smaller the amount of stake voting, the smaller the amount necessary for it to pass - see \"Adaptive Quorum Biasing\", below).</p> <p>Majority Council - When agreement from only a simple majority of council members occurs, the referendum can also be voted upon, but it will be majority-carries (51% wins).</p> <p>There can only be one active referendum at any given time, except when there is also an emergency referendum in progress.</p>"},{"location":"what-to-try/democracy/#voting-timetable","title":"Voting Timetable","text":"<p>Every  7 days, a new referendum will come up for a vote, assuming at least one proposal in one of the queues. There is a queue for Council-approved proposals and a queue for publicly submitted proposals. The referendum to be voted upon alternates between the top proposal in the two queues.</p> <p>The \"top\" proposal is determined by the amount of stake bonded behind it. Suppose the given queue whose turn it is to create a referendum with no proposals (empty), and proposals are waiting in the other queue. In that case, the top proposal in the other queue will become a referendum.</p> <p>Multiple referenda cannot be voted upon in the same period, excluding emergency referenda.  An emergency referendum co-occurring as a regular referendum (either public- or council-proposed) is the only time multiple referenda will be voted on at once.</p>"},{"location":"what-to-try/democracy/#voting-on-referendum","title":"Voting on referendum","text":"<p>To vote, a voter generally must lock their coins up for at least the enactment delay period beyond the end of the referendum.  This ensures that some minimal economic buy-in to the result is needed and dissuades vote selling.</p> <p>It is possible to vote without locking at all, but your vote is worth a small fraction of an ordinary vote, given your stake.  At the same time, holding only a small amount of coins does not mean that the holder cannot influence the referendum result, thanks to time-locking.  You can read more about this at Voluntary Locking.</p> <p>Hint</p> <p>To learn more about voting on referenda, please check out our technical explainer video.</p> <pre><code>Example:\n\nGrandad: Votes `No` with 10 SDX for a 128 week lock period  =&gt; 10 * 6 = 60 Votes\n\nLucious: Votes `Yes` with 20 SDX for a 4 week lock period =&gt; 20 * 1 = 20 Votes\n\nPetar: Votes `Yes` with 15 SDX for a 8 week lock period =&gt; 15 * 2 = 30 Votes\n</code></pre> <p>Even though combined both Lucious and Petar vote with more SDX than Grandad, the lock period for both of them is less than Grandad's, leading to their voting power counting as less.</p>"},{"location":"what-to-try/democracy/#tallying","title":"Tallying","text":"<p>There are Three different scenarios depending on which entity proposed the proposal and whether all council members voted yes. We can use the following table for reference.</p> Entity Metric Public Positive Turnout Bias (Super-Majority Approve) Council (Complete agreement) Negative Turnout Bias (Super-Majority Against) Council (Majority agreement) Simple Majority <p>Also, we need the following information and apply one of the formulas listed below to calculate the voting result.  For example, let's use the public proposal as an example, so the <code>Super-Majority Approve</code> formula will be applied.  There is no strict quorum, but the super-majority required increases with lower turnout.</p> <pre><code>approve - the number of aye votes\n\nagainst - the number of nay votes\n\nturnout - the total number of voting coins (does not include conviction)\n\nelectorate - the total number of SDX coins issued in the network\n</code></pre>"},{"location":"what-to-try/democracy/#super-majority-approve","title":"Super-Majority Approve","text":"<p>A <code>positive turnout bias</code>, whereby a heavy super-majority of aye votes is required to carry at low turnouts, but as turnout increases towards 100%, it becomes a simple majority-carries as below.</p> <p></p>"},{"location":"what-to-try/democracy/#super-majority-against","title":"Super-Majority Against","text":"<p>A <code>negative turnout bias</code>, whereby a heavy super-majority of nay votes is required to reject at low turnouts, but as turnout increases towards 100%, it becomes a simple majority-carries as below.</p> <p></p>"},{"location":"what-to-try/democracy/#simple-majority","title":"Simple Majority","text":"<p>Majority-carries, a simple comparison of votes; if there are more aye votes than nay, then the proposal is carried, no matter how much stake votes on the proposal.</p> <p></p> <p>To know more about where these above formulas come from, please read the democracy pallet.</p> <pre><code>Example:\n\nAssume:\n- We only have 1.500 SDX coins in total.\n- Public proposal\n\nJohn  - 500 SDX\nPeter - 100 SDX\nLilly - 150 SDX\nJJ    - 150 SDX\nKen   - 600 SDX\n\nJohn: Votes `Yes` for a 4 week lock period  =&gt; 500 * 1 = 500 Votes\n\nPeter: Votes `Yes` for a 4 week lock period =&gt; 100 * 1 = 100 Votes\n\nJJ: Votes `No` for a 16 week lock period =&gt; 150 * 3 = 450 Votes\n\napprove = 600\nagainst = 450\nturnout = 750\nelectorate = 1500\n</code></pre> <p></p> <p></p> <p>Since the above example is a public referendum, <code>Super-Majority Approve</code> would be used to calculate the result. <code>Super-Majority Approve</code> requires more aye votes to pass the referendum when turnout is low, therefore, based on the above result, the referendum will be rejected. In addition, only the winning voter's coins are locked. If the voters on the losing side of the referendum believe that the outcome will have negative effects, their coins are transferrable so they will not be locked into the decision. Moreover, winning proposals are autonomously enacted only after some enactment period.</p>"},{"location":"what-to-try/democracy/#voluntary-locking","title":"Voluntary Locking","text":"<p>SwapDEX utilizes an idea called Voluntary Locking that allows coin holders to increase their voting power by declaring how long they are willing to lock up their coins, hence, the number of votes for each coin holder will be calculated by the following formula:</p> <pre><code>votes = coins * conviction_multiplier\n</code></pre> <p>The conviction multiplier increases the vote multiplier by one every time the number of lock periods double.</p> Lock Periods Vote Multiplier 0 0.1 1 1 2 2 4 3 8 4 16 5 32 6 <p>The maximum number of \"doublings\" of the lock period is set to 6 (and thus 32 lock periods in total), and one lock period equals 8 days on SwapDEX. Only doublings are allowed; you cannot lock for, say, 24 periods and increase your conviction by 5.5, for instance.</p> <p>While a coin is locked, you can still use it for voting and staking; you are only prohibited from transferring these coins to another account.</p> <p>Votes are still \"counted\" at the same time (at the end of the voting period), no matter for how long the coins are locked.</p>"},{"location":"what-to-try/democracy/#adaptive-quorum-biasing","title":"Adaptive Quorum Biasing","text":"<p>SwapDEX uses Polkadot's concept called \"Adaptive Quorum Biasing\", which functions as a lever that the council can use to alter the effective super-majority required to make it easier or more difficult for a proposal to pass in the case that there is no clear majority of voting power backing it or against it.</p> <p></p> <p>Let's use the above image as an example.    </p> <p>If a publicly submitted referendum only has a 25% turnout, the tally of \"aye\" votes has to reach 66% for it to pass since we applied <code>Positive Turnout Bias</code>.`</p> <p>In contrast, when it has a 75% turnout, the tally of \"aye\" votes has to reach 54%, which means that the super-majority required decreases as the turnout increases.</p> <p>When the council proposes a new proposal through unanimous consent, the referendum would be put to a vote using \"Negative Turnout Bias\".  In this case, it is easier to pass this proposal with low turnout and requires a super-majority to reject. As more coin holders participate in voting, the bias approaches a plain majority carries.</p> <p>Referring to the above image, when a referendum only has 25% turnout, the tally of \"aye\" votes has to reach 34% for it to pass.</p> <p>In short, when the turnout rate is low, a super-majority is required to reject the proposal, which means a lower threshold of \"aye\" votes have to be reached, but as turnout increases towards 100%, it becomes a simple majority.</p> <p>All three tallying mechanisms - majority carries, super-majority approve, and super-majority against - equate to a simple majority-carries system at 100% turnout.</p>"},{"location":"what-to-try/democracy/#council","title":"Council","text":"<p>Hint</p> <p>Video explainer on Council</p> <p>To represent passive stakeholders, SwapDEX uses the idea of a \"council\".  The council is an on-chain entity comprising several actors, each represented as an on-chain account.  On SwapDEX, the council will consist of 19 seats.</p> <p>Along with controlling the treasury, the council is called upon primarily for three tasks of governance: proposing sensible referenda, cancelling uncontroversially dangerous or malicious referenda, and electing the technical committee.</p> <p>For a referendum to be proposed by the council, a strict majority of members must be in favor, with no member exercising a veto. Vetoes may be exercised only once by a member for any single proposal; if, after a cool-down period, the proposal is resubmitted, they may not veto it a second time.</p> <p>Council motions which pass with a 3/5 (60%) super-majority - but without reaching unanimous support - will move to a public referendum under a neutral, majority-carries voting scheme. In the case that all members of the council vote in favor of a motion, the vote is considered unanimous and becomes a referendum with negative adaptive quorum biasing.</p>"},{"location":"what-to-try/democracy/#canceling","title":"Canceling","text":"<p>A proposal can be canceled if the technical committee unanimously agrees to do so, or if Root origin (e.g. sudo) triggers this functionality. A canceled proposal's deposit is burned.</p> <p>Additionally, a two-thirds majority of the council can cancel a referendum. This may function as a last-resort if there is an issue found late in a referendum's proposal such as a bug in the code of the runtime that the proposal would institute.</p> <p>If the cancellation is controversial enough that the council cannot get a two-thirds majority, then it will be left to the stakeholders en masse to determine the fate of the proposal.</p>"},{"location":"what-to-try/democracy/#blacklisting","title":"Blacklisting","text":"<p>A proposal can be blacklisted by Sudo Pallet. A blacklisted proposal and its related referendum (if any) is immediately canceled. Additionally, a blacklisted proposal's hash cannot re-appear in the proposal queue.  Blacklisting is useful when removing erroneous proposals that could be submitted with the same hash, i.e. proposal #2 in which the submitter used plain text to make a suggestion.</p> <p>Upon seeing their proposal removed, a submitter who is not properly introduced to the democracy system of SwapDEX might be tempted to re-submit the same proposal. That said, this is far from a fool-proof method of preventing invalid proposals from being submitted - a single changed character in a proposal's text will also change the hash of the proposal, rendering the per-hash blacklist invalid.</p>"},{"location":"what-to-try/democracy/#how-to-become-a-council-member","title":"How to become a council member?","text":"<p>All stakeholders are free to signal their approval of any of the registered candidates.</p> <p>Council elections are handled by the same Phragm\u00e9n election process that selects validators from the available pool based on nominations. However, coin holders' votes for councillors are isolated from any of the nominations they may have on validators. Council terms last for 24 days on SwapDEX.</p> <p>At the end of each term, Phragm\u00e9n election algorithm runs and the result will choose the new councillors based on the vote configurations of all voters. The election also chooses a set number of runners up (currently 19 on Kusari) that will remain in the queue with their votes intact.</p> <p>As opposed to a \"first-past-the-post\" electoral system, where voters can only vote for a single candidate from a list, a Phragm\u00e9n election is a more expressive way to include each voters' views. coin holders can treat it as a way to support as many candidates as they want. The election algorithm will find a fair subset of the candidates that most closely matches the expressed indications of the electorate as a whole.</p> <p>Let's take a look at the example below.</p> <p>Round 1</p> Coin Holders Candidates A B C D E Peter x x x x Alice x Bob x x x Kelvin x x Total 2 1 3 2 2 <p>The above example shows that candidate C wins the election in round 1, while candidates A, B, D &amp; E keep remaining on the candidates' list for the next round.</p> <p>Round 2</p> Coin Holders Candidates A B C D E Peter x x Alice x x Bob x x x x Kelvin x x Total 4 4 0 1 1 <p>For the top-N (say 4 in this example) runners-up, they can remain and their votes persist until the next election. After round 2, even though candidates A &amp; B get the same number of votes in this round, candidate A gets elected because after adding the older unused approvals, it is higher than B.</p>"},{"location":"what-to-try/democracy/#technical-committee","title":"Technical Committee","text":"<p>The Technical Committee is one of the three chambers of SwapDEX governance (along with the Council and the Referendum chamber). The Technical Committee is composed of the teams that have successfully implemented or specified either a SwapDEX/Kusari runtime. Teams are added or removed from the Technical Committee via a simple majority vote of the Council.</p> <p>The Technical Committee can, along with the Council, produce emergency referenda, which are fast-tracked for voting and implementation. These are used for emergency bug fixes or rapid implementation of new but battle-tested features into the runtime.</p> <p>Fast-tracked referenda are the only type of referenda that can be active alongside another active referendum. Thus, with fast-tracked referenda it is possible to have two active referendums at the same time. Voting on one does not prevent a user from voting on the other.</p>"},{"location":"what-to-try/democracy/#freqently-asked-quesitons","title":"Freqently Asked Quesitons","text":""},{"location":"what-to-try/democracy/#how-can-i-appeal-to-the-council-to-enact-a-change-on-my-behalf","title":"How can I appeal to the council to enact a change on my behalf?","text":"<p>In some circumstances, you may want to appeal to the on-chain council to enact a change on your behalf. One example of this circumstance is the case of lost or locked funds when the funds were lost due to a human interface error (such as inputting an address for another network). When these circumstances can be proven beyond a reasonable doubt to be an error, the council may consider a governance motion to correct it.</p> <p>The first step to appeal to the council is to get in contact with the councillors. There is no singular place where you are guaranteed to grab every councillor's ear with your message. However, there are a handful of good places to start where you can get the attention of some of them. Our Discord Server is one such place. After creating an account and joining our server, you can post a well-thought-through message here that lays down your case and provides justification for why you think the council should consider enacting a change to the protocol on your behalf.</p> <p>At some point you will likely need a place for a longer-form discussion. When you write a post on Discord make sure you present all the evidence for your circumstances and state clearly what kind of change you would suggest to the councillors to enact. Remember - the councillors do not need to make the change, it is your responsibility to make a strong case for why the change should be made.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"what-to-try/identity/","title":"SET AN IDENTITY TO GAIN TRUST","text":"<p>SwapDEX provides a naming system that allows participants to add personal information to their on-chain account and subsequently ask for verification of this information by registrars.</p>"},{"location":"what-to-try/identity/#setting-an-identity","title":"Setting an Identity","text":"<p>Users can set an identity by registering through default fields such as legal name, display name, website, Twitter handle, Riot handle, etc. along with some extra, custom fields for which they would like attestations (see Judgements).</p> <p>Users must reserve funds in a bond to store their information on chain: 0.033333, and 0.008333 per each field beyond the legal name. These funds are locked, not spent - they are returned when the identity is cleared.</p> <p>The easiest way to create a on-chain identiy is to click the gear icon next to your account on the Substrate Explorer App and select \"Set on-chain identity\".</p> <p></p> <p>A pop-up window will appear, offering the default fields.</p> <p></p>"},{"location":"what-to-try/identity/#judgement","title":"Judgement","text":"<p>After a user injects their information on chain, they can request judgement from a registrar. Users declare a maximum fee that they are willing to pay for judgement, and registrars whose fee is below that amount can provide a judgement.</p> <p>When a registrar provides judgement, they can select up to six levels of confidence in their attestation:</p> <ul> <li>Unknown: The default value, no judgement made yet.</li> <li>Reasonable: The data appears reasonable, but no in-depth checks (e.g. formal KYC process) were performed.</li> <li>Known Good: The registrar has certified that the information is correct.</li> <li>Out of Date: The information used to be good, but is now out of date.</li> <li>Low Quality: The information is low quality or imprecise, but can be fixed with an update.</li> <li>Erroneous: The information is erroneous and may indicate malicious intent.</li> </ul> <p>A seventh state, \"fee paid\", is for when a user has requested judgement and it is in progress. Information that is in this state or \"erroneous\" is \"sticky\" and cannot be modified; it can only be removed by the complete removal of the identity.</p> <p>Registrars gain trust by performing proper due diligence and would presumably be replaced for issuing faulty judgements.</p> <p>To be judged after submitting your identity information, go to the \"Extrinsics UI\" and select the <code>identity pallet</code>, then <code>requestJudgement</code>. For the <code>reg_index</code> put the index of the registrar you want to be judged by, and for the <code>max_fee</code> put the maximum you're willing to pay for these confirmations</p> <p></p> <p>Hint</p> <p>If you don't know which registrar to pick, first check the available registrars by going to \"Chain State UI\" and selecting identity.registrars() to get the full list.</p>"},{"location":"what-to-try/identity/#requesting-a-judgement","title":"Requesting a Judgement","text":"<p>Requesting judgement follows the same process. Select one of the registrars from the query you made above.  This will make your identity go from \"unjudged\" to \"waiting\"</p> <p>At this point, direct contact with the registrar is required - the contact info is in their identity as shown above. Each registrar will have their own set of procedures to verify your identity and values, and only once you've satisfied their requirements will the process continue.</p> <p>Once the registrar has confirmed the identity, a green checkmark should appear next to your account name with the appropriate confidence level.</p> <p>Warning</p> <p>Note that changing even a single field's value after you've been verified will un-verify your account and you will need to start the judgement process anew. However, you can still change fields while the judgement is going on - it's up to the registrar to keep an eye on the changes.</p>"},{"location":"what-to-try/identity/#cancel-a-judgement","title":"Cancel a Judgement","text":"<p>You may decide that you do not want to be judged by a registrar (for instance, because you realize you entered incorrect data or selected the wrong registrar). In this case, after submitting the request for judgement but before your identity has been judged, you can issue a call to cancel the judgement using an extrinsic.</p> <p>To do this, first, go to the \"Extrinsics UI\" and select the <code>identity pallet</code>, then <code>cancelRequest</code>. Ensure that you are calling this from the correct account (the one for which you initially requested judgement). For the <code>reg_index</code>, put the index of the registrar from which you requested judgement.</p> <p>Submit the transaction, and the requested judgement will be cancelled.</p>"},{"location":"what-to-try/identity/#registars","title":"Registars","text":"<p>Registrars can set a fee for their services and limit their attestation to certain fields. For example, a registrar could charge 1 SDX to verify one's legal name, email, and GPG key. When a user requests judgement, they will pay this fee to the registrar who provides the judgement on those claims. Users set a maximum fee they are willing to pay and only registrars below this amount would provide judgement.</p>"},{"location":"what-to-try/identity/#becoming-a-registar","title":"Becoming a Registar","text":"<p>To become a registrar, submit a pre-image and proposal into Democracy, then wait for people to vote on it. For best results, write a post about your identity and intentions beforehand, and once the proposal is in the queue ask people to second it so that it gets ahead in the referendum queue.</p> <p>Here's how to submit a proposal to become a registrar:</p> <p>Go to the Democracy tab, select \"Submit preimage\", and input the information for this motion - notably which account you're nominating to be a registrar in the identity.<code>setRegistrar</code> function.</p> <p>Copy the preimage hash. Submit the preimage by signing a transaction.</p> <p>Next, select \"Submit Proposal\" and enter the previously copied preimage hash. The locked balance field needs to be at least 100 SDX. You can find out the minimum by querying the chain state under <code>Chain State</code> -&gt; <code>Constants</code> -&gt; <code>democracy</code> -&gt; <code>minimumDeposit</code>.</p>"},{"location":"what-to-try/identity/#clearing-and-killing-an-identity","title":"Clearing and Killing an Identity","text":"<p>Clearing: Users can clear their identity information and have their deposit returned. Clearing an identity also clears all sub accounts and returns their deposits.</p> <p>To clear an identity:</p> <ol> <li>Navigate to the Accounts UI.</li> <li>Click the three dots corresponding to the account you want to clear and select <code>Set on-chain identity</code>.</li> <li>Select <code>Clear Identity</code>, and sign and submit the transaction.</li> </ol> <p>Killing: The Council can kill an identity that it deems erroneous. This results in a slash of the deposit.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"what-to-try/nominator/","title":"STAKING: BECOME A NOMINATOR","text":"<p>If you are looking for a \"set-it-and-forget-it\" approach to leverage your SDX coins, then becoming a SwapDEX nominator is the way to go.  As a nominator, you are participating in the staking system of SwapDEX. Nominators use a specified amount of their funds to \"vote\" for SwapDEX validators. Validators are network nodes that participate in the consensus and block authoring process. Your job as a nominator is to appoint (stake) your SDX to elect the active set of validators. The active validators list consists of validators that received the most SDX as \"votes\". If your chosen validator makes it to the active set, he will earn rewards and ideally share them with all of his nominators.</p> <p>The main difference between a Validator and a Nominator is the active participation in the network. Validators engage in the block production and finality mechanisms, whereas nominators take a more passive role with the above mentioned \"set-it-and-forget-it\" approach. Being a nominator does not require running a node of your own or worrying about online uptime. However, a good nominator performs due diligence on the validators that they elect. When looking for validators to nominate, a nominator should pay attention to their reward percentage for nominating a specific validator - as well as the risk that they bear of being slashed if the validator gets slashed.</p>"},{"location":"what-to-try/nominator/#setting-up-controller-and-stash-accounts","title":"Setting up Controller and Stash Accounts","text":"<p>Info</p> <p>In this guide, we use the terms \"account\" and \"wallet\" interchangeably.</p> <p>Nominators are recommended to set up two separate stash and controller accounts. Explanation and reasoning for generating distinct accounts for this purpose is elaborated in the keys section of the Wiki.</p> <p>You can generate your stash and controller account via any of the recommended methods that are detailed on the account generation page.</p> <p>Hint</p> <p>Payouts can go to any custom address. If you'd like to redirect payments to an account that is neither the controller nor the stash account, set one up. Note that it is extremely unsafe to set an exchange address as the recipient of the staking rewards.</p>"},{"location":"what-to-try/nominator/#using-swapdex-substrate-explorer","title":"Using SwapDEX Substrate Explorer","text":""},{"location":"what-to-try/nominator/#step-1-bond-your-coins","title":"Step 1: Bond your coins","text":"<p>On the Substrate Explorer UI navigate to the \"Staking\" tab (within the \"Network\" menu).</p> <p></p> <p>The \"Staking Overview\" subsection will show you all the active validators and their information:</p> <ul> <li>(1) their identities</li> <li>(2) the amount of SDX that are staking for them</li> <li>(3) amount that is their own provided stake </li> <li>(4) how much they charge in commission</li> <li>(5) the era points they've earned in the current era</li> <li>(6) and the last block number that they produced. </li> </ul> <p>Attention</p> <p>What does oversubscribed mean?  Maximum number of Validators a Nominator is able to stake/delegate to is 16. Validators can receive up to 256 nominations before they are oversubscribed. (76,800 nominations will receive rewards) Once oversubscribed, the amount of SDX nominated is deciding whether you'll receive rewards or not.</p> <p></p> <p>If you click on the (7) chart button, it will take you to the \"Validator Stats\" page for that validator that shows you more detailed and historical information about the validator's stake, rewards, and slashes.</p> <p>The Account actions subsection allows you to stake and nominate. Pick <code>Account actions</code> underneath <code>Network</code> &gt; <code>Staking</code>, then click the <code>+ Nominator</code> button.</p> <p></p> <p>You will see a modal window that looks like the below:</p> <p></p> <p>Select a <code>value bonded</code> that is less than the total amount of SDX you have, so you have some leftover to pay transaction fees. Transaction fees are currently at least 0.01 SDX, but they are dynamic based on various factors, including a load of recent blocks.</p> <p>Choose whatever payment destination makes sense to you. If you're unsure, you can choose \"Stash account (increase amount at stake)\" to simply accrue the rewards into the amount you're staking and earn compound interest.</p> <p></p>"},{"location":"what-to-try/nominator/#step-2-nominate-a-validator","title":"Step 2: Nominate a Validator","text":"<p>You are now bonded. Being bonded means your tokens are locked and could be slashed if the validators you nominate misbehave. All bonded funds can now be distributed to up to 16 validators. Be careful about the validators you choose since you will be slashed if your validator commits an offense.</p> <p>Click on <code>Nominate</code> on an account you've bonded, and you will be presented with another popup asking you to select some validators.</p> <p></p> <p>Select them, confirm the transaction, and you're done - you are now nominating. Your nominations will become active in the next era. Eras last 6 hours on SwapDEX - depending on when you do this, your nominations may become active almost immediately, or you may have to wait nearly the entire 6 hours before your nominations are active. You can check how far along SwapDEX is in the current era on the Staking page.</p> <p>Assuming at least one of your nominations ends up in the active validator set, you will start to get rewards allocated to you. To claim them (i.e., add them to your account), you must manually claim them. You can do it yourself or have the validator you staked to initiate a claim. This is to help optimize the effectiveness and storage of payouts on SwapDEX. See the Claiming Rewards section of the Staking wiki page for more details.</p> <p>Success</p> <p>Congrats! You successfully staked SDX on the substrate side of the SwapDEX Chain </p>"},{"location":"what-to-try/nominator/#step-3-stop-nominating","title":"Step 3: Stop Nominating","text":"<p>At some point, you might decide to stop nominating one or more validators. You can always change who you're nominating, but you cannot withdraw your coins unless you unbond them. Detailed instructions are available here.</p> <p></p> <p> Written by Masterdubs &amp; Petar </p>"},{"location":"what-to-try/treasury/","title":"SPEND THE TREASURY","text":"<p>The Treasury is a pot of funds collected through transaction fees, slashing, staking inefficiencies, etc. The funds held in the Treasury can be spent by making a spending proposal that, if approved by the Council, will enter a waiting period before distribution. This waiting period is known as the budget period, and its duration is subject to governance, with the current default set to 6 days. The Treasury attempts to spend as many proposals in the queue as it can without running out of funds.</p> <p>If the Treasury ends a budget period without spending all of its funds, it suffers a burn of a percentage of its funds -- thereby causing deflationary pressure. This percentage is currently 0.2% on SwapDEX, with the amount currently going to Society rather than being burned.</p> <p>When a stakeholder wishes to propose a spend from the Treasury, they must reserve a deposit of at least 5% of the proposed spend (see below for variations). This deposit will be slashed if the proposal is rejected, and returned if it is accepted.</p> <p>Proposals may consist of (but are not limited to):</p> <ul> <li>Infrastructure deployment and continued operation.</li> <li>Network security operations (monitoring services, continuous auditing).</li> <li>Ecosystem provisions (collaborations with friendly chains).</li> <li>Marketing activities (advertising, paid features, collaborations).</li> <li>Community events and outreach (meetups, pizza parties, hackerspaces).</li> <li>Software development (wallets and wallet integration, clients and client upgrades).</li> </ul> <p>The Treasury is ultimately controlled by the Council, and how the funds will be spent is up to their judgment.</p>"},{"location":"what-to-try/treasury/#funding-the-treasury","title":"Funding the Treasury","text":"<p>The Treasury is funded from different sources:</p> <ul> <li>Slashing: When a validator is slashed for any reason, the slashed amount is sent to the Treasury with a reward going to the entity that reported the validator (another validator). The reward is taken from the slash amount and varies per offence and number of reporters.</li> <li>Transaction fees: A portion of each block's transaction fees goes to the Treasury, with the remainder going to the block author.</li> <li>Staking inefficiency: Inflation is designed to be 20% in the first year, and the ideal staking ratio is set at 50%, meaning half of all SDX should be locked in staking. - Any deviation from this ratio will cause a proportional amount of the inflation to go to the Treasury. In other words, if 50% of all SDX are staked, then 100% of the inflation goes to the validators as reward. If the staking rate is greater than or less than 50%, then the validators will receive less, with the remainder going to the Treasury.</li> </ul>"},{"location":"what-to-try/treasury/#creating-a-treasury-proposal","title":"Creating a Treasury Proposal","text":"<p>The proposer has to deposit 5% of the requested amount or 0.067 SDX (whichever is higher) as an anti-spam measure. This amount is burned if the proposal is rejected, or refunded otherwise. These values are subject to governance so they may change in the future.</p> <p>Please note that there is no way for a user to revoke a treasury proposal after it has been submitted. The Council will either accept or reject the proposal, and if the proposal is rejected, the bonded funds are burned.</p>"},{"location":"what-to-try/treasury/#announcing-the-proposal","title":"Announcing the Proposal","text":"<p>To minimize storage on chain, proposals don't contain contextual information. When a user submits a proposal, they will probably need to find an off-chain way to explain the proposal. Most discussion takes place on Discord.</p> <p>Spreading the word about the proposal's explanation is ultimately up to the proposer - the recommended way is using our official channels like Discord or Telegram.</p>"},{"location":"what-to-try/treasury/#creating-the-proposal","title":"Creating the Proposal","text":"<p>One way to create the proposal is to use the Substrate Explorer App. From the website, use the Governance tab and select the Treasury, then click on submit proposal and enter the desired amount and recipient.</p> <p></p> <p>The system will automatically take the required deposit, picking the higher of the two values mentioned above.</p> <p>Once created, your proposal will become visible in the Treasury screen and the Council can start voting on it.</p> <p>Hint</p> <p>Remember that the proposal has no metadata, so it's up to the proposer to create a description and purpose that the Council could study and base their votes on.</p> <p>At this point, a Council member can create a motion to accept or to reject the treasury proposal. It is possible that one motion to accept and another motion to reject are both created. The proportions to accept and reject Council proposals vary between accept or reject, and possibly depend on which network the Treasury is implemented.</p> <p>The threshold for accepting a treasury proposal is at least three-fifths of the Council. On the other hand, the threshold for rejecting a proposal is at least one-half of the Council.</p>"},{"location":"what-to-try/treasury/#tipping","title":"Tipping","text":"<p>Next to the proposals process, a separate system for making tips exists for the Treasury. Tips can be suggested by anyone and are supported by members of the Council. Tips do not have any definite value; the final value of the tip is decided based on the median of all tips issued by the tippers.</p> <p>Currently, the tippers are the same as the members of the Council. However, being a tipper is not the direct responsibility of the Council, and at some point the Council and the tippers may be different groups of accounts.</p> <p>A tip will enter a closing phase when more than a half plus one of the tipping group have endorsed a tip. During that timeframe, the other members of the tipping group can still issue their tips, but do not have to. Once the window closes, anyone can call the close_tip extrinsic, and the tip will be paid out.</p> <p>There are two types of tips: public and tipper-initiated. With public tips, a small bond is required to place them. This bond depends on the tip message length, and a fixed bond constant defined on chain, currently 0.166. Public tips carry a finder's fee of 20% which is paid out from the total amount. Tipper-initiated tips, i.e. tips that a Council member published, do not have a finder's fee or a bond.</p> <p>To better understand the process a tip goes through until it is paid out, let's consider an example.</p>"},{"location":"what-to-try/treasury/#example","title":"Example","text":"<p>Bob has done something great for SwapDEX. Alice has noticed this and decides to report Bob as deserving a tip from the Treasury. The Council is composed of three members Charlie, Dave, and Eve.</p> <p>Alice begins the process by issuing the <code>report_awesome</code> extrinsic. This extrinsic requires two arguments, a reason and the address to tip. Alice submits Bob's address with the reason being a UTF-8 encoded URL to a post on Discord that explains her reasoning for why Bob deserves the tip.</p> <p>As mentioned above, Alice must also lock up a deposit for making this report. The deposit is the base deposit as set in the chain's parameter list plus the additional deposit per byte contained in the reason. This is why Alice submitted a URL as the reason instead of the explanation directly, it was cheaper for her to do so.</p> <p>For her trouble, Alice is able to claim the eventual finder's fee if the tip is approved by the tippers.</p> <p>Since the tipper group is the same as the Council, the Council must now collectively (but also independently) decide on the value of the tip that Bob deserves.</p> <p>Charlie, Dave, and Eve all review the report and make tips according to their personal valuation of the benefit Bob has provided to SwapDEX.</p> <p>Charlie tips 1 SDX. Dave tips 3 SDX. Eve tips 10 SDX.</p> <p>The tip could have been closed out with only two of the three tippers. Once more than half of the tippers group have issued tip valuations, the countdown to close the tip will begin. In this case, the third tipper issued their tip before the end of the closing period, so all three were able to make their tip valuations known.</p> <p>Now the actual tip that will be paid out to Bob is the median of these tips, so Bob will be paid out 3 SDX from the Treasury.</p> <p>In order for Bob to be paid his tip, some account must call the close_tip extrinsic at the end of the closing period for the tip. This extrinsic may be called by anyone.</p>"},{"location":"what-to-try/treasury/#bounties-spending","title":"Bounties Spending","text":"<p>There are practical limits to Council Members curation capabilities when it comes to treasury proposals: Council members likely do not have the expertise to make a proper assessment of the activities described in all proposals. Even if individual Councillors have that expertise, it is highly unlikely that a majority of members are capable in such diverse topics.</p> <p>Bounties Spending proposals aim to delegate the curation activity of spending proposals to experts called Curators: They can be defined as addresses with agency over a portion of the Treasury with the goal of fixing a bug or vulnerability, developing a strategy, or monitoring a set of tasks related to a specific topic: all for the benefit of the SwapDEX ecosystem.</p> <p>A proposer can submit a bounty proposal for the Council to pass, with a curator to be defined later, whose background and expertise is such that they are capable of determining when the task is complete. Curators are selected by the Council after the bounty proposal passes, and need to add an upfront payment to take the position. This deposit can be used to punish them if they act maliciously. However, if they are successful in their task of getting someone to complete the bounty work, they will receive their deposit back and part of the bounty reward.</p> <p>When submitting the value of the bounty, the proposer includes a reward for curators willing to invest their time and expertise in the task: this amount is included in the total value of the bounty. In this sense, the curator's fee can be defined as the result of subtracting the value paid to the bounty rewardee from the total value of the bounty.</p> <p>In general terms, curators are expected to have a well-balanced track record related to the issues the bounty tries to resolve: they should be at least knowledgeable on the topics the bounty touches, and show project management skills or experience. These recommendations ensure an effective use of the mechanism. A Bounty Spending is a reward for a specified body of work - or specified set of objectives - that needs to be executed for a predefined treasury amount to be paid out. The responsibility of assigning a payout address once the specified set of objectives is completed is delegated to the curator.</p> <p>After the Council has activated a bounty, it delegates the work that requires expertise to the curator who gets to close the active bounty. Closing the active bounty enacts a delayed payout to the payout address and a payout of the curator fee. The delay phase allows the Council to act if any issues arise.</p> <p>To minimize storage on chain in the same way as any proposal, bounties don't contain contextual information. When a user submits a bounty spending proposal, they will probably need to find an off-chain way to explain the proposal (any of the available community forums serve this purpose). We will provide a template that can help as a checklist of all needed information for the Council to make an informed decision.</p> <p>The bounty has a predetermined duration of 90 days with the possibility of being extended by the curator. Aiming to maintain flexibility on the task\u2019s curation, the curator will be able to create sub-bounties for more granularity and allocation in the next iteration of the mechanism.</p> <p></p>"},{"location":"what-to-try/treasury/#creating-a-bounty-proposal","title":"Creating a Bounty Proposal","text":"<p>Anyone can create a Bounty proposal using Substrate Explorer App: Users are able to submit a proposal on the dedicated Bounty section under Governance. The development of a robust user interface to view and manage bounties in the Substrate Explorer App is still under development and it will serve Council members, Curators and Beneficiaries of the bounties, as well as all users observing the on-chain treasury governance. For now, the help of a Councillor is needed to open a bounty proposal as a motion to be voted.</p> <p>To submit a bounty, please visit Substrate Explorer App and click on the <code>governance tab</code> in the options bar on the top of the site. After, click on <code>Bounties</code> and find the button <code>+ Add Bounty</code> on the upper-right side of the interface. Complete the bounty title, the requested allocation (including curator's fee) and confirm the call.</p> <p>After this, a Council member will need to assist you to pass the bounty proposal for vote as a motion. You can contact the Council by joining our Discord server and publishing a short description of your bounty, with a link to one of the forums for contextual information.</p> <p>A bounty can be cancelled by deleting the earmark for a specific treasury amount or be closed if the tasks have been completed. On the opposite side, the 90 days life of a bounty can be extended by amending the expiry block number of the bounty to stay active.</p>"},{"location":"what-to-try/treasury/#closing-a-bounty","title":"Closing a Bounty","text":"<p>The curator can close the bounty once they approve the completion of its tasks. The curator should make sure to set up the payout address on the active bounty beforehand. Closing the Active bounty enacts a delayed payout to the payout address and a payout of the curator fee.</p> <p>A bounty can be closed by using the extrinsics tab and selecting the Treasury pallet, then <code>Award_bounty</code>, making sure the right bounty is to be closed and finally sign the transaction. It is important to note that those who received a reward after the bounty is completed, must claim the specific amount of the payout from the payout address, by calling Claim_bounty after the curator closed the allocation.</p>"},{"location":"what-to-try/treasury/#faq","title":"FAQ","text":""},{"location":"what-to-try/treasury/#what-prevents-the-treasury-from-being-captured-by-a-majority-of-the-council","title":"What prevents the Treasury from being captured by a majority of the council?","text":"<p>The majority of the Council can decide the outcome of a treasury spend proposal. In an adversarial mindset, we may consider the possibility that the Council may at some point go rogue and attempt to steal all of the treasury funds. It is a possibility that the treasury pot becomes so great, that a large financial incentive would present itself.</p> <p>For one, the Treasury has deflationary pressure due to the burn that is suffered every spend period. The burn aims to incentivize the complete spend of all treasury funds at every burn period, so ideally the treasury pot doesn't have time to accumulate mass amounts of wealth. However, it is the case that the burn on the Treasury could be so little that it does not matter.</p> <p>However, it is the case on SwapDEX that the Council is composed of mainly well-known members of the community. Remember, the Council is voted in by the SDX holders, so they must do some campaigning or otherwise be recognized to earn votes. In the scenario of an attack, the Council members would lose their social credibility. Furthermore, members of the Council are usually externally motivated by the proper operation of the chain. This external motivation is either because they run businesses that depend on the chain, or they have direct financial gain (through their holdings) of the token value remaining steady.</p> <p>Concretely, there are a couple on-chain methods that resist this kind of attack. One, the Council majority may not be the token majority of the chain. This means that the token majority could vote to replace the Council if they attempted this attack - or even reverse the treasury spend. They would do this through a normal referendum. Two, there are time delays to treasury spends. They are only enacted every spend period. This means that there will be some time to observe this attack is taking place. The time delay then allows chain participants time to respond. The response may take the form of governance measures or - in the most extreme cases a liquidation of their holdings and a migration to a minority fork. However, the possibility of this scenario is quite low.</p>"},{"location":"what-to-try/treasury/#further-reading","title":"Further Reading","text":"<ul> <li>Substrate's Treasury Pallet - The Rust implementation of the Treasury (Docs)</li> </ul> <p> Written by Masterdubs &amp; Petar </p>"}]}